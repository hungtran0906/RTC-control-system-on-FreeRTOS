
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c14  08008c14  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c18  08008c18  00009c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008c1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00005a64  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005adc  20005adc  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014296  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003735  00000000  00000000  0001e33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d67  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d49  00000000  00000000  0002393f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018216  00000000  00000000  00048688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5faf  00000000  00000000  0006089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013684d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e60  00000000  00000000  00136890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0013b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008834 	.word	0x08008834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008834 	.word	0x08008834

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000094 	.word	0x20000094
 80005c0:	200000e8 	.word	0x200000e8

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	@ (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200002e8 	.word	0x200002e8
 80005f4:	2000033c 	.word	0x2000033c

080005f8 <led_effect_stop>:

#include "led_effect.h"

extern TimerHandle_t handle_led_timer[4];
int led_effect_stop(int *n) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
	return xTimerStop(handle_led_timer[*n], 0);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	@ (8000624 <led_effect_stop+0x2c>)
 8000606:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800060a:	2300      	movs	r3, #0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2200      	movs	r2, #0
 8000612:	2103      	movs	r1, #3
 8000614:	f006 fa4c 	bl	8006ab0 <xTimerGenericCommand>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000860 	.word	0x20000860

08000628 <led_effect>:
int led_effect(int *n) {
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b085      	sub	sp, #20
 800062c:	af02      	add	r7, sp, #8
 800062e:	6078      	str	r0, [r7, #4]
	led_effect_stop(n);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ffe1 	bl	80005f8 <led_effect_stop>
	return xTimerStart(handle_led_timer[*n], 0);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <led_effect+0x38>)
 800063c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000640:	f005 fb5a 	bl	8005cf8 <xTaskGetTickCount>
 8000644:	4602      	mov	r2, r0
 8000646:	2300      	movs	r3, #0
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2101      	movs	r1, #1
 800064e:	4620      	mov	r0, r4
 8000650:	f006 fa2e 	bl	8006ab0 <xTimerGenericCommand>
 8000654:	4603      	mov	r3, r0

}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000860 	.word	0x20000860

08000664 <led_effect1>:

void led_effect1(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 800066a:	230c      	movs	r3, #12
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	e010      	b.n	8000692 <led_effect1+0x2e>
		if (i % 2 == 0)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d108      	bne.n	800068c <led_effect1+0x28>
			HAL_GPIO_TogglePin(GPIOD, 1 << i);
 800067a:	2201      	movs	r2, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <led_effect1+0x40>)
 8000688:	f001 feb7 	bl	80023fa <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	ddeb      	ble.n	8000670 <led_effect1+0xc>
	}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <led_effect2>:
void led_effect2(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 80006ae:	230c      	movs	r3, #12
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e013      	b.n	80006dc <led_effect2+0x34>
		if (i % 2 == 1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	bfb8      	it	lt
 80006be:	425b      	neglt	r3, r3
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d108      	bne.n	80006d6 <led_effect2+0x2e>
			HAL_GPIO_TogglePin(GPIOD, 1 << i);
 80006c4:	2201      	movs	r2, #1
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <led_effect2+0x44>)
 80006d2:	f001 fe92 	bl	80023fa <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	dde8      	ble.n	80006b4 <led_effect2+0xc>
	}
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <led_effect3>:
void led_effect3(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 80006f6:	230c      	movs	r3, #12
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e017      	b.n	800072c <led_effect3+0x3c>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 80006fc:	2201      	movs	r2, #1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	b29b      	uxth	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <led_effect3+0x4c>)
 800070a:	f001 fe76 	bl	80023fa <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800070e:	2032      	movs	r0, #50	@ 0x32
 8000710:	f001 faf6 	bl	8001d00 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 8000714:	2201      	movs	r2, #1
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <led_effect3+0x4c>)
 8000722:	f001 fe6a 	bl	80023fa <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b0f      	cmp	r3, #15
 8000730:	dde4      	ble.n	80006fc <led_effect3+0xc>

	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020c00 	.word	0x40020c00

08000740 <led_effect4>:
void led_effect4(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	for (int i = 15; i > 11; i--) {
 8000746:	230f      	movs	r3, #15
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e017      	b.n	800077c <led_effect4+0x3c>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 800074c:	2201      	movs	r2, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <led_effect4+0x4c>)
 800075a:	f001 fe4e 	bl	80023fa <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800075e:	2032      	movs	r0, #50	@ 0x32
 8000760:	f001 face 	bl	8001d00 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 8000764:	2201      	movs	r2, #1
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	b29b      	uxth	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	4806      	ldr	r0, [pc, #24]	@ (800078c <led_effect4+0x4c>)
 8000772:	f001 fe42 	bl	80023fa <HAL_GPIO_TogglePin>
	for (int i = 15; i > 11; i--) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3b01      	subs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b0b      	cmp	r3, #11
 8000780:	dce4      	bgt.n	800074c <led_effect4+0xc>

	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40020c00 	.word	0x40020c00

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b085      	sub	sp, #20
 8000794:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f001 fa41 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f8b1 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 fa2d 	bl	8000bfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a2:	f000 f919 	bl	80009d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a6:	f000 f945 	bl	8000a34 <MX_I2C2_Init>
  MX_RTC_Init();
 80007aa:	f000 f971 	bl	8000a90 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80007ae:	f000 f9fb 	bl	8000ba8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	xTaskCreate(menu_task, "menu_task", 200, NULL, 2, &handle_menu_task);
 80007b2:	4b3a      	ldr	r3, [pc, #232]	@ (800089c <main+0x10c>)
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	2302      	movs	r3, #2
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2300      	movs	r3, #0
 80007bc:	22c8      	movs	r2, #200	@ 0xc8
 80007be:	4938      	ldr	r1, [pc, #224]	@ (80008a0 <main+0x110>)
 80007c0:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <main+0x114>)
 80007c2:	f005 f84d 	bl	8005860 <xTaskCreate>
	xTaskCreate(cmd_handler_task, "cmd_task", 200, NULL, 2, &handle_cmd_task);
 80007c6:	4b38      	ldr	r3, [pc, #224]	@ (80008a8 <main+0x118>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	22c8      	movs	r2, #200	@ 0xc8
 80007d2:	4936      	ldr	r1, [pc, #216]	@ (80008ac <main+0x11c>)
 80007d4:	4836      	ldr	r0, [pc, #216]	@ (80008b0 <main+0x120>)
 80007d6:	f005 f843 	bl	8005860 <xTaskCreate>
	xTaskCreate(print_task, "print_task", 200, NULL, 2, &handle_print_task);
 80007da:	4b36      	ldr	r3, [pc, #216]	@ (80008b4 <main+0x124>)
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	2302      	movs	r3, #2
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2300      	movs	r3, #0
 80007e4:	22c8      	movs	r2, #200	@ 0xc8
 80007e6:	4934      	ldr	r1, [pc, #208]	@ (80008b8 <main+0x128>)
 80007e8:	4834      	ldr	r0, [pc, #208]	@ (80008bc <main+0x12c>)
 80007ea:	f005 f839 	bl	8005860 <xTaskCreate>
	xTaskCreate(led_task, "led_task", 200, NULL, 2, &handle_led_task);
 80007ee:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <main+0x130>)
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2302      	movs	r3, #2
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	22c8      	movs	r2, #200	@ 0xc8
 80007fa:	4932      	ldr	r1, [pc, #200]	@ (80008c4 <main+0x134>)
 80007fc:	4832      	ldr	r0, [pc, #200]	@ (80008c8 <main+0x138>)
 80007fe:	f005 f82f 	bl	8005860 <xTaskCreate>
	xTaskCreate(rtc_task, "rtc_task", 200, NULL, 2, &handle_rtc_task);
 8000802:	4b32      	ldr	r3, [pc, #200]	@ (80008cc <main+0x13c>)
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	22c8      	movs	r2, #200	@ 0xc8
 800080e:	4930      	ldr	r1, [pc, #192]	@ (80008d0 <main+0x140>)
 8000810:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <main+0x144>)
 8000812:	f005 f825 	bl	8005860 <xTaskCreate>

	q_data = xQueueCreate(10, sizeof(char));
 8000816:	2200      	movs	r2, #0
 8000818:	2101      	movs	r1, #1
 800081a:	200a      	movs	r0, #10
 800081c:	f004 faad 	bl	8004d7a <xQueueGenericCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <main+0x148>)
 8000824:	6013      	str	r3, [r2, #0]
	q_print = xQueueCreate(10, sizeof(size_t));
 8000826:	2200      	movs	r2, #0
 8000828:	2104      	movs	r1, #4
 800082a:	200a      	movs	r0, #10
 800082c:	f004 faa5 	bl	8004d7a <xQueueGenericCreate>
 8000830:	4603      	mov	r3, r0
 8000832:	4a2a      	ldr	r2, [pc, #168]	@ (80008dc <main+0x14c>)
 8000834:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e017      	b.n	800086c <main+0xdc>
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(1000),
				pdTRUE, (void*) (i + 1), led_effect_callback);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(1000),
 8000840:	461a      	mov	r2, r3
 8000842:	687c      	ldr	r4, [r7, #4]
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <main+0x150>)
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4613      	mov	r3, r2
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000850:	4824      	ldr	r0, [pc, #144]	@ (80008e4 <main+0x154>)
 8000852:	f006 f8cf 	bl	80069f4 <xTimerCreate>
 8000856:	4603      	mov	r3, r0
 8000858:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <main+0x158>)
 800085a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		led_effect(&i);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fee1 	bl	8000628 <led_effect>
	for (int i = 0; i < 4; i++) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	dde4      	ble.n	800083c <main+0xac>

	}
	rtc_timer = xTimerCreate("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE,
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <main+0x15c>)
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800087e:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <main+0x160>)
 8000880:	f006 f8b8 	bl	80069f4 <xTimerCreate>
 8000884:	4603      	mov	r3, r0
 8000886:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <main+0x164>)
 8000888:	6013      	str	r3, [r2, #0]
			NULL, rtc_report_callback);
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	491a      	ldr	r1, [pc, #104]	@ (80008f8 <main+0x168>)
 800088e:	481b      	ldr	r0, [pc, #108]	@ (80008fc <main+0x16c>)
 8000890:	f003 f95d 	bl	8003b4e <HAL_UART_Receive_IT>
	vTaskStartScheduler();
 8000894:	f005 f91c 	bl	8005ad0 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <main+0x108>
 800089c:	20000850 	.word	0x20000850
 80008a0:	0800884c 	.word	0x0800884c
 80008a4:	08001415 	.word	0x08001415
 80008a8:	2000084c 	.word	0x2000084c
 80008ac:	08008858 	.word	0x08008858
 80008b0:	08001b9d 	.word	0x08001b9d
 80008b4:	20000858 	.word	0x20000858
 80008b8:	08008864 	.word	0x08008864
 80008bc:	08001a79 	.word	0x08001a79
 80008c0:	20000854 	.word	0x20000854
 80008c4:	08008870 	.word	0x08008870
 80008c8:	080014dd 	.word	0x080014dd
 80008cc:	2000085c 	.word	0x2000085c
 80008d0:	0800887c 	.word	0x0800887c
 80008d4:	08001639 	.word	0x08001639
 80008d8:	20000874 	.word	0x20000874
 80008dc:	20000878 	.word	0x20000878
 80008e0:	08000cd9 	.word	0x08000cd9
 80008e4:	08008888 	.word	0x08008888
 80008e8:	20000860 	.word	0x20000860
 80008ec:	08000d29 	.word	0x08000d29
 80008f0:	08008894 	.word	0x08008894
 80008f4:	20000870 	.word	0x20000870
 80008f8:	2000087c 	.word	0x2000087c
 80008fc:	20000804 	.word	0x20000804

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	@ 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f007 f969 	bl	8007be6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <SystemClock_Config+0xd0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a28      	ldr	r2, [pc, #160]	@ (80009d0 <SystemClock_Config+0xd0>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <SystemClock_Config+0xd0>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <SystemClock_Config+0xd4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <SystemClock_Config+0xd4>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <SystemClock_Config+0xd4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800095c:	230a      	movs	r3, #10
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2310      	movs	r3, #16
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000978:	23a8      	movs	r3, #168	@ 0xa8
 800097a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fe95 	bl	80026b8 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000994:	f000 fa24 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2105      	movs	r1, #5
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f8f6 	bl	8002ba8 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009c2:	f000 fa0d 	bl	8000de0 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	@ 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <MX_I2C1_Init+0x54>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x58>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_I2C1_Init+0x50>)
 8000a16:	f001 fd0b 	bl	8002430 <HAL_I2C_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a20:	f000 f9de 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000073c 	.word	0x2000073c
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	000186a0 	.word	0x000186a0

08000a34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	@ (8000a88 <MX_I2C2_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_I2C2_Init+0x58>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_I2C2_Init+0x50>)
 8000a72:	f001 fcdd 	bl	8002430 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f9b0 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000790 	.word	0x20000790
 8000a88:	40005800 	.word	0x40005800
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b090      	sub	sp, #64	@ 0x40
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2228      	movs	r2, #40	@ 0x28
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f007 f898 	bl	8007be6 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ba4 <MX_RTC_Init+0x114>)
 8000aba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000abc:	4b38      	ldr	r3, [pc, #224]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ac2:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000ac4:	227f      	movs	r2, #127	@ 0x7f
 8000ac6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ace:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ae0:	482f      	ldr	r0, [pc, #188]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000ae2:	f002 fb23 	bl	800312c <HAL_RTC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 f978 	bl	8000de0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4823      	ldr	r0, [pc, #140]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000b14:	f002 fb8d 	bl	8003232 <HAL_RTC_SetTime>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000b1e:	f000 f95f 	bl	8000de0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000b44:	f002 fc6d 	bl	8003422 <HAL_RTC_SetDate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000b4e:	f000 f947 	bl	8000de0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2201      	movs	r2, #1
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_RTC_Init+0x110>)
 8000b8a:	f002 fd1d 	bl	80035c8 <HAL_RTC_SetAlarm>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000b94:	f000 f924 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3740      	adds	r7, #64	@ 0x40
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200007e4 	.word	0x200007e4
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f002 feda 	bl	8003998 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f8f9 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000804 	.word	0x20000804
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a26      	ldr	r2, [pc, #152]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000ca6:	f001 fb8f 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000caa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000cc4:	f001 f9e4 	bl	8002090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020c00 	.word	0x40020c00

08000cd8 <led_effect_callback>:

/* USER CODE BEGIN 4 */
void led_effect_callback(TimerHandle_t xTimer) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	int id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f006 fa03 	bl	80070ec <pvTimerGetTimerID>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60fb      	str	r3, [r7, #12]

	switch (id) {
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d816      	bhi.n	8000d20 <led_effect_callback+0x48>
 8000cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf8 <led_effect_callback+0x20>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d09 	.word	0x08000d09
 8000cfc:	08000d0f 	.word	0x08000d0f
 8000d00:	08000d15 	.word	0x08000d15
 8000d04:	08000d1b 	.word	0x08000d1b
	case 1:
		led_effect1();
 8000d08:	f7ff fcac 	bl	8000664 <led_effect1>
		break;
 8000d0c:	e008      	b.n	8000d20 <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000d0e:	f7ff fccb 	bl	80006a8 <led_effect2>
		break;
 8000d12:	e005      	b.n	8000d20 <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000d14:	f7ff fcec 	bl	80006f0 <led_effect3>
		break;
 8000d18:	e002      	b.n	8000d20 <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000d1a:	f7ff fd11 	bl	8000740 <led_effect4>
		break;
 8000d1e:	bf00      	nop

	}
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <rtc_report_callback>:
void rtc_report_callback(TimerHandle_t xTimer) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	show_time_data_itm();
 8000d30:	f000 f85c 	bl	8000dec <show_time_data_itm>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e002      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x14>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000d56:	d3f8      	bcc.n	8000d4a <HAL_UART_RxCpltCallback+0xe>

	if( !xQueueIsQueueFullFromISR(q_data)){
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_UART_RxCpltCallback+0x94>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fc9a 	bl	8005696 <xQueueIsQueueFullFromISR>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <HAL_UART_RxCpltCallback+0x3c>
		xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_UART_RxCpltCallback+0x94>)
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4918      	ldr	r1, [pc, #96]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x98>)
 8000d72:	f004 f95f 	bl	8005034 <xQueueGenericSendFromISR>
 8000d76:	e013      	b.n	8000da0 <HAL_UART_RxCpltCallback+0x64>
	}
	else{
		if(user_data == '\n'){
 8000d78:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x98>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d10e      	bne.n	8000da0 <HAL_UART_RxCpltCallback+0x64>
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <HAL_UART_RxCpltCallback+0x94>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f107 010b 	add.w	r1, r7, #11
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fad1 	bl	8005334 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_UART_RxCpltCallback+0x94>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2200      	movs	r2, #0
 8000d9a:	490e      	ldr	r1, [pc, #56]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x98>)
 8000d9c:	f004 f94a 	bl	8005034 <xQueueGenericSendFromISR>
		}
	}
	if( user_data == '\n'){
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x98>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d108      	bne.n	8000dbc <HAL_UART_RxCpltCallback+0x80>
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_UART_RxCpltCallback+0x9c>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	f005 fc8e 	bl	80066d8 <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4905      	ldr	r1, [pc, #20]	@ (8000dd4 <HAL_UART_RxCpltCallback+0x98>)
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <HAL_UART_RxCpltCallback+0xa0>)
 8000dc2:	f002 fec4 	bl	8003b4e <HAL_UART_Receive_IT>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000874 	.word	0x20000874
 8000dd4:	2000087c 	.word	0x2000087c
 8000dd8:	2000084c 	.word	0x2000084c
 8000ddc:	20000804 	.word	0x20000804

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <show_time_data_itm>:
 *  Created on: Sep 15, 2024
 *      Author: Acer
 */
#include "rtc.h"

void show_time_data_itm(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	2204      	movs	r2, #4
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 fef3 	bl	8007be6 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2214      	movs	r2, #20
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 feed 	bl	8007be6 <memset>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	4815      	ldr	r0, [pc, #84]	@ (8000e68 <show_time_data_itm+0x7c>)
 8000e14:	f002 faa7 	bl	8003366 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <show_time_data_itm+0x7c>)
 8000e22:	f002 fb82 	bl	800352a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <show_time_data_itm+0x44>
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <show_time_data_itm+0x80>)
 8000e2e:	e000      	b.n	8000e32 <show_time_data_itm+0x46>
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <show_time_data_itm+0x84>)
 8000e32:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes,
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	4619      	mov	r1, r3
 8000e38:	797b      	ldrb	r3, [r7, #5]
 8000e3a:	461a      	mov	r2, r3
			rtc_time.Seconds, format);
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes,
 8000e3e:	4618      	mov	r0, r3
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4603      	mov	r3, r0
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <show_time_data_itm+0x88>)
 8000e48:	f006 fe78 	bl	8007b3c <iprintf>
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000e4c:	7e7b      	ldrb	r3, [r7, #25]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	7ebb      	ldrb	r3, [r7, #26]
 8000e52:	461a      	mov	r2, r3
			2000 + rtc_date.Year);
 8000e54:	7efb      	ldrb	r3, [r7, #27]
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000e56:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e5a:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <show_time_data_itm+0x8c>)
 8000e5c:	f006 fe6e 	bl	8007b3c <iprintf>
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200007e4 	.word	0x200007e4
 8000e6c:	080088a8 	.word	0x080088a8
 8000e70:	080088ac 	.word	0x080088ac
 8000e74:	080088b0 	.word	0x080088b0
 8000e78:	080088c4 	.word	0x080088c4

08000e7c <show_time_date>:
void show_time_date(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	2204      	movs	r2, #4
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 feab 	bl	8007be6 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2214      	movs	r2, #20
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fea5 	bl	8007be6 <memset>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <show_time_date+0xa8>)
 8000ea4:	f002 fa5f 	bl	8003366 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481c      	ldr	r0, [pc, #112]	@ (8000f24 <show_time_date+0xa8>)
 8000eb2:	f002 fb3a 	bl	800352a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <show_time_date+0x44>
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <show_time_date+0xac>)
 8000ebe:	e000      	b.n	8000ec2 <show_time_date+0x46>
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <show_time_date+0xb0>)
 8000ec2:	61fb      	str	r3, [r7, #28]
	printf((char*) showtime, "%02d:%02d:%02d [%s]", rtc_time.Hours,
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	4619      	mov	r1, r3
			rtc_time.Minutes, rtc_time.Seconds, format);
 8000ec8:	797b      	ldrb	r3, [r7, #5]
	printf((char*) showtime, "%02d:%02d:%02d [%s]", rtc_time.Hours,
 8000eca:	4618      	mov	r0, r3
			rtc_time.Minutes, rtc_time.Seconds, format);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
	printf((char*) showtime, "%02d:%02d:%02d [%s]", rtc_time.Hours,
 8000ece:	461a      	mov	r2, r3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9200      	str	r2, [sp, #0]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	4915      	ldr	r1, [pc, #84]	@ (8000f30 <show_time_date+0xb4>)
 8000edc:	4815      	ldr	r0, [pc, #84]	@ (8000f34 <show_time_date+0xb8>)
 8000ede:	f006 fe2d 	bl	8007b3c <iprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <show_time_date+0xbc>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	4913      	ldr	r1, [pc, #76]	@ (8000f3c <show_time_date+0xc0>)
 8000eee:	f003 ff9f 	bl	8004e30 <xQueueGenericSend>
	printf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000ef2:	7e7b      	ldrb	r3, [r7, #25]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7ebb      	ldrb	r3, [r7, #26]
 8000ef8:	4619      	mov	r1, r3
			2000 + rtc_date.Year);
 8000efa:	7efb      	ldrb	r3, [r7, #27]
	printf((char*) showdate, "\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000efc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <show_time_date+0xc4>)
 8000f06:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <show_time_date+0xc8>)
 8000f08:	f006 fe18 	bl	8007b3c <iprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <show_time_date+0xbc>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <show_time_date+0xcc>)
 8000f18:	f003 ff8a 	bl	8004e30 <xQueueGenericSend>
}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200007e4 	.word	0x200007e4
 8000f28:	080088a8 	.word	0x080088a8
 8000f2c:	080088ac 	.word	0x080088ac
 8000f30:	080088b0 	.word	0x080088b0
 8000f34:	20000880 	.word	0x20000880
 8000f38:	20000878 	.word	0x20000878
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	080088c4 	.word	0x080088c4
 8000f44:	200008a8 	.word	0x200008a8
 8000f48:	20000004 	.word	0x20000004

08000f4c <rtc_configure_time>:
void rtc_configure_time(RTC_TimeTypeDef *time) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <rtc_configure_time+0x2c>)
 8000f6c:	f002 f961 	bl	8003232 <HAL_RTC_SetTime>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200007e4 	.word	0x200007e4

08000f7c <rtc_configure_date>:
void rtc_configure_date(RTC_DateTypeDef *date) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <rtc_configure_date+0x1c>)
 8000f8a:	f002 fa4a 	bl	8003422 <HAL_RTC_SetDate>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200007e4 	.word	0x200007e4

08000f9c <validate_rtc_information>:
int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]

	if (time) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00d      	beq.n	8000fc8 <validate_rtc_information+0x2c>
		if ((time->Hours > 12) || time->Minutes > 59 || time->Seconds > 59)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b0c      	cmp	r3, #12
 8000fb2:	d807      	bhi.n	8000fc4 <validate_rtc_information+0x28>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fba:	d803      	bhi.n	8000fc4 <validate_rtc_information+0x28>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fc2:	d901      	bls.n	8000fc8 <validate_rtc_information+0x2c>
			return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e015      	b.n	8000ff4 <validate_rtc_information+0x58>
	}
	if (date) {
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d011      	beq.n	8000ff2 <validate_rtc_information+0x56>
		if ((date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	2b1f      	cmp	r3, #31
 8000fd4:	d80b      	bhi.n	8000fee <validate_rtc_information+0x52>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d807      	bhi.n	8000fee <validate_rtc_information+0x52>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	78db      	ldrb	r3, [r3, #3]
 8000fe2:	2b63      	cmp	r3, #99	@ 0x63
 8000fe4:	d803      	bhi.n	8000fee <validate_rtc_information+0x52>
				|| (date->Month > 12))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d901      	bls.n	8000ff2 <validate_rtc_information+0x56>
			return 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <validate_rtc_information+0x58>
	}

	return 0;
 8000ff2:	2300      	movs	r3, #0

}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_MspInit+0x54>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <HAL_MspInit+0x54>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x54>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_MspInit+0x54>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <HAL_MspInit+0x54>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_MspInit+0x54>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	210f      	movs	r1, #15
 8001042:	f06f 0001 	mvn.w	r0, #1
 8001046:	f000 ff5a 	bl	8001efe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	@ 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a32      	ldr	r2, [pc, #200]	@ (8001140 <HAL_I2C_MspInit+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12c      	bne.n	80010d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a30      	ldr	r2, [pc, #192]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23c0      	movs	r3, #192	@ 0xc0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4825      	ldr	r0, [pc, #148]	@ (8001148 <HAL_I2C_MspInit+0xf0>)
 80010b2:	f000 ffed 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010d2:	e031      	b.n	8001138 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_I2C_MspInit+0xf4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12c      	bne.n	8001138 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	2312      	movs	r3, #18
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800110c:	2304      	movs	r3, #4
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	@ (8001148 <HAL_I2C_MspInit+0xf0>)
 8001118:	f000 ffba 	bl	8002090 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 8001126:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_I2C_MspInit+0xec>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	@ 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40005400 	.word	0x40005400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400
 800114c:	40005800 	.word	0x40005800

08001150 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <HAL_RTC_MspInit+0x4c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d111      	bne.n	8001194 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001170:	2302      	movs	r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001178:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fef2 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800118a:	f7ff fe29 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800118e:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <HAL_RTC_MspInit+0x50>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40002800 	.word	0x40002800
 80011a0:	42470e3c 	.word	0x42470e3c

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <HAL_UART_MspInit+0x94>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d133      	bne.n	800122e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a14      	ldr	r2, [pc, #80]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_UART_MspInit+0x98>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120e:	2307      	movs	r3, #7
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <HAL_UART_MspInit+0x9c>)
 800121a:	f000 ff39 	bl	8002090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2105      	movs	r1, #5
 8001222:	2026      	movs	r0, #38	@ 0x26
 8001224:	f000 fe6b 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001228:	2026      	movs	r0, #38	@ 0x26
 800122a:	f000 fe84 	bl	8001f36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004400 	.word	0x40004400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 fd1f 	bl	8001cc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001282:	f005 f871 	bl	8006368 <xTaskGetSchedulerState>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d001      	beq.n	8001290 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800128c:	f006 f914 	bl	80074b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <USART2_IRQHandler+0x10>)
 800129a:	f002 fc7d 	bl	8003b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000804 	.word	0x20000804

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001342:	605a      	str	r2, [r3, #4]
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f006 fc66 	bl	8007c84 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	200008d0 	.word	0x200008d0
 80013ec:	20005ae0 	.word	0x20005ae0

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <menu_task>:
int extract_command(command_t *cmd);
void process_command(command_t *cmd);

state_t curr_state;
const char *msg_inv = "Invalid option \n";
void menu_task(void *parameter) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char *msg_menu = "\n========================\n"
 800141c:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <menu_task+0xb0>)
 800141e:	60bb      	str	r3, [r7, #8]
			"Date and time ----> 1\n"
			"Exit          ----> 2\n"
			"Enter your choice here : ";
	while (1) {

		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <menu_task+0xb4>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	f003 fcff 	bl	8004e30 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f005 f839 	bl	80064b4 <xTaskNotifyWait>
		//wait for a task notification and blocks the calling task until it receives one
		cmd = (command_t*) cmd_addr;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	617b      	str	r3, [r7, #20]

		if (cmd->len == 1) {
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d129      	bne.n	80014a2 <menu_task+0x8e>
			option = cmd->payload[0] - 48;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3b30      	subs	r3, #48	@ 0x30
 8001454:	613b      	str	r3, [r7, #16]

			switch (option) {
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <menu_task+0x50>
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d00b      	beq.n	800147a <menu_task+0x66>
 8001462:	e015      	b.n	8001490 <menu_task+0x7c>

			case 0:
				curr_state = sLedEffect;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <menu_task+0xb8>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task, 0, eNoAction);
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <menu_task+0xbc>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	f005 f878 	bl	8006568 <xTaskGenericNotify>
				break;
 8001478:	e01c      	b.n	80014b4 <menu_task+0xa0>
			case 1:
				curr_state = sRtcMenu;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <menu_task+0xb8>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <menu_task+0xc0>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	f005 f86d 	bl	8006568 <xTaskGenericNotify>
				break;
 800148e:	e011      	b.n	80014b4 <menu_task+0xa0>
			default:
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <menu_task+0xb4>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	490f      	ldr	r1, [pc, #60]	@ (80014d8 <menu_task+0xc4>)
 800149c:	f003 fcc8 	bl	8004e30 <xQueueGenericSend>
				continue;
 80014a0:	e00f      	b.n	80014c2 <menu_task+0xae>
			}
		} else {
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <menu_task+0xb4>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	490a      	ldr	r1, [pc, #40]	@ (80014d8 <menu_task+0xc4>)
 80014ae:	f003 fcbf 	bl	8004e30 <xQueueGenericSend>
			continue;
 80014b2:	e006      	b.n	80014c2 <menu_task+0xae>
		}
		//wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f004 fff9 	bl	80064b4 <xTaskNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80014c2:	e7ad      	b.n	8001420 <menu_task+0xc>
 80014c4:	080088e8 	.word	0x080088e8
 80014c8:	20000878 	.word	0x20000878
 80014cc:	200008d4 	.word	0x200008d4
 80014d0:	20000854 	.word	0x20000854
 80014d4:	2000085c 	.word	0x2000085c
 80014d8:	2000000c 	.word	0x2000000c

080014dc <led_task>:
	}
}
void led_task(void *parameter) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;
	const char *msg_led = "========================\n"
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <led_task+0xec>)
 80014e6:	60fb      	str	r3, [r7, #12]
			"|      LED Effect     |\n"
			"========================\n"
			"(none,e1,e2,e3,e4)\n"
			"Enter your choice here : ";
	while (1) {
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2000      	movs	r0, #0
 80014f2:	f004 ffdf 	bl	80064b4 <xTaskNotifyWait>

		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <led_task+0xf0>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f107 010c 	add.w	r1, r7, #12
 80014fe:	2300      	movs	r3, #0
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	f003 fc94 	bl	8004e30 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001508:	f107 0210 	add.w	r2, r7, #16
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f004 ffce 	bl	80064b4 <xTaskNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	617b      	str	r3, [r7, #20]

		if (cmd->len <= 4) {
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d83c      	bhi.n	800159e <led_task+0xc2>
			if (!strcmp((char*) cmd->payload, "none"))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	492a      	ldr	r1, [pc, #168]	@ (80015d0 <led_task+0xf4>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fe51 	bl	80001d0 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d047      	beq.n	80015c4 <led_task+0xe8>
				continue;
			else if (!strcmp((char*) cmd->payload, "e1"))
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4927      	ldr	r1, [pc, #156]	@ (80015d4 <led_task+0xf8>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe49 	bl	80001d0 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <led_task+0x6e>
				led_effect1();
 8001544:	f7ff f88e 	bl	8000664 <led_effect1>
 8001548:	e031      	b.n	80015ae <led_task+0xd2>
			else if (!strcmp((char*) cmd->payload, "e2"))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4922      	ldr	r1, [pc, #136]	@ (80015d8 <led_task+0xfc>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe3e 	bl	80001d0 <strcmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <led_task+0x84>
				led_effect2();
 800155a:	f7ff f8a5 	bl	80006a8 <led_effect2>
 800155e:	e026      	b.n	80015ae <led_task+0xd2>
			else if (!strcmp((char*) cmd->payload, "e3"))
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	491e      	ldr	r1, [pc, #120]	@ (80015dc <led_task+0x100>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe33 	bl	80001d0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <led_task+0x9a>
				led_effect3();
 8001570:	f7ff f8be 	bl	80006f0 <led_effect3>
 8001574:	e01b      	b.n	80015ae <led_task+0xd2>
			else if (!strcmp((char*) cmd->payload, "e4"))
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4919      	ldr	r1, [pc, #100]	@ (80015e0 <led_task+0x104>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe28 	bl	80001d0 <strcmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <led_task+0xb0>
				led_effect4();
 8001586:	f7ff f8db 	bl	8000740 <led_effect4>
 800158a:	e010      	b.n	80015ae <led_task+0xd2>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <led_task+0xf0>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	4913      	ldr	r1, [pc, #76]	@ (80015e4 <led_task+0x108>)
 8001598:	f003 fc4a 	bl	8004e30 <xQueueGenericSend>
 800159c:	e007      	b.n	80015ae <led_task+0xd2>
		} else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <led_task+0xf0>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	2300      	movs	r3, #0
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	490e      	ldr	r1, [pc, #56]	@ (80015e4 <led_task+0x108>)
 80015aa:	f003 fc41 	bl	8004e30 <xQueueGenericSend>
		curr_state = sMainMenu;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <led_task+0x10c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <led_task+0x110>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	f004 ffd3 	bl	8006568 <xTaskGenericNotify>
 80015c2:	e791      	b.n	80014e8 <led_task+0xc>
				continue;
 80015c4:	bf00      	nop
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015c6:	e78f      	b.n	80014e8 <led_task+0xc>
 80015c8:	08008990 	.word	0x08008990
 80015cc:	20000878 	.word	0x20000878
 80015d0:	08008a08 	.word	0x08008a08
 80015d4:	08008a10 	.word	0x08008a10
 80015d8:	08008a14 	.word	0x08008a14
 80015dc:	08008a18 	.word	0x08008a18
 80015e0:	08008a1c 	.word	0x08008a1c
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	200008d4 	.word	0x200008d4
 80015ec:	20000850 	.word	0x20000850

080015f0 <getNumber>:
	}
}
uint8_t getNumber(uint8_t *p, int len) {
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]

	int value;
	if (len > 1) {
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	dd0f      	ble.n	8001620 <getNumber+0x30>
		value = ((p[0] - 48) * 10) + (p[1] - 48);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	3b30      	subs	r3, #48	@ 0x30
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e003      	b.n	8001628 <getNumber+0x38>
	} else
		value = p[0] - 48;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3b30      	subs	r3, #48	@ 0x30
 8001626:	60fb      	str	r3, [r7, #12]
	return value;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b2db      	uxtb	r3, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <rtc_task>:
void rtc_task(void *parameter) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b09b      	sub	sp, #108	@ 0x6c
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]

	const char *msg_rtc1 = "========================\n"
 8001640:	4bb2      	ldr	r3, [pc, #712]	@ (800190c <rtc_task+0x2d4>)
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
			"|         RTC          |\n"
			"========================\n";
	const char *msg_rtc2 = "Configure Time    ---> 0\n"
 8001644:	4bb2      	ldr	r3, [pc, #712]	@ (8001910 <rtc_task+0x2d8>)
 8001646:	64bb      	str	r3, [r7, #72]	@ 0x48
			"Configure Date    ---> 1\n"
			"Enable reporting  ---> 2\n"
			"Enter your choice here:";
	const char *msg_rtc_hh = "Enter hour (1-12)";
 8001648:	4bb2      	ldr	r3, [pc, #712]	@ (8001914 <rtc_task+0x2dc>)
 800164a:	647b      	str	r3, [r7, #68]	@ 0x44
	const char *msg_rtc_mm = "Enter minutes (0-59)";
 800164c:	4bb2      	ldr	r3, [pc, #712]	@ (8001918 <rtc_task+0x2e0>)
 800164e:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_ss = "Enter seconds (0-59)";
 8001650:	4bb2      	ldr	r3, [pc, #712]	@ (800191c <rtc_task+0x2e4>)
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const char *msg_rtc_dd = "Enter date(1-31):";
 8001654:	4bb2      	ldr	r3, [pc, #712]	@ (8001920 <rtc_task+0x2e8>)
 8001656:	63bb      	str	r3, [r7, #56]	@ 0x38
	const char *msg_rtc_mo = "Enter month(1-12):";
 8001658:	4bb2      	ldr	r3, [pc, #712]	@ (8001924 <rtc_task+0x2ec>)
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_dow = "Enter day(1-7 sun:1):";
 800165c:	4bb2      	ldr	r3, [pc, #712]	@ (8001928 <rtc_task+0x2f0>)
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_yr = "Enter year(0-99):";
 8001660:	4bb2      	ldr	r3, [pc, #712]	@ (800192c <rtc_task+0x2f4>)
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001664:	4bb2      	ldr	r3, [pc, #712]	@ (8001930 <rtc_task+0x2f8>)
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_report = "Enable time&date reporting (y/n):";
 8001668:	4bb2      	ldr	r3, [pc, #712]	@ (8001934 <rtc_task+0x2fc>)
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
#define MONTH_CONFIG 	1
#define YEAR_CONFIG 	2
#define DAY_CONFIG 		3
	while (1) {

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f004 ff1d 	bl	80064b4 <xTaskNotifyWait>

		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 800167a:	4baf      	ldr	r3, [pc, #700]	@ (8001938 <rtc_task+0x300>)
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001682:	2300      	movs	r3, #0
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	f003 fbd2 	bl	8004e30 <xQueueGenericSend>
		show_time_date();
 800168c:	f7ff fbf6 	bl	8000e7c <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 8001690:	4ba9      	ldr	r3, [pc, #676]	@ (8001938 <rtc_task+0x300>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001698:	2300      	movs	r3, #0
 800169a:	f04f 32ff 	mov.w	r2, #4294967295
 800169e:	f003 fbc7 	bl	8004e30 <xQueueGenericSend>
		while (curr_state != sMainMenu) {
 80016a2:	e1d0      	b.n	8001a46 <rtc_task+0x40e>

			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016a4:	f107 0220 	add.w	r2, r7, #32
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	2100      	movs	r1, #0
 80016ae:	2000      	movs	r0, #0
 80016b0:	f004 ff00 	bl	80064b4 <xTaskNotifyWait>
			cmd = (command_t*) cmd_addr;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			switch (curr_state) {
 80016b8:	4ba0      	ldr	r3, [pc, #640]	@ (800193c <rtc_task+0x304>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3b02      	subs	r3, #2
 80016be:	2b03      	cmp	r3, #3
 80016c0:	f200 81ba 	bhi.w	8001a38 <rtc_task+0x400>
 80016c4:	a201      	add	r2, pc, #4	@ (adr r2, 80016cc <rtc_task+0x94>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	08001761 	.word	0x08001761
 80016d4:	0800184f 	.word	0x0800184f
 80016d8:	080019b7 	.word	0x080019b7

			case sRtcMenu: {
				/*process RTC menu commands*/
				if (cmd->len == 1) {
 80016dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d130      	bne.n	8001746 <rtc_task+0x10e>
					menu_code = cmd->payload[0] - 48;
 80016e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3b30      	subs	r3, #48	@ 0x30
 80016ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80016ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <rtc_task+0xc2>
 80016f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00d      	beq.n	8001714 <rtc_task+0xdc>
 80016f8:	e019      	b.n	800172e <rtc_task+0xf6>
					switch (menu_code) {

					case 0:
						curr_state = sRtcTimeConfig;
 80016fa:	4b90      	ldr	r3, [pc, #576]	@ (800193c <rtc_task+0x304>)
 80016fc:	2203      	movs	r2, #3
 80016fe:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8001700:	4b8d      	ldr	r3, [pc, #564]	@ (8001938 <rtc_task+0x300>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001708:	2300      	movs	r3, #0
 800170a:	f04f 32ff 	mov.w	r2, #4294967295
 800170e:	f003 fb8f 	bl	8004e30 <xQueueGenericSend>
						break;
 8001712:	e024      	b.n	800175e <rtc_task+0x126>
					case 1:
						curr_state = sRtcDateConfig;
 8001714:	4b89      	ldr	r3, [pc, #548]	@ (800193c <rtc_task+0x304>)
 8001716:	2204      	movs	r2, #4
 8001718:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 800171a:	4b87      	ldr	r3, [pc, #540]	@ (8001938 <rtc_task+0x300>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001722:	2300      	movs	r3, #0
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	f003 fb82 	bl	8004e30 <xQueueGenericSend>
						break;
 800172c:	e017      	b.n	800175e <rtc_task+0x126>
					default:
						curr_state = sMainMenu;
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <rtc_task+0x304>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001734:	4b80      	ldr	r3, [pc, #512]	@ (8001938 <rtc_task+0x300>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	f04f 32ff 	mov.w	r2, #4294967295
 800173e:	4980      	ldr	r1, [pc, #512]	@ (8001940 <rtc_task+0x308>)
 8001740:	f003 fb76 	bl	8004e30 <xQueueGenericSend>
				} else {
					curr_state = sMainMenu;
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);

				}
				break;
 8001744:	e17f      	b.n	8001a46 <rtc_task+0x40e>
					curr_state = sMainMenu;
 8001746:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <rtc_task+0x304>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800174c:	4b7a      	ldr	r3, [pc, #488]	@ (8001938 <rtc_task+0x300>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	f04f 32ff 	mov.w	r2, #4294967295
 8001756:	497a      	ldr	r1, [pc, #488]	@ (8001940 <rtc_task+0x308>)
 8001758:	f003 fb6a 	bl	8004e30 <xQueueGenericSend>
				break;
 800175c:	e173      	b.n	8001a46 <rtc_task+0x40e>
 800175e:	e172      	b.n	8001a46 <rtc_task+0x40e>
			}
			case sRtcTimeConfig: {
				switch (rtc_state) {
 8001760:	4b78      	ldr	r3, [pc, #480]	@ (8001944 <rtc_task+0x30c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d03b      	beq.n	80017e0 <rtc_task+0x1a8>
 8001768:	2b02      	cmp	r3, #2
 800176a:	f300 8169 	bgt.w	8001a40 <rtc_task+0x408>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <rtc_task+0x140>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d01a      	beq.n	80017ac <rtc_task+0x174>
					curr_state = sMainMenu;
					rtc_state = 0;
					break;
				}
				}
				break;
 8001776:	e163      	b.n	8001a40 <rtc_task+0x408>
					uint8_t hour = getNumber(cmd->payload, cmd->len);
 8001778:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800177a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff ff35 	bl	80015f0 <getNumber>
 8001786:	4603      	mov	r3, r0
 8001788:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
					time.Hours = hour;
 800178c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001790:	733b      	strb	r3, [r7, #12]
					rtc_state = MM_CONFIG;
 8001792:	4b6c      	ldr	r3, [pc, #432]	@ (8001944 <rtc_task+0x30c>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001798:	4b67      	ldr	r3, [pc, #412]	@ (8001938 <rtc_task+0x300>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80017a0:	2300      	movs	r3, #0
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295
 80017a6:	f003 fb43 	bl	8004e30 <xQueueGenericSend>
					break;
 80017aa:	e04f      	b.n	800184c <rtc_task+0x214>
					uint8_t min = getNumber(cmd->payload, cmd->len);
 80017ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80017ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f7ff ff1b 	bl	80015f0 <getNumber>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
					time.Minutes = min;
 80017c0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80017c4:	737b      	strb	r3, [r7, #13]
					rtc_state = SS_CONFIG;
 80017c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001944 <rtc_task+0x30c>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80017cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001938 <rtc_task+0x300>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80017d4:	2300      	movs	r3, #0
 80017d6:	f04f 32ff 	mov.w	r2, #4294967295
 80017da:	f003 fb29 	bl	8004e30 <xQueueGenericSend>
					break;
 80017de:	e035      	b.n	800184c <rtc_task+0x214>
					uint8_t sec = getNumber(cmd->payload, cmd->len);
 80017e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80017e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7ff ff01 	bl	80015f0 <getNumber>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					time.Seconds = sec;
 80017f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80017f8:	73bb      	strb	r3, [r7, #14]
					if (!validate_rtc_information(&time, NULL)) {
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fbcb 	bl	8000f9c <validate_rtc_information>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d110      	bne.n	800182e <rtc_task+0x1f6>
						rtc_configure_time(&time);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fb9b 	bl	8000f4c <rtc_configure_time>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001816:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <rtc_task+0x300>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800181e:	2300      	movs	r3, #0
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	f003 fb04 	bl	8004e30 <xQueueGenericSend>
						show_time_date();
 8001828:	f7ff fb28 	bl	8000e7c <show_time_date>
 800182c:	e007      	b.n	800183e <rtc_task+0x206>
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800182e:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <rtc_task+0x300>)
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	4941      	ldr	r1, [pc, #260]	@ (8001940 <rtc_task+0x308>)
 800183a:	f003 faf9 	bl	8004e30 <xQueueGenericSend>
					curr_state = sMainMenu;
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <rtc_task+0x304>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 8001844:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <rtc_task+0x30c>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
					break;
 800184a:	bf00      	nop
				break;
 800184c:	e0f8      	b.n	8001a40 <rtc_task+0x408>
			}
			case sRtcDateConfig: {

				switch (rtc_state) {
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <rtc_task+0x30c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b03      	cmp	r3, #3
 8001854:	f200 80f6 	bhi.w	8001a44 <rtc_task+0x40c>
 8001858:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <rtc_task+0x228>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001871 	.word	0x08001871
 8001864:	080018a5 	.word	0x080018a5
 8001868:	08001949 	.word	0x08001949
 800186c:	080018d9 	.word	0x080018d9
				case DATE_CONFIG: {
					uint8_t d = getNumber(cmd->payload, cmd->len);
 8001870:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff feb9 	bl	80015f0 <getNumber>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
					date.Date = d;
 8001884:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001888:	72bb      	strb	r3, [r7, #10]
					rtc_state = MONTH_CONFIG;
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <rtc_task+0x30c>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <rtc_task+0x300>)
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001898:	2300      	movs	r3, #0
 800189a:	f04f 32ff 	mov.w	r2, #4294967295
 800189e:	f003 fac7 	bl	8004e30 <xQueueGenericSend>
					break;
 80018a2:	e087      	b.n	80019b4 <rtc_task+0x37c>
				}
				case MONTH_CONFIG: {
					uint8_t month = getNumber(cmd->payload, cmd->len);
 80018a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80018a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fe9f 	bl	80015f0 <getNumber>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
					date.Month = month;
 80018b8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80018bc:	727b      	strb	r3, [r7, #9]
					rtc_state = DAY_CONFIG;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <rtc_task+0x30c>)
 80018c0:	2203      	movs	r2, #3
 80018c2:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <rtc_task+0x300>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80018cc:	2300      	movs	r3, #0
 80018ce:	f04f 32ff 	mov.w	r2, #4294967295
 80018d2:	f003 faad 	bl	8004e30 <xQueueGenericSend>
					break;
 80018d6:	e06d      	b.n	80019b4 <rtc_task+0x37c>
				}
				case DAY_CONFIG: {
					uint8_t day = getNumber(cmd->payload, cmd->len);
 80018d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80018da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f7ff fe85 	bl	80015f0 <getNumber>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					date.WeekDay = day;
 80018ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80018f0:	723b      	strb	r3, [r7, #8]
					rtc_state = YEAR_CONFIG;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <rtc_task+0x30c>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <rtc_task+0x300>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001900:	2300      	movs	r3, #0
 8001902:	f04f 32ff 	mov.w	r2, #4294967295
 8001906:	f003 fa93 	bl	8004e30 <xQueueGenericSend>
					break;
 800190a:	e053      	b.n	80019b4 <rtc_task+0x37c>
 800190c:	08008a20 	.word	0x08008a20
 8001910:	08008a6c 	.word	0x08008a6c
 8001914:	08008ad0 	.word	0x08008ad0
 8001918:	08008ae4 	.word	0x08008ae4
 800191c:	08008afc 	.word	0x08008afc
 8001920:	08008b14 	.word	0x08008b14
 8001924:	08008b28 	.word	0x08008b28
 8001928:	08008b3c 	.word	0x08008b3c
 800192c:	08008b54 	.word	0x08008b54
 8001930:	08008b68 	.word	0x08008b68
 8001934:	08008b84 	.word	0x08008b84
 8001938:	20000878 	.word	0x20000878
 800193c:	200008d4 	.word	0x200008d4
 8001940:	2000000c 	.word	0x2000000c
 8001944:	200008d8 	.word	0x200008d8
				}
				case YEAR_CONFIG: {
					uint8_t year = getNumber(cmd->payload, cmd->len);
 8001948:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800194a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff fe4d 	bl	80015f0 <getNumber>
 8001956:	4603      	mov	r3, r0
 8001958:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
					date.Year = year;
 800195c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001960:	72fb      	strb	r3, [r7, #11]

					if (!validate_rtc_information(NULL, &date)) {
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4619      	mov	r1, r3
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fb17 	bl	8000f9c <validate_rtc_information>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d110      	bne.n	8001996 <rtc_task+0x35e>
						rtc_configure_date(&date);
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff faff 	bl	8000f7c <rtc_configure_date>
						xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 800197e:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <rtc_task+0x428>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001986:	2300      	movs	r3, #0
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	f003 fa50 	bl	8004e30 <xQueueGenericSend>
						show_time_date();
 8001990:	f7ff fa74 	bl	8000e7c <show_time_date>
 8001994:	e007      	b.n	80019a6 <rtc_task+0x36e>
					} else
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <rtc_task+0x428>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	4930      	ldr	r1, [pc, #192]	@ (8001a64 <rtc_task+0x42c>)
 80019a2:	f003 fa45 	bl	8004e30 <xQueueGenericSend>

					curr_state = sMainMenu;
 80019a6:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <rtc_task+0x430>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 80019ac:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <rtc_task+0x434>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
					break;
 80019b2:	bf00      	nop
				}
				}

				break;
 80019b4:	e046      	b.n	8001a44 <rtc_task+0x40c>
			}
			case sRtcReport: {
				if (cmd->len == 1) {
 80019b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d130      	bne.n	8001a20 <rtc_task+0x3e8>
					if (cmd->payload[0] == 'y') {
 80019be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b79      	cmp	r3, #121	@ 0x79
 80019c4:	d134      	bne.n	8001a30 <rtc_task+0x3f8>
						if (xTimerIsTimerActive(rtc_timer) == pdFALSE)
 80019c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <rtc_task+0x438>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 fb64 	bl	8007098 <xTimerIsTimerActive>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <rtc_task+0x3ba>
							xTimerStart(rtc_timer, portMAX_DELAY);
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <rtc_task+0x438>)
 80019d8:	681c      	ldr	r4, [r3, #0]
 80019da:	f004 f98d 	bl	8005cf8 <xTaskGetTickCount>
 80019de:	4602      	mov	r2, r0
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2300      	movs	r3, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	4620      	mov	r0, r4
 80019ec:	f005 f860 	bl	8006ab0 <xTimerGenericCommand>
 80019f0:	e01e      	b.n	8001a30 <rtc_task+0x3f8>
						else if (cmd->payload[0] == 'n')
 80019f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b6e      	cmp	r3, #110	@ 0x6e
 80019f8:	d108      	bne.n	8001a0c <rtc_task+0x3d4>
							xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <rtc_task+0x428>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	4917      	ldr	r1, [pc, #92]	@ (8001a64 <rtc_task+0x42c>)
 8001a06:	f003 fa13 	bl	8004e30 <xQueueGenericSend>
 8001a0a:	e011      	b.n	8001a30 <rtc_task+0x3f8>
						else
							xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <rtc_task+0x428>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a14:	2300      	movs	r3, #0
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	f003 fa09 	bl	8004e30 <xQueueGenericSend>
 8001a1e:	e007      	b.n	8001a30 <rtc_task+0x3f8>
					}
				}
				else
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <rtc_task+0x428>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2a:	490e      	ldr	r1, [pc, #56]	@ (8001a64 <rtc_task+0x42c>)
 8001a2c:	f003 fa00 	bl	8004e30 <xQueueGenericSend>
				curr_state = sMainMenu;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <rtc_task+0x430>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]

			break;}
 8001a36:	e006      	b.n	8001a46 <rtc_task+0x40e>
			default :
				curr_state = sMainMenu;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <rtc_task+0x430>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <rtc_task+0x40e>
				break;
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <rtc_task+0x40e>
				break;
 8001a44:	bf00      	nop
		while (curr_state != sMainMenu) {
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <rtc_task+0x430>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f ae2a 	bne.w	80016a4 <rtc_task+0x6c>
			}//switch end
		}//while end
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <rtc_task+0x43c>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	2300      	movs	r3, #0
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f004 fd85 	bl	8006568 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a5e:	e605      	b.n	800166c <rtc_task+0x34>
 8001a60:	20000878 	.word	0x20000878
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	200008d4 	.word	0x200008d4
 8001a6c:	200008d8 	.word	0x200008d8
 8001a70:	20000870 	.word	0x20000870
 8001a74:	20000850 	.word	0x20000850

08001a78 <print_task>:
	}
}

void print_task(void *paramter) {
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <print_task+0x38>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f107 010c 	add.w	r1, r7, #12
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fb6f 	bl	8005170 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001a92:	68fc      	ldr	r4, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fba4 	bl	80001e4 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <print_task+0x3c>)
 8001aa8:	f001 ffc6 	bl	8003a38 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001aac:	bf00      	nop
 8001aae:	e7e7      	b.n	8001a80 <print_task+0x8>
 8001ab0:	20000878 	.word	0x20000878
 8001ab4:	20000804 	.word	0x20000804

08001ab8 <extract_command>:
	}
}

int extract_command(command_t *cmd){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <extract_command+0x70>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fcb7 	bl	8005438 <uxQueueMessagesWaiting>
 8001aca:	4603      	mov	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <extract_command+0x22>
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	e022      	b.n	8001b20 <extract_command+0x68>
	uint8_t i = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(q_data, &item, 0);
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <extract_command+0x70>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f107 010f 	add.w	r1, r7, #15
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fb41 	bl	8005170 <xQueueReceive>
 8001aee:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d106      	bne.n	8001b04 <extract_command+0x4c>
			cmd -> payload[i++] = item;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	75fa      	strb	r2, [r7, #23]
 8001afc:	461a      	mov	r2, r3
 8001afe:	7bf9      	ldrb	r1, [r7, #15]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d1e9      	bne.n	8001ade <extract_command+0x26>

	cmd -> payload[i -1] = '\0';
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	2100      	movs	r1, #0
 8001b12:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i -1;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60da      	str	r2, [r3, #12]
	return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000874 	.word	0x20000874

08001b2c <process_command>:
void process_command(command_t *cmd){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffbf 	bl	8001ab8 <extract_command>

	switch (curr_state) {
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <process_command+0x60>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	dc1e      	bgt.n	8001b80 <process_command+0x54>
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	da14      	bge.n	8001b70 <process_command+0x44>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <process_command+0x24>
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d008      	beq.n	8001b60 <process_command+0x34>
		case sRtcDateConfig:
		case sRtcReport:
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
		break;
		default:
			break;
 8001b4e:	e017      	b.n	8001b80 <process_command+0x54>
			xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <process_command+0x64>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	2300      	movs	r3, #0
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f004 fd05 	bl	8006568 <xTaskGenericNotify>
			break;
 8001b5e:	e010      	b.n	8001b82 <process_command+0x56>
			xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <process_command+0x68>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f004 fcfd 	bl	8006568 <xTaskGenericNotify>
			break;
 8001b6e:	e008      	b.n	8001b82 <process_command+0x56>
			xTaskNotify(handle_rtc_task,(uint32_t)cmd , eSetValueWithOverwrite);
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <process_command+0x6c>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f004 fcf5 	bl	8006568 <xTaskGenericNotify>
		break;
 8001b7e:	e000      	b.n	8001b82 <process_command+0x56>
			break;
 8001b80:	bf00      	nop
	}
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200008d4 	.word	0x200008d4
 8001b90:	20000850 	.word	0x20000850
 8001b94:	20000854 	.word	0x20000854
 8001b98:	2000085c 	.word	0x2000085c

08001b9c <cmd_handler_task>:
void cmd_handler_task(void *parameter) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1){
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2000      	movs	r0, #0
 8001bae:	f004 fc81 	bl	80064b4 <xTaskNotifyWait>
 8001bb2:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE){
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d1f4      	bne.n	8001ba4 <cmd_handler_task+0x8>
			process_command(&cmd);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ffb4 	bl	8001b2c <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001bc4:	e7ee      	b.n	8001ba4 <cmd_handler_task+0x8>
	...

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bcc:	f7ff fc10 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f006 f84b 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7fe fdc9 	bl	8000790 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001c0c:	08008c1c 	.word	0x08008c1c
  ldr r2, =_sbss
 8001c10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c14:	20005adc 	.word	0x20005adc

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f94f 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff f9d6 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f967 	bl	8001f52 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f92f 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	20000010 	.word	0x20000010

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000014 	.word	0x20000014
 8001ce4:	200008dc 	.word	0x200008dc

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200008dc 	.word	0x200008dc

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000014 	.word	0x20000014

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	@ (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	@ (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	@ (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	@ 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff feb6 	bl	8001ce8 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d008      	beq.n	8001f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e052      	b.n	8002042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0216 	bic.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_DMA_Abort+0x62>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0208 	bic.w	r2, r2, #8
 8001fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	e013      	b.n	8002016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fee:	f7ff fe7b 	bl	8001ce8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d90c      	bls.n	8002016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e015      	b.n	8002042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e4      	bne.n	8001fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	223f      	movs	r2, #63	@ 0x3f
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d004      	beq.n	8002068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2280      	movs	r2, #128	@ 0x80
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e00c      	b.n	8002082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2205      	movs	r2, #5
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e16b      	b.n	8002384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 815a 	bne.w	800237e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80b4 	beq.w	800237e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b60      	ldr	r3, [pc, #384]	@ (800239c <HAL_GPIO_Init+0x30c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a5f      	ldr	r2, [pc, #380]	@ (800239c <HAL_GPIO_Init+0x30c>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_GPIO_Init+0x30c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a5b      	ldr	r2, [pc, #364]	@ (80023a0 <HAL_GPIO_Init+0x310>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_GPIO_Init+0x314>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a51      	ldr	r2, [pc, #324]	@ (80023a8 <HAL_GPIO_Init+0x318>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a50      	ldr	r2, [pc, #320]	@ (80023ac <HAL_GPIO_Init+0x31c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4f      	ldr	r2, [pc, #316]	@ (80023b0 <HAL_GPIO_Init+0x320>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4e      	ldr	r2, [pc, #312]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4d      	ldr	r2, [pc, #308]	@ (80023b8 <HAL_GPIO_Init+0x328>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4c      	ldr	r2, [pc, #304]	@ (80023bc <HAL_GPIO_Init+0x32c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x20e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4b      	ldr	r2, [pc, #300]	@ (80023c0 <HAL_GPIO_Init+0x330>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x20a>
 8002296:	2307      	movs	r3, #7
 8002298:	e00e      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229a:	2308      	movs	r3, #8
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	@ (80023a0 <HAL_GPIO_Init+0x310>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b30      	ldr	r3, [pc, #192]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_GPIO_Init+0x334>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae90 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40021400 	.word	0x40021400
 80023bc:	40021800 	.word	0x40021800
 80023c0:	40021c00 	.word	0x40021c00
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	041a      	lsls	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43d9      	mvns	r1, r3
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	400b      	ands	r3, r1
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e12b      	b.n	800269a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fdfe 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	@ 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002494:	f000 fd40 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8002498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a81      	ldr	r2, [pc, #516]	@ (80026a4 <HAL_I2C_Init+0x274>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d807      	bhi.n	80024b4 <HAL_I2C_Init+0x84>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a80      	ldr	r2, [pc, #512]	@ (80026a8 <HAL_I2C_Init+0x278>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e006      	b.n	80024c2 <HAL_I2C_Init+0x92>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a7d      	ldr	r2, [pc, #500]	@ (80026ac <HAL_I2C_Init+0x27c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0e7      	b.n	800269a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a78      	ldr	r2, [pc, #480]	@ (80026b0 <HAL_I2C_Init+0x280>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a6a      	ldr	r2, [pc, #424]	@ (80026a4 <HAL_I2C_Init+0x274>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <HAL_I2C_Init+0xd4>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	e009      	b.n	8002518 <HAL_I2C_Init+0xe8>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a69      	ldr	r2, [pc, #420]	@ (80026b4 <HAL_I2C_Init+0x284>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	3301      	adds	r3, #1
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	430b      	orrs	r3, r1
 800251e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800252a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	495c      	ldr	r1, [pc, #368]	@ (80026a4 <HAL_I2C_Init+0x274>)
 8002534:	428b      	cmp	r3, r1
 8002536:	d819      	bhi.n	800256c <HAL_I2C_Init+0x13c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e59      	subs	r1, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fbb1 f3f3 	udiv	r3, r1, r3
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800254c:	400b      	ands	r3, r1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_I2C_Init+0x138>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e59      	subs	r1, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	e051      	b.n	800260c <HAL_I2C_Init+0x1dc>
 8002568:	2304      	movs	r3, #4
 800256a:	e04f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_I2C_Init+0x168>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e012      	b.n	80025be <HAL_I2C_Init+0x18e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x196>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <HAL_I2C_Init+0x1bc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800263a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6911      	ldr	r1, [r2, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	000186a0 	.word	0x000186a0
 80026a8:	001e847f 	.word	0x001e847f
 80026ac:	003d08ff 	.word	0x003d08ff
 80026b0:	431bde83 	.word	0x431bde83
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e267      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026d6:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b7e      	ldr	r3, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e242      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b70      	ldr	r3, [pc, #448]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6c      	ldr	r2, [pc, #432]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a68      	ldr	r2, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff faba 	bl	8001ce8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fab6 	bl	8001ce8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e207      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff faa6 	bl	8001ce8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff faa2 	bl	8001ce8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f3      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4937      	ldr	r1, [pc, #220]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff fa5b 	bl	8001ce8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff fa57 	bl	8001ce8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a8      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4925      	ldr	r1, [pc, #148]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff fa3a 	bl	8001ce8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff fa36 	bl	8001ce8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e187      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d036      	beq.n	8002910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff fa1a 	bl	8001ce8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff fa16 	bl	8001ce8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e167      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff fa03 	bl	8001ce8 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00e      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff f9ff 	bl	8001ce8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d907      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e150      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ea      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b77      	ldr	r3, [pc, #476]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b74      	ldr	r3, [pc, #464]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a73      	ldr	r2, [pc, #460]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7ff f9bf 	bl	8001ce8 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7ff f9bb 	bl	8001ce8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ea>
 8002994:	4b64      	ldr	r3, [pc, #400]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a63      	ldr	r2, [pc, #396]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x30c>
 80029aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029c4:	4b58      	ldr	r3, [pc, #352]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d0:	4b55      	ldr	r3, [pc, #340]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a54      	ldr	r2, [pc, #336]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff f980 	bl	8001ce8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7ff f97c 	bl	8001ce8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0cb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCC_OscConfig+0x334>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7ff f96a 	bl	8001ce8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7ff f966 	bl	8001ce8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0b5      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	4a38      	ldr	r2, [pc, #224]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a1 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d05c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d141      	bne.n	8002aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f93a 	bl	8001ce8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f936 	bl	8001ce8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e087      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	491b      	ldr	r1, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f90f 	bl	8001ce8 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7ff f90b 	bl	8001ce8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x416>
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff f8f8 	bl	8001ce8 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff f8f4 	bl	8001ce8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e038      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d028      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d121      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7ff f826 	bl	8001ce8 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7ff f822 	bl	8001ce8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff86 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08008bc0 	.word	0x08008bc0
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	20000010 	.word	0x20000010

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b090      	sub	sp, #64	@ 0x40
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80a1 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dac:	e09b      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db2:	e098      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df4:	460a      	mov	r2, r1
 8002df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e0e:	f7fd fa47 	bl	80002a0 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e1a:	e053      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e66:	ebb2 0408 	subs.w	r4, r2, r8
 8002e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	00eb      	lsls	r3, r5, #3
 8002e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	eb14 030a 	adds.w	r3, r4, sl
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	eb45 030b 	adc.w	r3, r5, fp
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb8:	f7fd f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	@ 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08008bd0 	.word	0x08008bd0

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffdc 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08008bd0 	.word	0x08008bd0

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d035      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f90:	4b62      	ldr	r3, [pc, #392]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f96:	f7fe fea7 	bl	8001ce8 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9e:	f7fe fea3 	bl	8001ce8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0b0      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	019a      	lsls	r2, r3, #6
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	4955      	ldr	r1, [pc, #340]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fd0:	4b52      	ldr	r3, [pc, #328]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe fe87 	bl	8001ce8 <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fde:	f7fe fe83 	bl	8001ce8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e090      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8083 	beq.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	4b44      	ldr	r3, [pc, #272]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4a43      	ldr	r2, [pc, #268]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	@ 0x40
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003026:	4b3f      	ldr	r3, [pc, #252]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3e      	ldr	r2, [pc, #248]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003032:	f7fe fe59 	bl	8001ce8 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fe55 	bl	8001ce8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e062      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800304c:	4b35      	ldr	r3, [pc, #212]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003060:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d028      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003076:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800307e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003080:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800308c:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003092:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d114      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe fe23 	bl	8001ce8 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fe1f 	bl	8001ce8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e02a      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ee      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d4:	d10d      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80030d6:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ea:	490d      	ldr	r1, [pc, #52]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
 80030f0:	e005      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030fc:	6093      	str	r3, [r2, #8]
 80030fe:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003100:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310a:	4905      	ldr	r1, [pc, #20]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	42470068 	.word	0x42470068
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000
 8003128:	42470e40 	.word	0x42470e40

0800312c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7f5b      	ldrb	r3, [r3, #29]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fffc 	bl	8001150 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d055      	beq.n	8003218 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	22ca      	movs	r2, #202	@ 0xca
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2253      	movs	r2, #83	@ 0x53
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb73 	bl	8003868 <RTC_EnterInitMode>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d12c      	bne.n	80031e6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800319a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800319e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6919      	ldr	r1, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	041a      	lsls	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fb7a 	bl	80038d6 <RTC_ExitInitMode>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d110      	bne.n	800320e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	22ff      	movs	r2, #255	@ 0xff
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
 8003216:	e001      	b.n	800321c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	7f1b      	ldrb	r3, [r3, #28]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_RTC_SetTime+0x1c>
 800324a:	2302      	movs	r3, #2
 800324c:	e087      	b.n	800335e <HAL_RTC_SetTime+0x12c>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2202      	movs	r2, #2
 8003258:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d126      	bne.n	80032ae <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fb51 	bl	8003920 <RTC_ByteToBcd2>
 800327e:	4603      	mov	r3, r0
 8003280:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fb4a 	bl	8003920 <RTC_ByteToBcd2>
 800328c:	4603      	mov	r3, r0
 800328e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003290:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	789b      	ldrb	r3, [r3, #2]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fb42 	bl	8003920 <RTC_ByteToBcd2>
 800329c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800329e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	78db      	ldrb	r3, [r3, #3]
 80032a6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e018      	b.n	80032e0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	785b      	ldrb	r3, [r3, #1]
 80032cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	78db      	ldrb	r3, [r3, #3]
 80032da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	22ca      	movs	r2, #202	@ 0xca
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2253      	movs	r2, #83	@ 0x53
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fab9 	bl	8003868 <RTC_EnterInitMode>
 80032f6:	4603      	mov	r3, r0
 80032f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d120      	bne.n	8003342 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800330a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800330e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800331e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 facc 	bl	80038d6 <RTC_ExitInitMode>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	22ff      	movs	r2, #255	@ 0xff
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]

  return status;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
}
 800335e:	4618      	mov	r0, r3
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}

08003366 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003398:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800339c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	0d9b      	lsrs	r3, r3, #22
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11a      	bne.n	8003418 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fab8 	bl	800395c <RTC_Bcd2ToByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 faaf 	bl	800395c <RTC_Bcd2ToByte>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 faa6 	bl	800395c <RTC_Bcd2ToByte>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003422:	b590      	push	{r4, r7, lr}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	7f1b      	ldrb	r3, [r3, #28]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_RTC_SetDate+0x1c>
 800343a:	2302      	movs	r3, #2
 800343c:	e071      	b.n	8003522 <HAL_RTC_SetDate+0x100>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2202      	movs	r2, #2
 8003448:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10e      	bne.n	800346e <HAL_RTC_SetDate+0x4c>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	f023 0310 	bic.w	r3, r3, #16
 8003464:	b2db      	uxtb	r3, r3
 8003466:	330a      	adds	r3, #10
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11c      	bne.n	80034ae <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	78db      	ldrb	r3, [r3, #3]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa51 	bl	8003920 <RTC_ByteToBcd2>
 800347e:	4603      	mov	r3, r0
 8003480:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fa4a 	bl	8003920 <RTC_ByteToBcd2>
 800348c:	4603      	mov	r3, r0
 800348e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003490:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa42 	bl	8003920 <RTC_ByteToBcd2>
 800349c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800349e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e00e      	b.n	80034cc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	78db      	ldrb	r3, [r3, #3]
 80034b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034ba:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	22ca      	movs	r2, #202	@ 0xca
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2253      	movs	r2, #83	@ 0x53
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f9c3 	bl	8003868 <RTC_EnterInitMode>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10c      	bne.n	8003506 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034fa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f9ea 	bl	80038d6 <RTC_ExitInitMode>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	22ff      	movs	r2, #255	@ 0xff
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]

  return status;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
}
 8003522:	4618      	mov	r0, r3
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}

0800352a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003544:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003548:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	0b5b      	lsrs	r3, r3, #13
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11a      	bne.n	80035be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	78db      	ldrb	r3, [r3, #3]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f9e5 	bl	800395c <RTC_Bcd2ToByte>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f9dc 	bl	800395c <RTC_Bcd2ToByte>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f9d3 	bl	800395c <RTC_Bcd2ToByte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b089      	sub	sp, #36	@ 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	7f1b      	ldrb	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_RTC_SetAlarm+0x24>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e113      	b.n	8003814 <HAL_RTC_SetAlarm+0x24c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2202      	movs	r2, #2
 80035f6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d137      	bne.n	800366e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f982 	bl	8003920 <RTC_ByteToBcd2>
 800361c:	4603      	mov	r3, r0
 800361e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f97b 	bl	8003920 <RTC_ByteToBcd2>
 800362a:	4603      	mov	r3, r0
 800362c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800362e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f973 	bl	8003920 <RTC_ByteToBcd2>
 800363a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800363c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003646:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f965 	bl	8003920 <RTC_ByteToBcd2>
 8003656:	4603      	mov	r3, r0
 8003658:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800365a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003662:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003668:	4313      	orrs	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e023      	b.n	80036b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800368e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003694:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800369c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80036a6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80036ac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	22ca      	movs	r2, #202	@ 0xca
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2253      	movs	r2, #83	@ 0x53
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036da:	d148      	bne.n	800376e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ea:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036fa:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800370c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800370e:	f7fe faeb 	bl	8001ce8 <HAL_GetTick>
 8003712:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003714:	e013      	b.n	800373e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003716:	f7fe fae7 	bl	8001ce8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003724:	d90b      	bls.n	800373e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	22ff      	movs	r2, #255	@ 0xff
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2203      	movs	r2, #3
 8003732:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e06a      	b.n	8003814 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0e4      	beq.n	8003716 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e047      	b.n	80037fe <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800377c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800378c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800379e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fe faa2 	bl	8001ce8 <HAL_GetTick>
 80037a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037a6:	e013      	b.n	80037d0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037a8:	f7fe fa9e 	bl	8001ce8 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037b6:	d90b      	bls.n	80037d0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	22ff      	movs	r2, #255	@ 0xff
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2203      	movs	r2, #3
 80037c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e021      	b.n	8003814 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0e4      	beq.n	80037a8 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3724      	adds	r7, #36	@ 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0d      	ldr	r2, [pc, #52]	@ (8003864 <HAL_RTC_WaitForSynchro+0x48>)
 800382e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003830:	f7fe fa5a 	bl	8001ce8 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003836:	e009      	b.n	800384c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003838:	f7fe fa56 	bl	8001ce8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003846:	d901      	bls.n	800384c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e007      	b.n	800385c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ee      	beq.n	8003838 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	00017f5f 	.word	0x00017f5f

08003868 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d122      	bne.n	80038cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003894:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003896:	f7fe fa27 	bl	8001ce8 <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800389c:	e00c      	b.n	80038b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800389e:	f7fe fa23 	bl	8001ce8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ac:	d904      	bls.n	80038b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <RTC_EnterInitMode+0x64>
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d1e8      	bne.n	800389e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff8b 	bl	800381c <HAL_RTC_WaitForSynchro>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2204      	movs	r2, #4
 8003910:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800392e:	e005      	b.n	800393c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	3b0a      	subs	r3, #10
 800393a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b09      	cmp	r3, #9
 8003940:	d8f6      	bhi.n	8003930 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	b2da      	uxtb	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	4313      	orrs	r3, r2
 800394e:	b2db      	uxtb	r3, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4413      	add	r3, r2
 800398a:	b2db      	uxtb	r3, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e042      	b.n	8003a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fbf0 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fdbd 	bl	800455c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d175      	bne.n	8003b44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_UART_Transmit+0x2c>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e06e      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2221      	movs	r2, #33	@ 0x21
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a76:	f7fe f937 	bl	8001ce8 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d108      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aac:	e02e      	b.n	8003b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fb1f 	bl	80040fc <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e03a      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3302      	adds	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e007      	b.n	8003afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1cb      	bne.n	8003aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 faeb 	bl	80040fc <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d112      	bne.n	8003b8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Receive_IT+0x26>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00b      	b.n	8003b90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fb12 	bl	80041ae <UART_Start_Receive_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	e000      	b.n	8003b90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fbf2 	bl	80043e0 <UART_Receive_IT>
      return;
 8003bfc:	e25b      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80de 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
 8003c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80d1 	beq.w	8003dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f043 0208 	orr.w	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 81f2 	beq.w	80040ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb7d 	bl	80043e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_UART_IRQHandler+0x17a>
 8003d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d04f      	beq.n	8003db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa85 	bl	8004222 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d141      	bne.n	8003daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d9      	bne.n	8003d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d013      	beq.n	8003da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f78 <HAL_UART_IRQHandler+0x3e0>)
 8003d80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe f95f 	bl	800204a <HAL_DMA_Abort_IT>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	e00e      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f994 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e00a      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f990 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e006      	b.n	8003dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f98c 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dbe:	e175      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	bf00      	nop
    return;
 8003dc2:	e173      	b.n	80040ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	f040 814f 	bne.w	800406c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8148 	beq.w	800406c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8141 	beq.w	800406c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	f040 80b6 	bne.w	8003f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8145 	beq.w	80040b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f080 813e 	bcs.w	80040b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e46:	f000 8088 	beq.w	8003f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d9      	bne.n	8003e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e1      	bne.n	8003e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ef6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003efc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e3      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f2a:	f023 0310 	bic.w	r3, r3, #16
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e3      	bne.n	8003f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f808 	bl	8001f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8b7 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f76:	e09b      	b.n	80040b0 <HAL_UART_IRQHandler+0x518>
 8003f78:	080042e9 	.word	0x080042e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 808e 	beq.w	80040b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8089 	beq.w	80040b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ffe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e3      	bne.n	8003fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0310 	bic.w	r3, r3, #16
 8004036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004044:	61fa      	str	r2, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	617b      	str	r3, [r7, #20]
   return(result);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e3      	bne.n	8004020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800405e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f83d 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800406a:	e023      	b.n	80040b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_UART_IRQHandler+0x4f4>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f943 	bl	8004310 <UART_Transmit_IT>
    return;
 800408a:	e014      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <HAL_UART_IRQHandler+0x51e>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f983 	bl	80043b0 <UART_EndTransmit_IT>
    return;
 80040aa:	e004      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040b4:	bf00      	nop
  }
}
 80040b6:	37e8      	adds	r7, #232	@ 0xe8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410c:	e03b      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d037      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd fde7 	bl	8001ce8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <UART_WaitOnFlagUntilTimeout+0x30>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e03a      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d023      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b80      	cmp	r3, #128	@ 0x80
 8004142:	d020      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d01d      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d116      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f857 	bl	8004222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2208      	movs	r2, #8
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e00f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0b4      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2222      	movs	r2, #34	@ 0x22
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b095      	sub	sp, #84	@ 0x54
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800424a:	643a      	str	r2, [r7, #64]	@ 0x40
 800424c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	61fb      	str	r3, [r7, #28]
   return(result);
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	2b01      	cmp	r3, #1
 8004298:	d119      	bne.n	80042ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f023 0310 	bic.w	r3, r3, #16
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ba:	61ba      	str	r2, [r7, #24]
 80042bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	613b      	str	r3, [r7, #16]
   return(result);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042dc:	bf00      	nop
 80042de:	3754      	adds	r7, #84	@ 0x54
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fee4 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b21      	cmp	r3, #33	@ 0x21
 8004322:	d13e      	bne.n	80043a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432c:	d114      	bne.n	8004358 <UART_Transmit_IT+0x48>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d110      	bne.n	8004358 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]
 8004356:	e008      	b.n	800436a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6211      	str	r1, [r2, #32]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4619      	mov	r1, r3
 8004378:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800438c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800439c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fe73 	bl	80040bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08c      	sub	sp, #48	@ 0x30
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b22      	cmp	r3, #34	@ 0x22
 80043f2:	f040 80ae 	bne.w	8004552 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fe:	d117      	bne.n	8004430 <UART_Receive_IT+0x50>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d113      	bne.n	8004430 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	b29a      	uxth	r2, r3
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	1c9a      	adds	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28
 800442e:	e026      	b.n	800447e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004442:	d007      	beq.n	8004454 <UART_Receive_IT+0x74>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <UART_Receive_IT+0x82>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e008      	b.n	8004474 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800446e:	b2da      	uxtb	r2, r3
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4619      	mov	r1, r3
 800448c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800448e:	2b00      	cmp	r3, #0
 8004490:	d15d      	bne.n	800454e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0220 	bic.w	r2, r2, #32
 80044a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d135      	bne.n	8004544 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	613b      	str	r3, [r7, #16]
   return(result);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f023 0310 	bic.w	r3, r3, #16
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fe:	623a      	str	r2, [r7, #32]
 8004500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	61bb      	str	r3, [r7, #24]
   return(result);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d10a      	bne.n	8004536 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fdd1 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
 8004542:	e002      	b.n	800454a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc fbf9 	bl	8000d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e002      	b.n	8004554 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3730      	adds	r7, #48	@ 0x30
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004560:	b0c0      	sub	sp, #256	@ 0x100
 8004562:	af00      	add	r7, sp, #0
 8004564:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	68d9      	ldr	r1, [r3, #12]
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	ea40 0301 	orr.w	r3, r0, r1
 8004584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	431a      	orrs	r2, r3
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045b4:	f021 010c 	bic.w	r1, r1, #12
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045c2:	430b      	orrs	r3, r1
 80045c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d6:	6999      	ldr	r1, [r3, #24]
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	ea40 0301 	orr.w	r3, r0, r1
 80045e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004828 <UART_SetConfig+0x2cc>)
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d005      	beq.n	80045fc <UART_SetConfig+0xa0>
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b8d      	ldr	r3, [pc, #564]	@ (800482c <UART_SetConfig+0x2d0>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d104      	bne.n	8004606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fca0 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8004600:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004604:	e003      	b.n	800460e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004606:	f7fe fc87 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 800460a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004618:	f040 810c 	bne.w	8004834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800461c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004626:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800462a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	1891      	adds	r1, r2, r2
 8004634:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004636:	415b      	adcs	r3, r3
 8004638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800463e:	4621      	mov	r1, r4
 8004640:	eb12 0801 	adds.w	r8, r2, r1
 8004644:	4629      	mov	r1, r5
 8004646:	eb43 0901 	adc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800466c:	462b      	mov	r3, r5
 800466e:	eb49 0303 	adc.w	r3, r9, r3
 8004672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004682:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800468a:	460b      	mov	r3, r1
 800468c:	18db      	adds	r3, r3, r3
 800468e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004690:	4613      	mov	r3, r2
 8004692:	eb42 0303 	adc.w	r3, r2, r3
 8004696:	657b      	str	r3, [r7, #84]	@ 0x54
 8004698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800469c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a0:	f7fb fdfe 	bl	80002a0 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4b61      	ldr	r3, [pc, #388]	@ (8004830 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2302 	umull	r2, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	011c      	lsls	r4, r3, #4
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	1891      	adds	r1, r2, r2
 80046ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046cc:	415b      	adcs	r3, r3
 80046ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046d4:	4641      	mov	r1, r8
 80046d6:	eb12 0a01 	adds.w	sl, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb43 0b01 	adc.w	fp, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f4:	4692      	mov	sl, r2
 80046f6:	469b      	mov	fp, r3
 80046f8:	4643      	mov	r3, r8
 80046fa:	eb1a 0303 	adds.w	r3, sl, r3
 80046fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004702:	464b      	mov	r3, r9
 8004704:	eb4b 0303 	adc.w	r3, fp, r3
 8004708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004718:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800471c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	643b      	str	r3, [r7, #64]	@ 0x40
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	647b      	str	r3, [r7, #68]	@ 0x44
 800472e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004736:	f7fb fdb3 	bl	80002a0 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4611      	mov	r1, r2
 8004740:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <UART_SetConfig+0x2d4>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2264      	movs	r2, #100	@ 0x64
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	1acb      	subs	r3, r1, r3
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004756:	4b36      	ldr	r3, [pc, #216]	@ (8004830 <UART_SetConfig+0x2d4>)
 8004758:	fba3 2302 	umull	r2, r3, r3, r2
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004764:	441c      	add	r4, r3
 8004766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476a:	2200      	movs	r2, #0
 800476c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004770:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	1891      	adds	r1, r2, r2
 800477e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004780:	415b      	adcs	r3, r3
 8004782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004788:	4641      	mov	r1, r8
 800478a:	1851      	adds	r1, r2, r1
 800478c:	6339      	str	r1, [r7, #48]	@ 0x30
 800478e:	4649      	mov	r1, r9
 8004790:	414b      	adcs	r3, r1
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047a0:	4659      	mov	r1, fp
 80047a2:	00cb      	lsls	r3, r1, #3
 80047a4:	4651      	mov	r1, sl
 80047a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047aa:	4651      	mov	r1, sl
 80047ac:	00ca      	lsls	r2, r1, #3
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	4642      	mov	r2, r8
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047bc:	464b      	mov	r3, r9
 80047be:	460a      	mov	r2, r1
 80047c0:	eb42 0303 	adc.w	r3, r2, r3
 80047c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047dc:	460b      	mov	r3, r1
 80047de:	18db      	adds	r3, r3, r3
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e2:	4613      	mov	r3, r2
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047f2:	f7fb fd55 	bl	80002a0 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <UART_SetConfig+0x2d4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	@ 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	3332      	adds	r3, #50	@ 0x32
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <UART_SetConfig+0x2d4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 0207 	and.w	r2, r3, #7
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004824:	e106      	b.n	8004a34 <UART_SetConfig+0x4d8>
 8004826:	bf00      	nop
 8004828:	40011000 	.word	0x40011000
 800482c:	40011400 	.word	0x40011400
 8004830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800483e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004846:	4642      	mov	r2, r8
 8004848:	464b      	mov	r3, r9
 800484a:	1891      	adds	r1, r2, r2
 800484c:	6239      	str	r1, [r7, #32]
 800484e:	415b      	adcs	r3, r3
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
 8004852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004856:	4641      	mov	r1, r8
 8004858:	1854      	adds	r4, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb43 0501 	adc.w	r5, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800487c:	464b      	mov	r3, r9
 800487e:	eb45 0303 	adc.w	r3, r5, r3
 8004882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004892:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048a2:	4629      	mov	r1, r5
 80048a4:	008b      	lsls	r3, r1, #2
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ac:	4621      	mov	r1, r4
 80048ae:	008a      	lsls	r2, r1, #2
 80048b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048b4:	f7fb fcf4 	bl	80002a0 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b60      	ldr	r3, [pc, #384]	@ (8004a40 <UART_SetConfig+0x4e4>)
 80048be:	fba3 2302 	umull	r2, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	011c      	lsls	r4, r3, #4
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	61b9      	str	r1, [r7, #24]
 80048e0:	415b      	adcs	r3, r3
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e8:	4641      	mov	r1, r8
 80048ea:	1851      	adds	r1, r2, r1
 80048ec:	6139      	str	r1, [r7, #16]
 80048ee:	4649      	mov	r1, r9
 80048f0:	414b      	adcs	r3, r1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004900:	4659      	mov	r1, fp
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4651      	mov	r1, sl
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4642      	mov	r2, r8
 8004916:	189b      	adds	r3, r3, r2
 8004918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800491c:	464b      	mov	r3, r9
 800491e:	460a      	mov	r2, r1
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004932:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004940:	4649      	mov	r1, r9
 8004942:	008b      	lsls	r3, r1, #2
 8004944:	4641      	mov	r1, r8
 8004946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494a:	4641      	mov	r1, r8
 800494c:	008a      	lsls	r2, r1, #2
 800494e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004952:	f7fb fca5 	bl	80002a0 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4611      	mov	r1, r2
 800495c:	4b38      	ldr	r3, [pc, #224]	@ (8004a40 <UART_SetConfig+0x4e4>)
 800495e:	fba3 2301 	umull	r2, r3, r3, r1
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2264      	movs	r2, #100	@ 0x64
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	1acb      	subs	r3, r1, r3
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	3332      	adds	r3, #50	@ 0x32
 8004970:	4a33      	ldr	r2, [pc, #204]	@ (8004a40 <UART_SetConfig+0x4e4>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800497c:	441c      	add	r4, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	673b      	str	r3, [r7, #112]	@ 0x70
 8004986:	677a      	str	r2, [r7, #116]	@ 0x74
 8004988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	1891      	adds	r1, r2, r2
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	415b      	adcs	r3, r3
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499c:	4641      	mov	r1, r8
 800499e:	1851      	adds	r1, r2, r1
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	4649      	mov	r1, r9
 80049a4:	414b      	adcs	r3, r1
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b4:	4659      	mov	r1, fp
 80049b6:	00cb      	lsls	r3, r1, #3
 80049b8:	4651      	mov	r1, sl
 80049ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049be:	4651      	mov	r1, sl
 80049c0:	00ca      	lsls	r2, r1, #3
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	4642      	mov	r2, r8
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ce:	464b      	mov	r3, r9
 80049d0:	460a      	mov	r2, r1
 80049d2:	eb42 0303 	adc.w	r3, r2, r3
 80049d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049f0:	4649      	mov	r1, r9
 80049f2:	008b      	lsls	r3, r1, #2
 80049f4:	4641      	mov	r1, r8
 80049f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fa:	4641      	mov	r1, r8
 80049fc:	008a      	lsls	r2, r1, #2
 80049fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a02:	f7fb fc4d 	bl	80002a0 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <UART_SetConfig+0x4e4>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	@ 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	3332      	adds	r3, #50	@ 0x32
 8004a1e:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <UART_SetConfig+0x4e4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4422      	add	r2, r4
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a40:	51eb851f 	.word	0x51eb851f

08004a44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f103 0208 	add.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f103 0208 	add.w	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f103 0208 	add.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d103      	bne.n	8004b06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e00c      	b.n	8004b20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e002      	b.n	8004b14 <vListInsert+0x2e>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d2f6      	bcs.n	8004b0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6852      	ldr	r2, [r2, #4]
 8004b78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d103      	bne.n	8004b8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1e5a      	subs	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bd8:	f002 fbde 	bl	8007398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	68f9      	ldr	r1, [r7, #12]
 8004be6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	22ff      	movs	r2, #255	@ 0xff
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	22ff      	movs	r2, #255	@ 0xff
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d114      	bne.n	8004c58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3310      	adds	r3, #16
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f9d4 	bl	8005fe8 <xTaskRemoveFromEventList>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <xQueueGenericReset+0xd0>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	e009      	b.n	8004c6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fef1 	bl	8004a44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3324      	adds	r3, #36	@ 0x24
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff feec 	bl	8004a44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c6c:	f002 fbc6 	bl	80073fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08e      	sub	sp, #56	@ 0x38
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	e7fd      	b.n	8004cc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <xQueueGenericCreateStatic+0x56>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <xQueueGenericCreateStatic+0x5a>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueGenericCreateStatic+0x5c>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	623b      	str	r3, [r7, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <xQueueGenericCreateStatic+0x84>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xQueueGenericCreateStatic+0x88>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <xQueueGenericCreateStatic+0x8a>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fb      	str	r3, [r7, #28]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d26:	2348      	movs	r3, #72	@ 0x48
 8004d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b48      	cmp	r3, #72	@ 0x48
 8004d2e:	d00b      	beq.n	8004d48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61bb      	str	r3, [r7, #24]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f840 	bl	8004df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3730      	adds	r7, #48	@ 0x30
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b08a      	sub	sp, #40	@ 0x28
 8004d7e:	af02      	add	r7, sp, #8
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	613b      	str	r3, [r7, #16]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3348      	adds	r3, #72	@ 0x48
 8004db4:	4618      	mov	r0, r3
 8004db6:	f002 fc11 	bl	80075dc <pvPortMalloc>
 8004dba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d011      	beq.n	8004de6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	3348      	adds	r3, #72	@ 0x48
 8004dca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dd4:	79fa      	ldrb	r2, [r7, #7]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f805 	bl	8004df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004de6:	69bb      	ldr	r3, [r7, #24]
	}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e002      	b.n	8004e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e1e:	2101      	movs	r1, #1
 8004e20:	69b8      	ldr	r0, [r7, #24]
 8004e22:	f7ff fec3 	bl	8004bac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08e      	sub	sp, #56	@ 0x38
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <xQueueGenericSend+0x34>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <xQueueGenericSend+0x42>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <xQueueGenericSend+0x46>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <xQueueGenericSend+0x48>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <xQueueGenericSend+0x64>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <xQueueGenericSend+0x72>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <xQueueGenericSend+0x76>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <xQueueGenericSend+0x78>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericSend+0x94>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	623b      	str	r3, [r7, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ec4:	f001 fa50 	bl	8006368 <xTaskGetSchedulerState>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <xQueueGenericSend+0xa4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <xQueueGenericSend+0xa8>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <xQueueGenericSend+0xaa>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	61fb      	str	r3, [r7, #28]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ef6:	f002 fa4f 	bl	8007398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <xQueueGenericSend+0xdc>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d129      	bne.n	8004f60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f12:	f000 fab0 	bl	8005476 <prvCopyDataToQueue>
 8004f16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	3324      	adds	r3, #36	@ 0x24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 f85f 	bl	8005fe8 <xTaskRemoveFromEventList>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d013      	beq.n	8004f58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f30:	4b3f      	ldr	r3, [pc, #252]	@ (8005030 <xQueueGenericSend+0x200>)
 8004f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	e00a      	b.n	8004f58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f48:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <xQueueGenericSend+0x200>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f58:	f002 fa50 	bl	80073fc <vPortExitCritical>
				return pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e063      	b.n	8005028 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f66:	f002 fa49 	bl	80073fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e05c      	b.n	8005028 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f74:	f107 0314 	add.w	r3, r7, #20
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f899 	bl	80060b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f82:	f002 fa3b 	bl	80073fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f86:	f000 fe0b 	bl	8005ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f8a:	f002 fa05 	bl	8007398 <vPortEnterCritical>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f94:	b25b      	sxtb	r3, r3
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d103      	bne.n	8004fa4 <xQueueGenericSend+0x174>
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <xQueueGenericSend+0x18a>
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fba:	f002 fa1f 	bl	80073fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fbe:	1d3a      	adds	r2, r7, #4
 8004fc0:	f107 0314 	add.w	r3, r7, #20
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 f888 	bl	80060dc <xTaskCheckForTimeOut>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d124      	bne.n	800501c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fd4:	f000 fb47 	bl	8005666 <prvIsQueueFull>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ffac 	bl	8005f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fee:	f000 fad2 	bl	8005596 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ff2:	f000 fde3 	bl	8005bbc <xTaskResumeAll>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f af7c 	bne.w	8004ef6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <xQueueGenericSend+0x200>)
 8005000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	e772      	b.n	8004ef6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005012:	f000 fac0 	bl	8005596 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005016:	f000 fdd1 	bl	8005bbc <xTaskResumeAll>
 800501a:	e76c      	b.n	8004ef6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800501c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800501e:	f000 faba 	bl	8005596 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005022:	f000 fdcb 	bl	8005bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005028:	4618      	mov	r0, r3
 800502a:	3738      	adds	r7, #56	@ 0x38
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b090      	sub	sp, #64	@ 0x40
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <xQueueGenericSendFromISR+0x3e>
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <xQueueGenericSendFromISR+0x42>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <xQueueGenericSendFromISR+0x44>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d103      	bne.n	80050a2 <xQueueGenericSendFromISR+0x6e>
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <xQueueGenericSendFromISR+0x72>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueGenericSendFromISR+0x74>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	623b      	str	r3, [r7, #32]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050c4:	f002 fa48 	bl	8007558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050c8:	f3ef 8211 	mrs	r2, BASEPRI
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61fa      	str	r2, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <xQueueGenericSendFromISR+0xc2>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d12f      	bne.n	8005156 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800510c:	f000 f9b3 	bl	8005476 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005110:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d112      	bne.n	8005140 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	3324      	adds	r3, #36	@ 0x24
 8005126:	4618      	mov	r0, r3
 8005128:	f000 ff5e 	bl	8005fe8 <xTaskRemoveFromEventList>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00e      	beq.n	8005150 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e007      	b.n	8005150 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005140:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005144:	3301      	adds	r3, #1
 8005146:	b2db      	uxtb	r3, r3
 8005148:	b25a      	sxtb	r2, r3
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005150:	2301      	movs	r3, #1
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005154:	e001      	b.n	800515a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005156:	2300      	movs	r3, #0
 8005158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005164:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005168:	4618      	mov	r0, r3
 800516a:	3740      	adds	r7, #64	@ 0x40
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	@ 0x30
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <xQueueReceive+0x32>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	623b      	str	r3, [r7, #32]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <xQueueReceive+0x40>
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <xQueueReceive+0x44>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <xQueueReceive+0x46>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <xQueueReceive+0x62>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	61fb      	str	r3, [r7, #28]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d2:	f001 f8c9 	bl	8006368 <xTaskGetSchedulerState>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <xQueueReceive+0x72>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <xQueueReceive+0x76>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <xQueueReceive+0x78>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <xQueueReceive+0x94>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61bb      	str	r3, [r7, #24]
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005204:	f002 f8c8 	bl	8007398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005218:	f000 f997 	bl	800554a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00f      	beq.n	800524c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	3310      	adds	r3, #16
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fed9 	bl	8005fe8 <xTaskRemoveFromEventList>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800523c:	4b3c      	ldr	r3, [pc, #240]	@ (8005330 <xQueueReceive+0x1c0>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800524c:	f002 f8d6 	bl	80073fc <vPortExitCritical>
				return pdPASS;
 8005250:	2301      	movs	r3, #1
 8005252:	e069      	b.n	8005328 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800525a:	f002 f8cf 	bl	80073fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800525e:	2300      	movs	r3, #0
 8005260:	e062      	b.n	8005328 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005268:	f107 0310 	add.w	r3, r7, #16
 800526c:	4618      	mov	r0, r3
 800526e:	f000 ff1f 	bl	80060b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005272:	2301      	movs	r3, #1
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005276:	f002 f8c1 	bl	80073fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800527a:	f000 fc91 	bl	8005ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800527e:	f002 f88b 	bl	8007398 <vPortEnterCritical>
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005288:	b25b      	sxtb	r3, r3
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d103      	bne.n	8005298 <xQueueReceive+0x128>
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d103      	bne.n	80052ae <xQueueReceive+0x13e>
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ae:	f002 f8a5 	bl	80073fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052b2:	1d3a      	adds	r2, r7, #4
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 ff0e 	bl	80060dc <xTaskCheckForTimeOut>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d123      	bne.n	800530e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c8:	f000 f9b7 	bl	800563a <prvIsQueueEmpty>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d017      	beq.n	8005302 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	3324      	adds	r3, #36	@ 0x24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fe32 	bl	8005f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052e2:	f000 f958 	bl	8005596 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052e6:	f000 fc69 	bl	8005bbc <xTaskResumeAll>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d189      	bne.n	8005204 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005330 <xQueueReceive+0x1c0>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	e780      	b.n	8005204 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005304:	f000 f947 	bl	8005596 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005308:	f000 fc58 	bl	8005bbc <xTaskResumeAll>
 800530c:	e77a      	b.n	8005204 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800530e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005310:	f000 f941 	bl	8005596 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005314:	f000 fc52 	bl	8005bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800531a:	f000 f98e 	bl	800563a <prvIsQueueEmpty>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f43f af6f 	beq.w	8005204 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005326:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005328:	4618      	mov	r0, r3
 800532a:	3730      	adds	r7, #48	@ 0x30
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	@ 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	623b      	str	r3, [r7, #32]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <xQueueReceiveFromISR+0x3c>
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueReceiveFromISR+0x40>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <xQueueReceiveFromISR+0x42>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61fb      	str	r3, [r7, #28]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005392:	f002 f8e1 	bl	8007558 <vPortValidateInterruptPriority>
	__asm volatile
 8005396:	f3ef 8211 	mrs	r2, BASEPRI
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61ba      	str	r2, [r7, #24]
 80053ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d02f      	beq.n	800541e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053cc:	f000 f8bd 	bl	800554a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80053d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d112      	bne.n	8005408 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	3310      	adds	r3, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fdfa 	bl	8005fe8 <xTaskRemoveFromEventList>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e007      	b.n	8005418 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800540c:	3301      	adds	r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	b25a      	sxtb	r2, r3
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005418:	2301      	movs	r3, #1
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
 800541c:	e001      	b.n	8005422 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f383 8811 	msr	BASEPRI, r3
}
 800542c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800542e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005430:	4618      	mov	r0, r3
 8005432:	3738      	adds	r7, #56	@ 0x38
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60bb      	str	r3, [r7, #8]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800545e:	f001 ff9b 	bl	8007398 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005468:	f001 ffc8 	bl	80073fc <vPortExitCritical>

	return uxReturn;
 800546c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d14d      	bne.n	8005538 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 ff7f 	bl	80063a4 <xTaskPriorityDisinherit>
 80054a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	e043      	b.n	8005538 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d119      	bne.n	80054ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6858      	ldr	r0, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	461a      	mov	r2, r3
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	f002 fc0c 	bl	8007cde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	441a      	add	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d32b      	bcc.n	8005538 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	e026      	b.n	8005538 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68d8      	ldr	r0, [r3, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	461a      	mov	r2, r3
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	f002 fbf2 	bl	8007cde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	425b      	negs	r3, r3
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d207      	bcs.n	8005526 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	425b      	negs	r3, r3
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d105      	bne.n	8005538 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3b01      	subs	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005540:	697b      	ldr	r3, [r7, #20]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d018      	beq.n	800558e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d303      	bcc.n	800557e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	461a      	mov	r2, r3
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f002 fba8 	bl	8007cde <memcpy>
	}
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800559e:	f001 fefb 	bl	8007398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055aa:	e011      	b.n	80055d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3324      	adds	r3, #36	@ 0x24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fd15 	bl	8005fe8 <xTaskRemoveFromEventList>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055c4:	f000 fdee 	bl	80061a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dce9      	bgt.n	80055ac <prvUnlockQueue+0x16>
 80055d8:	e000      	b.n	80055dc <prvUnlockQueue+0x46>
					break;
 80055da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22ff      	movs	r2, #255	@ 0xff
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80055e4:	f001 ff0a 	bl	80073fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055e8:	f001 fed6 	bl	8007398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055f4:	e011      	b.n	800561a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d012      	beq.n	8005624 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3310      	adds	r3, #16
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fcf0 	bl	8005fe8 <xTaskRemoveFromEventList>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800560e:	f000 fdc9 	bl	80061a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	3b01      	subs	r3, #1
 8005616:	b2db      	uxtb	r3, r3
 8005618:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800561a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	dce9      	bgt.n	80055f6 <prvUnlockQueue+0x60>
 8005622:	e000      	b.n	8005626 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005624:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	22ff      	movs	r2, #255	@ 0xff
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800562e:	f001 fee5 	bl	80073fc <vPortExitCritical>
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005642:	f001 fea9 	bl	8007398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800564e:	2301      	movs	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e001      	b.n	8005658 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005658:	f001 fed0 	bl	80073fc <vPortExitCritical>

	return xReturn;
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800566e:	f001 fe93 	bl	8007398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	429a      	cmp	r2, r3
 800567c:	d102      	bne.n	8005684 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e001      	b.n	8005688 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005688:	f001 feb8 	bl	80073fc <vPortExitCritical>

	return xReturn;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <xQueueIsQueueFullFromISR+0x2a>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	60fb      	str	r3, [r7, #12]
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <xQueueIsQueueFullFromISR+0x3c>
	{
		xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e001      	b.n	80056d6 <xQueueIsQueueFullFromISR+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056d6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e014      	b.n	800571e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005734 <vQueueAddToRegistry+0x50>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005700:	490c      	ldr	r1, [pc, #48]	@ (8005734 <vQueueAddToRegistry+0x50>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800570a:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <vQueueAddToRegistry+0x50>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005716:	e006      	b.n	8005726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b07      	cmp	r3, #7
 8005722:	d9e7      	bls.n	80056f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	200008e0 	.word	0x200008e0

08005738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005748:	f001 fe26 	bl	8007398 <vPortEnterCritical>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005752:	b25b      	sxtb	r3, r3
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d103      	bne.n	8005762 <vQueueWaitForMessageRestricted+0x2a>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005768:	b25b      	sxtb	r3, r3
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d103      	bne.n	8005778 <vQueueWaitForMessageRestricted+0x40>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005778:	f001 fe40 	bl	80073fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3324      	adds	r3, #36	@ 0x24
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fbff 	bl	8005f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f7ff feff 	bl	8005596 <prvUnlockQueue>
	}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	@ 0x38
 80057a4:	af04      	add	r7, sp, #16
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	623b      	str	r3, [r7, #32]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	61fb      	str	r3, [r7, #28]
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057ea:	2354      	movs	r3, #84	@ 0x54
 80057ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b54      	cmp	r3, #84	@ 0x54
 80057f2:	d00b      	beq.n	800580c <xTaskCreateStatic+0x6c>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	61bb      	str	r3, [r7, #24]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800580c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01e      	beq.n	8005852 <xTaskCreateStatic+0xb2>
 8005814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01b      	beq.n	8005852 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800582c:	2300      	movs	r3, #0
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	f107 0314 	add.w	r3, r7, #20
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f850 	bl	80058ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800584a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800584c:	f000 f8d6 	bl	80059fc <prvAddNewTaskToReadyList>
 8005850:	e001      	b.n	8005856 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005856:	697b      	ldr	r3, [r7, #20]
	}
 8005858:	4618      	mov	r0, r3
 800585a:	3728      	adds	r7, #40	@ 0x28
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	@ 0x30
 8005864:	af04      	add	r7, sp, #16
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4618      	mov	r0, r3
 8005876:	f001 feb1 	bl	80075dc <pvPortMalloc>
 800587a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005882:	2054      	movs	r0, #84	@ 0x54
 8005884:	f001 feaa 	bl	80075dc <pvPortMalloc>
 8005888:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
 8005896:	e005      	b.n	80058a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005898:	6978      	ldr	r0, [r7, #20]
 800589a:	f001 ff6d 	bl	8007778 <vPortFree>
 800589e:	e001      	b.n	80058a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d017      	beq.n	80058da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	2300      	movs	r3, #0
 80058b6:	9303      	str	r3, [sp, #12]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	9302      	str	r3, [sp, #8]
 80058bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f80e 	bl	80058ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ce:	69f8      	ldr	r0, [r7, #28]
 80058d0:	f000 f894 	bl	80059fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e002      	b.n	80058e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058e0:	69bb      	ldr	r3, [r7, #24]
	}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b088      	sub	sp, #32
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005902:	3b01      	subs	r3, #1
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	f023 0307 	bic.w	r3, r3, #7
 8005910:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	617b      	str	r3, [r7, #20]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01f      	beq.n	800597a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	e012      	b.n	8005966 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	4413      	add	r3, r2
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	3334      	adds	r3, #52	@ 0x34
 8005950:	460a      	mov	r2, r1
 8005952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d9e9      	bls.n	8005940 <prvInitialiseNewTask+0x56>
 800596c:	e000      	b.n	8005970 <prvInitialiseNewTask+0x86>
			{
				break;
 800596e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005978:	e003      	b.n	8005982 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	2b06      	cmp	r3, #6
 8005986:	d901      	bls.n	800598c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005988:	2306      	movs	r3, #6
 800598a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005990:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	2200      	movs	r2, #0
 800599c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	3304      	adds	r3, #4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff f86e 	bl	8004a84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	3318      	adds	r3, #24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f869 	bl	8004a84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	f1c3 0207 	rsb	r2, r3, #7
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	69b8      	ldr	r0, [r7, #24]
 80059dc:	f001 fba8 	bl	8007130 <pxPortInitialiseStack>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f2:	bf00      	nop
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a04:	f001 fcc8 	bl	8007398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a08:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab4 <prvAddNewTaskToReadyList+0xb8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	4a29      	ldr	r2, [pc, #164]	@ (8005ab4 <prvAddNewTaskToReadyList+0xb8>)
 8005a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a12:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <prvAddNewTaskToReadyList+0xbc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a1a:	4a27      	ldr	r2, [pc, #156]	@ (8005ab8 <prvAddNewTaskToReadyList+0xbc>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a20:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <prvAddNewTaskToReadyList+0xb8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a28:	f000 fbe0 	bl	80061ec <prvInitialiseTaskLists>
 8005a2c:	e00d      	b.n	8005a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a2e:	4b23      	ldr	r3, [pc, #140]	@ (8005abc <prvAddNewTaskToReadyList+0xc0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a36:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <prvAddNewTaskToReadyList+0xbc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d802      	bhi.n	8005a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <prvAddNewTaskToReadyList+0xbc>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac0 <prvAddNewTaskToReadyList+0xc4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <prvAddNewTaskToReadyList+0xc4>)
 8005a52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	2201      	movs	r2, #1
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	4b19      	ldr	r3, [pc, #100]	@ (8005ac4 <prvAddNewTaskToReadyList+0xc8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <prvAddNewTaskToReadyList+0xc8>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <prvAddNewTaskToReadyList+0xcc>)
 8005a74:	441a      	add	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7ff f80e 	bl	8004a9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a82:	f001 fcbb 	bl	80073fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <prvAddNewTaskToReadyList+0xc0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <prvAddNewTaskToReadyList+0xbc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d207      	bcs.n	8005aac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <prvAddNewTaskToReadyList+0xd0>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000a20 	.word	0x20000a20
 8005ab8:	20000920 	.word	0x20000920
 8005abc:	20000a2c 	.word	0x20000a2c
 8005ac0:	20000a3c 	.word	0x20000a3c
 8005ac4:	20000a28 	.word	0x20000a28
 8005ac8:	20000924 	.word	0x20000924
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ade:	463a      	mov	r2, r7
 8005ae0:	1d39      	adds	r1, r7, #4
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fa fd52 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	9202      	str	r2, [sp, #8]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	460a      	mov	r2, r1
 8005afe:	4922      	ldr	r1, [pc, #136]	@ (8005b88 <vTaskStartScheduler+0xb8>)
 8005b00:	4822      	ldr	r0, [pc, #136]	@ (8005b8c <vTaskStartScheduler+0xbc>)
 8005b02:	f7ff fe4d 	bl	80057a0 <xTaskCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	4a21      	ldr	r2, [pc, #132]	@ (8005b90 <vTaskStartScheduler+0xc0>)
 8005b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b0c:	4b20      	ldr	r3, [pc, #128]	@ (8005b90 <vTaskStartScheduler+0xc0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e001      	b.n	8005b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d102      	bne.n	8005b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b24:	f000 ff1c 	bl	8006960 <xTimerCreateTimerTask>
 8005b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d116      	bne.n	8005b5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b44:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <vTaskStartScheduler+0xc4>)
 8005b46:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b4c:	4b12      	ldr	r3, [pc, #72]	@ (8005b98 <vTaskStartScheduler+0xc8>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b52:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <vTaskStartScheduler+0xcc>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b58:	f001 fb7a 	bl	8007250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b5c:	e00f      	b.n	8005b7e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d10b      	bne.n	8005b7e <vTaskStartScheduler+0xae>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	60fb      	str	r3, [r7, #12]
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <vTaskStartScheduler+0xaa>
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08008ba8 	.word	0x08008ba8
 8005b8c:	080061bd 	.word	0x080061bd
 8005b90:	20000a44 	.word	0x20000a44
 8005b94:	20000a40 	.word	0x20000a40
 8005b98:	20000a2c 	.word	0x20000a2c
 8005b9c:	20000a24 	.word	0x20000a24

08005ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ba4:	4b04      	ldr	r3, [pc, #16]	@ (8005bb8 <vTaskSuspendAll+0x18>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a03      	ldr	r2, [pc, #12]	@ (8005bb8 <vTaskSuspendAll+0x18>)
 8005bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20000a48 	.word	0x20000a48

08005bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bca:	4b42      	ldr	r3, [pc, #264]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <xTaskResumeAll+0x2e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	603b      	str	r3, [r7, #0]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bea:	f001 fbd5 	bl	8007398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf8:	4b36      	ldr	r3, [pc, #216]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d161      	bne.n	8005cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c00:	4b35      	ldr	r3, [pc, #212]	@ (8005cd8 <xTaskResumeAll+0x11c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d05d      	beq.n	8005cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c08:	e02e      	b.n	8005c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0a:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <xTaskResumeAll+0x120>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe ff9e 	bl	8004b58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe ff99 	bl	8004b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce0 <xTaskResumeAll+0x124>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <xTaskResumeAll+0x124>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <xTaskResumeAll+0x128>)
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fe ff25 	bl	8004a9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <xTaskResumeAll+0x12c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <xTaskResumeAll+0x130>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c68:	4b1c      	ldr	r3, [pc, #112]	@ (8005cdc <xTaskResumeAll+0x120>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1cc      	bne.n	8005c0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c76:	f000 fb57 	bl	8006328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <xTaskResumeAll+0x134>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c86:	f000 f847 	bl	8005d18 <xTaskIncrementTick>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c90:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <xTaskResumeAll+0x130>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f1      	bne.n	8005c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <xTaskResumeAll+0x134>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ca8:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <xTaskResumeAll+0x130>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <xTaskResumeAll+0x138>)
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cc4:	f001 fb9a 	bl	80073fc <vPortExitCritical>

	return xAlreadyYielded;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000a48 	.word	0x20000a48
 8005cd8:	20000a20 	.word	0x20000a20
 8005cdc:	200009e0 	.word	0x200009e0
 8005ce0:	20000a28 	.word	0x20000a28
 8005ce4:	20000924 	.word	0x20000924
 8005ce8:	20000920 	.word	0x20000920
 8005cec:	20000a34 	.word	0x20000a34
 8005cf0:	20000a30 	.word	0x20000a30
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cfe:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <xTaskGetTickCount+0x1c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d04:	687b      	ldr	r3, [r7, #4]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000a24 	.word	0x20000a24

08005d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d22:	4b4f      	ldr	r3, [pc, #316]	@ (8005e60 <xTaskIncrementTick+0x148>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 808f 	bne.w	8005e4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005e64 <xTaskIncrementTick+0x14c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d34:	4a4b      	ldr	r2, [pc, #300]	@ (8005e64 <xTaskIncrementTick+0x14c>)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d121      	bne.n	8005d84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d40:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <xTaskIncrementTick+0x150>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	603b      	str	r3, [r7, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <xTaskIncrementTick+0x46>
 8005d62:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <xTaskIncrementTick+0x150>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <xTaskIncrementTick+0x154>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e68 <xTaskIncrementTick+0x150>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4a3e      	ldr	r2, [pc, #248]	@ (8005e6c <xTaskIncrementTick+0x154>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <xTaskIncrementTick+0x158>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e70 <xTaskIncrementTick+0x158>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	f000 fad2 	bl	8006328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d84:	4b3b      	ldr	r3, [pc, #236]	@ (8005e74 <xTaskIncrementTick+0x15c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d348      	bcc.n	8005e20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d8e:	4b36      	ldr	r3, [pc, #216]	@ (8005e68 <xTaskIncrementTick+0x150>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d98:	4b36      	ldr	r3, [pc, #216]	@ (8005e74 <xTaskIncrementTick+0x15c>)
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9e:	601a      	str	r2, [r3, #0]
					break;
 8005da0:	e03e      	b.n	8005e20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <xTaskIncrementTick+0x150>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d203      	bcs.n	8005dc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dba:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <xTaskIncrementTick+0x15c>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dc0:	e02e      	b.n	8005e20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fec6 	bl	8004b58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3318      	adds	r3, #24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe febd 	bl	8004b58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	2201      	movs	r2, #1
 8005de4:	409a      	lsls	r2, r3
 8005de6:	4b24      	ldr	r3, [pc, #144]	@ (8005e78 <xTaskIncrementTick+0x160>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	4a22      	ldr	r2, [pc, #136]	@ (8005e78 <xTaskIncrementTick+0x160>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <xTaskIncrementTick+0x164>)
 8005dfe:	441a      	add	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fe fe49 	bl	8004a9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <xTaskIncrementTick+0x168>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3b9      	bcc.n	8005d8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1e:	e7b6      	b.n	8005d8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e20:	4b17      	ldr	r3, [pc, #92]	@ (8005e80 <xTaskIncrementTick+0x168>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	4915      	ldr	r1, [pc, #84]	@ (8005e7c <xTaskIncrementTick+0x164>)
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d901      	bls.n	8005e3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e3c:	4b11      	ldr	r3, [pc, #68]	@ (8005e84 <xTaskIncrementTick+0x16c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e004      	b.n	8005e54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e88 <xTaskIncrementTick+0x170>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4a0d      	ldr	r2, [pc, #52]	@ (8005e88 <xTaskIncrementTick+0x170>)
 8005e52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e54:	697b      	ldr	r3, [r7, #20]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000a48 	.word	0x20000a48
 8005e64:	20000a24 	.word	0x20000a24
 8005e68:	200009d8 	.word	0x200009d8
 8005e6c:	200009dc 	.word	0x200009dc
 8005e70:	20000a38 	.word	0x20000a38
 8005e74:	20000a40 	.word	0x20000a40
 8005e78:	20000a28 	.word	0x20000a28
 8005e7c:	20000924 	.word	0x20000924
 8005e80:	20000920 	.word	0x20000920
 8005e84:	20000a34 	.word	0x20000a34
 8005e88:	20000a30 	.word	0x20000a30

08005e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e92:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <vTaskSwitchContext+0xa4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e9a:	4b26      	ldr	r3, [pc, #152]	@ (8005f34 <vTaskSwitchContext+0xa8>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ea0:	e040      	b.n	8005f24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ea2:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <vTaskSwitchContext+0xa8>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea8:	4b23      	ldr	r3, [pc, #140]	@ (8005f38 <vTaskSwitchContext+0xac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eb6:	7afb      	ldrb	r3, [r7, #11]
 8005eb8:	f1c3 031f 	rsb	r3, r3, #31
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	491f      	ldr	r1, [pc, #124]	@ (8005f3c <vTaskSwitchContext+0xb0>)
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <vTaskSwitchContext+0x5e>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	607b      	str	r3, [r7, #4]
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	e7fd      	b.n	8005ee6 <vTaskSwitchContext+0x5a>
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a11      	ldr	r2, [pc, #68]	@ (8005f3c <vTaskSwitchContext+0xb0>)
 8005ef6:	4413      	add	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d104      	bne.n	8005f1a <vTaskSwitchContext+0x8e>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a07      	ldr	r2, [pc, #28]	@ (8005f40 <vTaskSwitchContext+0xb4>)
 8005f22:	6013      	str	r3, [r2, #0]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000a48 	.word	0x20000a48
 8005f34:	20000a34 	.word	0x20000a34
 8005f38:	20000a28 	.word	0x20000a28
 8005f3c:	20000924 	.word	0x20000924
 8005f40:	20000920 	.word	0x20000920

08005f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f6c:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <vTaskPlaceOnEventList+0x48>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fe fdb6 	bl	8004ae6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	6838      	ldr	r0, [r7, #0]
 8005f7e:	f000 fc89 	bl	8006894 <prvAddCurrentTaskToDelayedList>
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000920 	.word	0x20000920

08005f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	617b      	str	r3, [r7, #20]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7fe fd6b 	bl	8004a9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f000 fc5c 	bl	8006894 <prvAddCurrentTaskToDelayedList>
	}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000920 	.word	0x20000920

08005fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	60fb      	str	r3, [r7, #12]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fd9c 	bl	8004b58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006020:	4b1d      	ldr	r3, [pc, #116]	@ (8006098 <xTaskRemoveFromEventList+0xb0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11c      	bne.n	8006062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3304      	adds	r3, #4
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fd93 	bl	8004b58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	2201      	movs	r2, #1
 8006038:	409a      	lsls	r2, r3
 800603a:	4b18      	ldr	r3, [pc, #96]	@ (800609c <xTaskRemoveFromEventList+0xb4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	4a16      	ldr	r2, [pc, #88]	@ (800609c <xTaskRemoveFromEventList+0xb4>)
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4a13      	ldr	r2, [pc, #76]	@ (80060a0 <xTaskRemoveFromEventList+0xb8>)
 8006052:	441a      	add	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fe fd1f 	bl	8004a9e <vListInsertEnd>
 8006060:	e005      	b.n	800606e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3318      	adds	r3, #24
 8006066:	4619      	mov	r1, r3
 8006068:	480e      	ldr	r0, [pc, #56]	@ (80060a4 <xTaskRemoveFromEventList+0xbc>)
 800606a:	f7fe fd18 	bl	8004a9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <xTaskRemoveFromEventList+0xc0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	429a      	cmp	r2, r3
 800607a:	d905      	bls.n	8006088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006080:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <xTaskRemoveFromEventList+0xc4>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e001      	b.n	800608c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800608c:	697b      	ldr	r3, [r7, #20]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000a48 	.word	0x20000a48
 800609c:	20000a28 	.word	0x20000a28
 80060a0:	20000924 	.word	0x20000924
 80060a4:	200009e0 	.word	0x200009e0
 80060a8:	20000920 	.word	0x20000920
 80060ac:	20000a34 	.word	0x20000a34

080060b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <vTaskInternalSetTimeOutState+0x24>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <vTaskInternalSetTimeOutState+0x28>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000a38 	.word	0x20000a38
 80060d8:	20000a24 	.word	0x20000a24

080060dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60fb      	str	r3, [r7, #12]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006122:	f001 f939 	bl	8007398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006126:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <xTaskCheckForTimeOut+0xc0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e023      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <xTaskCheckForTimeOut+0xc4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d007      	beq.n	8006162 <xTaskCheckForTimeOut+0x86>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	d302      	bcc.n	8006162 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e015      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d20b      	bcs.n	8006184 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff99 	bl	80060b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e004      	b.n	800618e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f001 f935 	bl	80073fc <vPortExitCritical>

	return xReturn;
 8006192:	69fb      	ldr	r3, [r7, #28]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000a24 	.word	0x20000a24
 80061a0:	20000a38 	.word	0x20000a38

080061a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <vTaskMissedYield+0x14>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20000a34 	.word	0x20000a34

080061bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061c4:	f000 f852 	bl	800626c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <prvIdleTask+0x28>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d9f9      	bls.n	80061c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <prvIdleTask+0x2c>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061e0:	e7f0      	b.n	80061c4 <prvIdleTask+0x8>
 80061e2:	bf00      	nop
 80061e4:	20000924 	.word	0x20000924
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	e00c      	b.n	8006212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <prvInitialiseTaskLists+0x60>)
 8006204:	4413      	add	r3, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fc1c 	bl	8004a44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d9ef      	bls.n	80061f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006218:	480d      	ldr	r0, [pc, #52]	@ (8006250 <prvInitialiseTaskLists+0x64>)
 800621a:	f7fe fc13 	bl	8004a44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800621e:	480d      	ldr	r0, [pc, #52]	@ (8006254 <prvInitialiseTaskLists+0x68>)
 8006220:	f7fe fc10 	bl	8004a44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006224:	480c      	ldr	r0, [pc, #48]	@ (8006258 <prvInitialiseTaskLists+0x6c>)
 8006226:	f7fe fc0d 	bl	8004a44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800622a:	480c      	ldr	r0, [pc, #48]	@ (800625c <prvInitialiseTaskLists+0x70>)
 800622c:	f7fe fc0a 	bl	8004a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006230:	480b      	ldr	r0, [pc, #44]	@ (8006260 <prvInitialiseTaskLists+0x74>)
 8006232:	f7fe fc07 	bl	8004a44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <prvInitialiseTaskLists+0x78>)
 8006238:	4a05      	ldr	r2, [pc, #20]	@ (8006250 <prvInitialiseTaskLists+0x64>)
 800623a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvInitialiseTaskLists+0x7c>)
 800623e:	4a05      	ldr	r2, [pc, #20]	@ (8006254 <prvInitialiseTaskLists+0x68>)
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000924 	.word	0x20000924
 8006250:	200009b0 	.word	0x200009b0
 8006254:	200009c4 	.word	0x200009c4
 8006258:	200009e0 	.word	0x200009e0
 800625c:	200009f4 	.word	0x200009f4
 8006260:	20000a0c 	.word	0x20000a0c
 8006264:	200009d8 	.word	0x200009d8
 8006268:	200009dc 	.word	0x200009dc

0800626c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006272:	e019      	b.n	80062a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006274:	f001 f890 	bl	8007398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <prvCheckTasksWaitingTermination+0x50>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fc67 	bl	8004b58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 8006292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006294:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	4a0a      	ldr	r2, [pc, #40]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 800629c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800629e:	f001 f8ad 	bl	80073fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f810 	bl	80062c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e1      	bne.n	8006274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200009f4 	.word	0x200009f4
 80062c0:	20000a20 	.word	0x20000a20
 80062c4:	20000a08 	.word	0x20000a08

080062c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fa4a 	bl	8007778 <vPortFree>
				vPortFree( pxTCB );
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 fa47 	bl	8007778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ea:	e019      	b.n	8006320 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d103      	bne.n	80062fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fa3e 	bl	8007778 <vPortFree>
	}
 80062fc:	e010      	b.n	8006320 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006304:	2b02      	cmp	r3, #2
 8006306:	d00b      	beq.n	8006320 <prvDeleteTCB+0x58>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60fb      	str	r3, [r7, #12]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <prvDeleteTCB+0x54>
	}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800632e:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <prvResetNextTaskUnblockTime+0x38>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <prvResetNextTaskUnblockTime+0x3c>)
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006340:	e008      	b.n	8006354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <prvResetNextTaskUnblockTime+0x38>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a04      	ldr	r2, [pc, #16]	@ (8006364 <prvResetNextTaskUnblockTime+0x3c>)
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	200009d8 	.word	0x200009d8
 8006364:	20000a40 	.word	0x20000a40

08006368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <xTaskGetSchedulerState+0x34>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006376:	2301      	movs	r3, #1
 8006378:	607b      	str	r3, [r7, #4]
 800637a:	e008      	b.n	800638e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800637c:	4b08      	ldr	r3, [pc, #32]	@ (80063a0 <xTaskGetSchedulerState+0x38>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006384:	2302      	movs	r3, #2
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	e001      	b.n	800638e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800638a:	2300      	movs	r3, #0
 800638c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800638e:	687b      	ldr	r3, [r7, #4]
	}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000a2c 	.word	0x20000a2c
 80063a0:	20000a48 	.word	0x20000a48

080063a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d070      	beq.n	800649c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063ba:	4b3b      	ldr	r3, [pc, #236]	@ (80064a8 <xTaskPriorityDisinherit+0x104>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d00b      	beq.n	80063dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60bb      	str	r3, [r7, #8]
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	429a      	cmp	r2, r3
 8006410:	d044      	beq.n	800649c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006416:	2b00      	cmp	r3, #0
 8006418:	d140      	bne.n	800649c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fb9a 	bl	8004b58 <uxListRemove>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d115      	bne.n	8006456 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642e:	491f      	ldr	r1, [pc, #124]	@ (80064ac <xTaskPriorityDisinherit+0x108>)
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xTaskPriorityDisinherit+0xb2>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	2201      	movs	r2, #1
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43da      	mvns	r2, r3
 800644c:	4b18      	ldr	r3, [pc, #96]	@ (80064b0 <xTaskPriorityDisinherit+0x10c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4013      	ands	r3, r2
 8006452:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <xTaskPriorityDisinherit+0x10c>)
 8006454:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	f1c3 0207 	rsb	r2, r3, #7
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	2201      	movs	r2, #1
 8006470:	409a      	lsls	r2, r3
 8006472:	4b0f      	ldr	r3, [pc, #60]	@ (80064b0 <xTaskPriorityDisinherit+0x10c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <xTaskPriorityDisinherit+0x10c>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a08      	ldr	r2, [pc, #32]	@ (80064ac <xTaskPriorityDisinherit+0x108>)
 800648a:	441a      	add	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe fb03 	bl	8004a9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800649c:	697b      	ldr	r3, [r7, #20]
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000920 	.word	0x20000920
 80064ac:	20000924 	.word	0x20000924
 80064b0:	20000a28 	.word	0x20000a28

080064b4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80064c2:	f000 ff69 	bl	8007398 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80064c6:	4b26      	ldr	r3, [pc, #152]	@ (8006560 <xTaskNotifyWait+0xac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d01a      	beq.n	800650a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80064d4:	4b22      	ldr	r3, [pc, #136]	@ (8006560 <xTaskNotifyWait+0xac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	43d2      	mvns	r2, r2
 80064de:	400a      	ands	r2, r1
 80064e0:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80064e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006560 <xTaskNotifyWait+0xac>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064f2:	2101      	movs	r1, #1
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f000 f9cd 	bl	8006894 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80064fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006564 <xTaskNotifyWait+0xb0>)
 80064fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800650a:	f000 ff77 	bl	80073fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800650e:	f000 ff43 	bl	8007398 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006518:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <xTaskNotifyWait+0xac>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006522:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <xTaskNotifyWait+0xac>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d002      	beq.n	8006536 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e008      	b.n	8006548 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006536:	4b0a      	ldr	r3, [pc, #40]	@ (8006560 <xTaskNotifyWait+0xac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	43d2      	mvns	r2, r2
 8006540:	400a      	ands	r2, r1
 8006542:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <xTaskNotifyWait+0xac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8006552:	f000 ff53 	bl	80073fc <vPortExitCritical>

		return xReturn;
 8006556:	697b      	ldr	r3, [r7, #20]
	}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000920 	.word	0x20000920
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	@ 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006578:	2301      	movs	r3, #1
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <xTaskGenericNotify+0x32>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	61bb      	str	r3, [r7, #24]
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	e7fd      	b.n	8006596 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800659e:	f000 fefb 	bl	8007398 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065b6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d827      	bhi.n	8006616 <xTaskGenericNotify+0xae>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <xTaskGenericNotify+0x64>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006639 	.word	0x08006639
 80065d0:	080065e1 	.word	0x080065e1
 80065d4:	080065ef 	.word	0x080065ef
 80065d8:	080065fb 	.word	0x080065fb
 80065dc:	08006603 	.word	0x08006603
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80065ec:	e027      	b.n	800663e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80065f8:	e021      	b.n	800663e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006600:	e01d      	b.n	800663e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d003      	beq.n	8006610 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800660e:	e016      	b.n	800663e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006610:	2300      	movs	r3, #0
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006614:	e013      	b.n	800663e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d00d      	beq.n	800663c <xTaskGenericNotify+0xd4>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	617b      	str	r3, [r7, #20]
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	e7fd      	b.n	8006634 <xTaskGenericNotify+0xcc>
					break;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <xTaskGenericNotify+0xd6>

					break;
 800663c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800663e:	7ffb      	ldrb	r3, [r7, #31]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d13a      	bne.n	80066ba <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe fa85 	bl	8004b58 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	4b1c      	ldr	r3, [pc, #112]	@ (80066c8 <xTaskGenericNotify+0x160>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	4a1a      	ldr	r2, [pc, #104]	@ (80066c8 <xTaskGenericNotify+0x160>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <xTaskGenericNotify+0x164>)
 800666e:	441a      	add	r2, r3
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fa11 	bl	8004a9e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <xTaskGenericNotify+0x134>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	613b      	str	r3, [r7, #16]
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <xTaskGenericNotify+0x168>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d907      	bls.n	80066ba <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <xTaskGenericNotify+0x16c>)
 80066ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80066ba:	f000 fe9f 	bl	80073fc <vPortExitCritical>

		return xReturn;
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3728      	adds	r7, #40	@ 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000a28 	.word	0x20000a28
 80066cc:	20000924 	.word	0x20000924
 80066d0:	20000920 	.word	0x20000920
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	@ 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80066e8:	2301      	movs	r3, #1
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800670a:	f000 ff25 	bl	8007558 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006712:	f3ef 8211 	mrs	r2, BASEPRI
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	623a      	str	r2, [r7, #32]
 8006728:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800672a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2202      	movs	r2, #2
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b04      	cmp	r3, #4
 8006752:	d829      	bhi.n	80067a8 <xTaskGenericNotifyFromISR+0xd0>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <xTaskGenericNotifyFromISR+0x84>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	080067cb 	.word	0x080067cb
 8006760:	08006771 	.word	0x08006771
 8006764:	0800677f 	.word	0x0800677f
 8006768:	0800678b 	.word	0x0800678b
 800676c:	08006793 	.word	0x08006793
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	431a      	orrs	r2, r3
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800677c:	e028      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006788:	e022      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006790:	e01e      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006792:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006796:	2b02      	cmp	r3, #2
 8006798:	d003      	beq.n	80067a2 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80067a0:	e016      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80067a6:	e013      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d00d      	beq.n	80067ce <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61bb      	str	r3, [r7, #24]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xTaskGenericNotifyFromISR+0xee>
					break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <xTaskGenericNotifyFromISR+0xf8>
					break;
 80067ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d146      	bne.n	8006866 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	617b      	str	r3, [r7, #20]
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f8:	4b20      	ldr	r3, [pc, #128]	@ (800687c <xTaskGenericNotifyFromISR+0x1a4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11c      	bne.n	800683a <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f9a7 	bl	8004b58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	2201      	movs	r2, #1
 8006810:	409a      	lsls	r2, r3
 8006812:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <xTaskGenericNotifyFromISR+0x1a8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4313      	orrs	r3, r2
 8006818:	4a19      	ldr	r2, [pc, #100]	@ (8006880 <xTaskGenericNotifyFromISR+0x1a8>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4a16      	ldr	r2, [pc, #88]	@ (8006884 <xTaskGenericNotifyFromISR+0x1ac>)
 800682a:	441a      	add	r2, r3
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7fe f933 	bl	8004a9e <vListInsertEnd>
 8006838:	e005      	b.n	8006846 <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	3318      	adds	r3, #24
 800683e:	4619      	mov	r1, r3
 8006840:	4811      	ldr	r0, [pc, #68]	@ (8006888 <xTaskGenericNotifyFromISR+0x1b0>)
 8006842:	f7fe f92c 	bl	8004a9e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <xTaskGenericNotifyFromISR+0x1b4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	429a      	cmp	r2, r3
 8006852:	d908      	bls.n	8006866 <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <xTaskGenericNotifyFromISR+0x1b8>)
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	613b      	str	r3, [r7, #16]
	__asm volatile
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f383 8811 	msr	BASEPRI, r3
}
 8006870:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006874:	4618      	mov	r0, r3
 8006876:	3738      	adds	r7, #56	@ 0x38
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000a48 	.word	0x20000a48
 8006880:	20000a28 	.word	0x20000a28
 8006884:	20000924 	.word	0x20000924
 8006888:	200009e0 	.word	0x200009e0
 800688c:	20000920 	.word	0x20000920
 8006890:	20000a34 	.word	0x20000a34

08006894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800689e:	4b29      	ldr	r3, [pc, #164]	@ (8006944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a4:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f954 	bl	8004b58 <uxListRemove>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80068b6:	4b24      	ldr	r3, [pc, #144]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	2201      	movs	r2, #1
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43da      	mvns	r2, r3
 80068c4:	4b21      	ldr	r3, [pc, #132]	@ (800694c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4013      	ands	r3, r2
 80068ca:	4a20      	ldr	r2, [pc, #128]	@ (800694c <prvAddCurrentTaskToDelayedList+0xb8>)
 80068cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d10a      	bne.n	80068ec <prvAddCurrentTaskToDelayedList+0x58>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	481a      	ldr	r0, [pc, #104]	@ (8006950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068e6:	f7fe f8da 	bl	8004a9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068ea:	e026      	b.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068f4:	4b14      	ldr	r3, [pc, #80]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	429a      	cmp	r2, r3
 8006902:	d209      	bcs.n	8006918 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006904:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b0f      	ldr	r3, [pc, #60]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3304      	adds	r3, #4
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f7fe f8e8 	bl	8004ae6 <vListInsert>
}
 8006916:	e010      	b.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006918:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe f8de 	bl	8004ae6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800692a:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <prvAddCurrentTaskToDelayedList+0xc8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d202      	bcs.n	800693a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006934:	4a09      	ldr	r2, [pc, #36]	@ (800695c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6013      	str	r3, [r2, #0]
}
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000a24 	.word	0x20000a24
 8006948:	20000920 	.word	0x20000920
 800694c:	20000a28 	.word	0x20000a28
 8006950:	20000a0c 	.word	0x20000a0c
 8006954:	200009dc 	.word	0x200009dc
 8006958:	200009d8 	.word	0x200009d8
 800695c:	20000a40 	.word	0x20000a40

08006960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800696a:	f000 fb55 	bl	8007018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800696e:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <xTimerCreateTimerTask+0x84>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d021      	beq.n	80069ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800697e:	1d3a      	adds	r2, r7, #4
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f7f9 fe1b 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	9202      	str	r2, [sp, #8]
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	2302      	movs	r3, #2
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	460a      	mov	r2, r1
 80069a0:	4911      	ldr	r1, [pc, #68]	@ (80069e8 <xTimerCreateTimerTask+0x88>)
 80069a2:	4812      	ldr	r0, [pc, #72]	@ (80069ec <xTimerCreateTimerTask+0x8c>)
 80069a4:	f7fe fefc 	bl	80057a0 <xTaskCreateStatic>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4a11      	ldr	r2, [pc, #68]	@ (80069f0 <xTimerCreateTimerTask+0x90>)
 80069ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069ae:	4b10      	ldr	r3, [pc, #64]	@ (80069f0 <xTimerCreateTimerTask+0x90>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069b6:	2301      	movs	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	613b      	str	r3, [r7, #16]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000a7c 	.word	0x20000a7c
 80069e8:	08008bb0 	.word	0x08008bb0
 80069ec:	08006be9 	.word	0x08006be9
 80069f0:	20000a80 	.word	0x20000a80

080069f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006a02:	2028      	movs	r0, #40	@ 0x28
 8006a04:	f000 fdea 	bl	80075dc <pvPortMalloc>
 8006a08:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f805 	bl	8006a36 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006a2c:	697b      	ldr	r3, [r7, #20]
	}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01e      	beq.n	8006aa6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006a68:	f000 fad6 	bl	8007018 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	3304      	adds	r3, #4
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fd fffb 	bl	8004a84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	623b      	str	r3, [r7, #32]
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ae0:	4b19      	ldr	r3, [pc, #100]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02a      	beq.n	8006b3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	dc18      	bgt.n	8006b2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006afa:	f7ff fc35 	bl	8006368 <xTaskGetSchedulerState>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d109      	bne.n	8006b18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b04:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	f107 0114 	add.w	r1, r7, #20
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b10:	f7fe f98e 	bl	8004e30 <xQueueGenericSend>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b16:	e012      	b.n	8006b3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	f107 0114 	add.w	r1, r7, #20
 8006b20:	2300      	movs	r3, #0
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7fe f984 	bl	8004e30 <xQueueGenericSend>
 8006b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b2a:	e008      	b.n	8006b3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b2c:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <xTimerGenericCommand+0x98>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	f107 0114 	add.w	r1, r7, #20
 8006b34:	2300      	movs	r3, #0
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	f7fe fa7c 	bl	8005034 <xQueueGenericSendFromISR>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	@ 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20000a7c 	.word	0x20000a7c

08006b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b56:	4b23      	ldr	r3, [pc, #140]	@ (8006be4 <prvProcessExpiredTimer+0x98>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd fff7 	bl	8004b58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d023      	beq.n	8006bc0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	18d1      	adds	r1, r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	6978      	ldr	r0, [r7, #20]
 8006b86:	f000 f8d5 	bl	8006d34 <prvInsertTimerInActiveList>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d020      	beq.n	8006bd2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b90:	2300      	movs	r3, #0
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	6978      	ldr	r0, [r7, #20]
 8006b9c:	f7ff ff88 	bl	8006ab0 <xTimerGenericCommand>
 8006ba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d114      	bne.n	8006bd2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	4798      	blx	r3
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000a74 	.word	0x20000a74

08006be8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f859 	bl	8006cac <prvGetNextExpireTime>
 8006bfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f805 	bl	8006c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c06:	f000 f8d7 	bl	8006db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c0a:	bf00      	nop
 8006c0c:	e7f0      	b.n	8006bf0 <prvTimerTask+0x8>
	...

08006c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c1a:	f7fe ffc1 	bl	8005ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f866 	bl	8006cf4 <prvSampleTimeNow>
 8006c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d130      	bne.n	8006c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d806      	bhi.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c3e:	f7fe ffbd 	bl	8005bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff81 	bl	8006b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c4a:	e024      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c52:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <prvProcessTimerOrBlockTask+0x90>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <prvProcessTimerOrBlockTask+0x50>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <prvProcessTimerOrBlockTask+0x52>
 8006c60:	2300      	movs	r3, #0
 8006c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <prvProcessTimerOrBlockTask+0x94>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7fe fd61 	bl	8005738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c76:	f7fe ffa1 	bl	8005bbc <xTaskResumeAll>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c80:	4b09      	ldr	r3, [pc, #36]	@ (8006ca8 <prvProcessTimerOrBlockTask+0x98>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
}
 8006c90:	e001      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c92:	f7fe ff93 	bl	8005bbc <xTaskResumeAll>
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000a78 	.word	0x20000a78
 8006ca4:	20000a7c 	.word	0x20000a7c
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <prvGetNextExpireTime+0x16>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	e000      	b.n	8006cc4 <prvGetNextExpireTime+0x18>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cd0:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	e001      	b.n	8006ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000a74 	.word	0x20000a74

08006cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cfc:	f7fe fffc 	bl	8005cf8 <xTaskGetTickCount>
 8006d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <prvSampleTimeNow+0x3c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d205      	bcs.n	8006d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d0c:	f000 f91e 	bl	8006f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	@ (8006d30 <prvSampleTimeNow+0x3c>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d24:	68fb      	ldr	r3, [r7, #12]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000a84 	.word	0x20000a84

08006d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d812      	bhi.n	8006d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d302      	bcc.n	8006d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e01b      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d6e:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <prvInsertTimerInActiveList+0x7c>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fd feb4 	bl	8004ae6 <vListInsert>
 8006d7e:	e012      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d206      	bcs.n	8006d96 <prvInsertTimerInActiveList+0x62>
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e007      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d96:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <prvInsertTimerInActiveList+0x80>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fd fea0 	bl	8004ae6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000a78 	.word	0x20000a78
 8006db4:	20000a74 	.word	0x20000a74

08006db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	@ 0x30
 8006dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dbe:	e0b2      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f2c0 80af 	blt.w	8006f26 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd febd 	bl	8004b58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff ff87 	bl	8006cf4 <prvSampleTimeNow>
 8006de6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b09      	cmp	r3, #9
 8006dec:	f200 8098 	bhi.w	8006f20 <prvProcessReceivedCommands+0x168>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <prvProcessReceivedCommands+0x40>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e97 	.word	0x08006e97
 8006e08:	08006eab 	.word	0x08006eab
 8006e0c:	08006ef7 	.word	0x08006ef7
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e21 	.word	0x08006e21
 8006e18:	08006e97 	.word	0x08006e97
 8006e1c:	08006eab 	.word	0x08006eab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	18d1      	adds	r1, r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a3a      	ldr	r2, [r7, #32]
 8006e3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e40:	f7ff ff78 	bl	8006d34 <prvInsertTimerInActiveList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d06c      	beq.n	8006f24 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d061      	beq.n	8006f24 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	441a      	add	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e72:	f7ff fe1d 	bl	8006ab0 <xTimerGenericCommand>
 8006e76:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d152      	bne.n	8006f24 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61bb      	str	r3, [r7, #24]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006ea8:	e03d      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	617b      	str	r3, [r7, #20]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	18d1      	adds	r1, r2, r3
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ef0:	f7ff ff20 	bl	8006d34 <prvInsertTimerInActiveList>
					break;
 8006ef4:	e017      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8006f04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f06:	f000 fc37 	bl	8007778 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f0a:	e00c      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006f1e:	e002      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <prvProcessReceivedCommands+0x16e>
					break;
 8006f24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f26:	4b08      	ldr	r3, [pc, #32]	@ (8006f48 <prvProcessReceivedCommands+0x190>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f107 0108 	add.w	r1, r7, #8
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe f91d 	bl	8005170 <xQueueReceive>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af41 	bne.w	8006dc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3728      	adds	r7, #40	@ 0x28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000a7c 	.word	0x20000a7c

08006f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f52:	e049      	b.n	8006fe8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f54:	4b2e      	ldr	r3, [pc, #184]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fd fdf3 	bl	8004b58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02f      	beq.n	8006fe8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d90e      	bls.n	8006fb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fd fd98 	bl	8004ae6 <vListInsert>
 8006fb6:	e017      	b.n	8006fe8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fd74 	bl	8006ab0 <xTimerGenericCommand>
 8006fc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10b      	bne.n	8006fe8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	603b      	str	r3, [r7, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fe8:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1b0      	bne.n	8006f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ff2:	4b07      	ldr	r3, [pc, #28]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <prvSwitchTimerLists+0xc8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a04      	ldr	r2, [pc, #16]	@ (8007010 <prvSwitchTimerLists+0xc4>)
 8006ffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007000:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <prvSwitchTimerLists+0xc8>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6013      	str	r3, [r2, #0]
}
 8007006:	bf00      	nop
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000a74 	.word	0x20000a74
 8007014:	20000a78 	.word	0x20000a78

08007018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800701e:	f000 f9bb 	bl	8007398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007022:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d120      	bne.n	800706c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800702a:	4814      	ldr	r0, [pc, #80]	@ (800707c <prvCheckForValidListAndQueue+0x64>)
 800702c:	f7fd fd0a 	bl	8004a44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007030:	4813      	ldr	r0, [pc, #76]	@ (8007080 <prvCheckForValidListAndQueue+0x68>)
 8007032:	f7fd fd07 	bl	8004a44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007036:	4b13      	ldr	r3, [pc, #76]	@ (8007084 <prvCheckForValidListAndQueue+0x6c>)
 8007038:	4a10      	ldr	r2, [pc, #64]	@ (800707c <prvCheckForValidListAndQueue+0x64>)
 800703a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800703c:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <prvCheckForValidListAndQueue+0x70>)
 800703e:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <prvCheckForValidListAndQueue+0x68>)
 8007040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007042:	2300      	movs	r3, #0
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <prvCheckForValidListAndQueue+0x74>)
 8007048:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <prvCheckForValidListAndQueue+0x78>)
 800704a:	210c      	movs	r1, #12
 800704c:	200a      	movs	r0, #10
 800704e:	f7fd fe17 	bl	8004c80 <xQueueGenericCreateStatic>
 8007052:	4603      	mov	r3, r0
 8007054:	4a08      	ldr	r2, [pc, #32]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007058:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007060:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <prvCheckForValidListAndQueue+0x60>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	490b      	ldr	r1, [pc, #44]	@ (8007094 <prvCheckForValidListAndQueue+0x7c>)
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fb3c 	bl	80056e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800706c:	f000 f9c6 	bl	80073fc <vPortExitCritical>
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000a7c 	.word	0x20000a7c
 800707c:	20000a4c 	.word	0x20000a4c
 8007080:	20000a60 	.word	0x20000a60
 8007084:	20000a74 	.word	0x20000a74
 8007088:	20000a78 	.word	0x20000a78
 800708c:	20000b00 	.word	0x20000b00
 8007090:	20000a88 	.word	0x20000a88
 8007094:	08008bb8 	.word	0x08008bb8

08007098 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <xTimerIsTimerActive+0x2a>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60fb      	str	r3, [r7, #12]
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80070c2:	f000 f969 	bl	8007398 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e001      	b.n	80070de <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f000 f98d 	bl	80073fc <vPortExitCritical>

	return xReturn;
 80070e2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	60fb      	str	r3, [r7, #12]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007116:	f000 f93f 	bl	8007398 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007120:	f000 f96c 	bl	80073fc <vPortExitCritical>

	return pvReturn;
 8007124:	693b      	ldr	r3, [r7, #16]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3b04      	subs	r3, #4
 8007140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3b04      	subs	r3, #4
 800714e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3b04      	subs	r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007160:	4a0c      	ldr	r2, [pc, #48]	@ (8007194 <pxPortInitialiseStack+0x64>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b14      	subs	r3, #20
 800716a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b04      	subs	r3, #4
 8007176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f06f 0202 	mvn.w	r2, #2
 800717e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3b20      	subs	r3, #32
 8007184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	08007199 	.word	0x08007199

08007198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071a2:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <prvTaskExitError+0x58>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d00b      	beq.n	80071c4 <prvTaskExitError+0x2c>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <prvTaskExitError+0x28>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	60bb      	str	r3, [r7, #8]
}
 80071d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071d8:	bf00      	nop
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0fc      	beq.n	80071da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000018 	.word	0x20000018
	...

08007200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007200:	4b07      	ldr	r3, [pc, #28]	@ (8007220 <pxCurrentTCBConst2>)
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	6808      	ldr	r0, [r1, #0]
 8007206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	f380 8809 	msr	PSP, r0
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8811 	msr	BASEPRI, r0
 800721a:	4770      	bx	lr
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst2>:
 8007220:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007228:	4808      	ldr	r0, [pc, #32]	@ (800724c <prvPortStartFirstTask+0x24>)
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f380 8808 	msr	MSP, r0
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8814 	msr	CONTROL, r0
 800723a:	b662      	cpsie	i
 800723c:	b661      	cpsie	f
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	df00      	svc	0
 8007248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800724a:	bf00      	nop
 800724c:	e000ed08 	.word	0xe000ed08

08007250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007256:	4b47      	ldr	r3, [pc, #284]	@ (8007374 <xPortStartScheduler+0x124>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a47      	ldr	r2, [pc, #284]	@ (8007378 <xPortStartScheduler+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10b      	bne.n	8007278 <xPortStartScheduler+0x28>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	613b      	str	r3, [r7, #16]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007278:	4b3e      	ldr	r3, [pc, #248]	@ (8007374 <xPortStartScheduler+0x124>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3f      	ldr	r2, [pc, #252]	@ (800737c <xPortStartScheduler+0x12c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10b      	bne.n	800729a <xPortStartScheduler+0x4a>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800729a:	4b39      	ldr	r3, [pc, #228]	@ (8007380 <xPortStartScheduler+0x130>)
 800729c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	22ff      	movs	r2, #255	@ 0xff
 80072aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	4b31      	ldr	r3, [pc, #196]	@ (8007384 <xPortStartScheduler+0x134>)
 80072c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072c2:	4b31      	ldr	r3, [pc, #196]	@ (8007388 <xPortStartScheduler+0x138>)
 80072c4:	2207      	movs	r2, #7
 80072c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072c8:	e009      	b.n	80072de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80072ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007388 <xPortStartScheduler+0x138>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <xPortStartScheduler+0x138>)
 80072d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b80      	cmp	r3, #128	@ 0x80
 80072e8:	d0ef      	beq.n	80072ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072ea:	4b27      	ldr	r3, [pc, #156]	@ (8007388 <xPortStartScheduler+0x138>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f1c3 0307 	rsb	r3, r3, #7
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d00b      	beq.n	800730e <xPortStartScheduler+0xbe>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60bb      	str	r3, [r7, #8]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800730e:	4b1e      	ldr	r3, [pc, #120]	@ (8007388 <xPortStartScheduler+0x138>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	021b      	lsls	r3, r3, #8
 8007314:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <xPortStartScheduler+0x138>)
 8007316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007318:	4b1b      	ldr	r3, [pc, #108]	@ (8007388 <xPortStartScheduler+0x138>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007320:	4a19      	ldr	r2, [pc, #100]	@ (8007388 <xPortStartScheduler+0x138>)
 8007322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800732c:	4b17      	ldr	r3, [pc, #92]	@ (800738c <xPortStartScheduler+0x13c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a16      	ldr	r2, [pc, #88]	@ (800738c <xPortStartScheduler+0x13c>)
 8007332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007338:	4b14      	ldr	r3, [pc, #80]	@ (800738c <xPortStartScheduler+0x13c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a13      	ldr	r2, [pc, #76]	@ (800738c <xPortStartScheduler+0x13c>)
 800733e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007344:	f000 f8da 	bl	80074fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007348:	4b11      	ldr	r3, [pc, #68]	@ (8007390 <xPortStartScheduler+0x140>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800734e:	f000 f8f9 	bl	8007544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007352:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <xPortStartScheduler+0x144>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0f      	ldr	r2, [pc, #60]	@ (8007394 <xPortStartScheduler+0x144>)
 8007358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800735c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800735e:	f7ff ff63 	bl	8007228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007362:	f7fe fd93 	bl	8005e8c <vTaskSwitchContext>
	prvTaskExitError();
 8007366:	f7ff ff17 	bl	8007198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000ed00 	.word	0xe000ed00
 8007378:	410fc271 	.word	0x410fc271
 800737c:	410fc270 	.word	0x410fc270
 8007380:	e000e400 	.word	0xe000e400
 8007384:	20000b48 	.word	0x20000b48
 8007388:	20000b4c 	.word	0x20000b4c
 800738c:	e000ed20 	.word	0xe000ed20
 8007390:	20000018 	.word	0x20000018
 8007394:	e000ef34 	.word	0xe000ef34

08007398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073b2:	4b10      	ldr	r3, [pc, #64]	@ (80073f4 <vPortEnterCritical+0x5c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	4a0e      	ldr	r2, [pc, #56]	@ (80073f4 <vPortEnterCritical+0x5c>)
 80073ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <vPortEnterCritical+0x5c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d110      	bne.n	80073e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073c4:	4b0c      	ldr	r3, [pc, #48]	@ (80073f8 <vPortEnterCritical+0x60>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	603b      	str	r3, [r7, #0]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <vPortEnterCritical+0x4a>
	}
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000018 	.word	0x20000018
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <vPortExitCritical+0x50>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <vPortExitCritical+0x26>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	607b      	str	r3, [r7, #4]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007422:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <vPortExitCritical+0x50>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3b01      	subs	r3, #1
 8007428:	4a08      	ldr	r2, [pc, #32]	@ (800744c <vPortExitCritical+0x50>)
 800742a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <vPortExitCritical+0x50>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <vPortExitCritical+0x44>
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000018 	.word	0x20000018

08007450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007450:	f3ef 8009 	mrs	r0, PSP
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <pxCurrentTCBConst>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f01e 0f10 	tst.w	lr, #16
 8007460:	bf08      	it	eq
 8007462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007474:	f380 8811 	msr	BASEPRI, r0
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f7fe fd04 	bl	8005e8c <vTaskSwitchContext>
 8007484:	f04f 0000 	mov.w	r0, #0
 8007488:	f380 8811 	msr	BASEPRI, r0
 800748c:	bc09      	pop	{r0, r3}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	f01e 0f10 	tst.w	lr, #16
 800749a:	bf08      	it	eq
 800749c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074a0:	f380 8809 	msr	PSP, r0
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst>:
 80074b0:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	607b      	str	r3, [r7, #4]
}
 80074d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074d2:	f7fe fc21 	bl	8005d18 <xTaskIncrementTick>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <xPortSysTickHandler+0x40>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007500:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007506:	4b0b      	ldr	r3, [pc, #44]	@ (8007534 <vPortSetupTimerInterrupt+0x38>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <vPortSetupTimerInterrupt+0x3c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a0a      	ldr	r2, [pc, #40]	@ (800753c <vPortSetupTimerInterrupt+0x40>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	099b      	lsrs	r3, r3, #6
 8007518:	4a09      	ldr	r2, [pc, #36]	@ (8007540 <vPortSetupTimerInterrupt+0x44>)
 800751a:	3b01      	subs	r3, #1
 800751c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800751e:	4b04      	ldr	r3, [pc, #16]	@ (8007530 <vPortSetupTimerInterrupt+0x34>)
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	e000e010 	.word	0xe000e010
 8007534:	e000e018 	.word	0xe000e018
 8007538:	20000008 	.word	0x20000008
 800753c:	10624dd3 	.word	0x10624dd3
 8007540:	e000e014 	.word	0xe000e014

08007544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007554 <vPortEnableVFP+0x10>
 8007548:	6801      	ldr	r1, [r0, #0]
 800754a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800754e:	6001      	str	r1, [r0, #0]
 8007550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007552:	bf00      	nop
 8007554:	e000ed88 	.word	0xe000ed88

08007558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800755e:	f3ef 8305 	mrs	r3, IPSR
 8007562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b0f      	cmp	r3, #15
 8007568:	d915      	bls.n	8007596 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800756a:	4a18      	ldr	r2, [pc, #96]	@ (80075cc <vPortValidateInterruptPriority+0x74>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007574:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <vPortValidateInterruptPriority+0x78>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	7afa      	ldrb	r2, [r7, #11]
 800757a:	429a      	cmp	r2, r3
 800757c:	d20b      	bcs.n	8007596 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <vPortValidateInterruptPriority+0x7c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800759e:	4b0e      	ldr	r3, [pc, #56]	@ (80075d8 <vPortValidateInterruptPriority+0x80>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d90b      	bls.n	80075be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	603b      	str	r3, [r7, #0]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <vPortValidateInterruptPriority+0x62>
	}
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	e000e3f0 	.word	0xe000e3f0
 80075d0:	20000b48 	.word	0x20000b48
 80075d4:	e000ed0c 	.word	0xe000ed0c
 80075d8:	20000b4c 	.word	0x20000b4c

080075dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	@ 0x28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075e8:	f7fe fada 	bl	8005ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007760 <pvPortMalloc+0x184>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075f4:	f000 f924 	bl	8007840 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007764 <pvPortMalloc+0x188>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	f040 8095 	bne.w	8007730 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01e      	beq.n	800764a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4413      	add	r3, r2
 8007612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f023 0307 	bic.w	r3, r3, #7
 8007624:	3308      	adds	r3, #8
 8007626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <pvPortMalloc+0x6e>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	617b      	str	r3, [r7, #20]
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	e7fd      	b.n	8007646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d06f      	beq.n	8007730 <pvPortMalloc+0x154>
 8007650:	4b45      	ldr	r3, [pc, #276]	@ (8007768 <pvPortMalloc+0x18c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d86a      	bhi.n	8007730 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800765a:	4b44      	ldr	r3, [pc, #272]	@ (800776c <pvPortMalloc+0x190>)
 800765c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800765e:	4b43      	ldr	r3, [pc, #268]	@ (800776c <pvPortMalloc+0x190>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007664:	e004      	b.n	8007670 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	d903      	bls.n	8007682 <pvPortMalloc+0xa6>
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f1      	bne.n	8007666 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007682:	4b37      	ldr	r3, [pc, #220]	@ (8007760 <pvPortMalloc+0x184>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007688:	429a      	cmp	r2, r3
 800768a:	d051      	beq.n	8007730 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2208      	movs	r2, #8
 8007692:	4413      	add	r3, r2
 8007694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	1ad2      	subs	r2, r2, r3
 80076a6:	2308      	movs	r3, #8
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d920      	bls.n	80076f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <pvPortMalloc+0xfc>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	613b      	str	r3, [r7, #16]
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076ea:	69b8      	ldr	r0, [r7, #24]
 80076ec:	f000 f90a 	bl	8007904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007768 <pvPortMalloc+0x18c>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007768 <pvPortMalloc+0x18c>)
 80076fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007768 <pvPortMalloc+0x18c>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b1b      	ldr	r3, [pc, #108]	@ (8007770 <pvPortMalloc+0x194>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d203      	bcs.n	8007712 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800770a:	4b17      	ldr	r3, [pc, #92]	@ (8007768 <pvPortMalloc+0x18c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <pvPortMalloc+0x194>)
 8007710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	4b13      	ldr	r3, [pc, #76]	@ (8007764 <pvPortMalloc+0x188>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	431a      	orrs	r2, r3
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007726:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <pvPortMalloc+0x198>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3301      	adds	r3, #1
 800772c:	4a11      	ldr	r2, [pc, #68]	@ (8007774 <pvPortMalloc+0x198>)
 800772e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007730:	f7fe fa44 	bl	8005bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <pvPortMalloc+0x17a>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60fb      	str	r3, [r7, #12]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <pvPortMalloc+0x176>
	return pvReturn;
 8007756:	69fb      	ldr	r3, [r7, #28]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3728      	adds	r7, #40	@ 0x28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20005978 	.word	0x20005978
 8007764:	2000598c 	.word	0x2000598c
 8007768:	2000597c 	.word	0x2000597c
 800776c:	20005970 	.word	0x20005970
 8007770:	20005980 	.word	0x20005980
 8007774:	20005984 	.word	0x20005984

08007778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d04f      	beq.n	800782a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800778a:	2308      	movs	r3, #8
 800778c:	425b      	negs	r3, r3
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4413      	add	r3, r2
 8007792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	4b25      	ldr	r3, [pc, #148]	@ (8007834 <vPortFree+0xbc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10b      	bne.n	80077be <vPortFree+0x46>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60fb      	str	r3, [r7, #12]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <vPortFree+0x66>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	4b14      	ldr	r3, [pc, #80]	@ (8007834 <vPortFree+0xbc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01e      	beq.n	800782a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11a      	bne.n	800782a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <vPortFree+0xbc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	401a      	ands	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007804:	f7fe f9cc 	bl	8005ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <vPortFree+0xc0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4413      	add	r3, r2
 8007812:	4a09      	ldr	r2, [pc, #36]	@ (8007838 <vPortFree+0xc0>)
 8007814:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007816:	6938      	ldr	r0, [r7, #16]
 8007818:	f000 f874 	bl	8007904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <vPortFree+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	4a06      	ldr	r2, [pc, #24]	@ (800783c <vPortFree+0xc4>)
 8007824:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007826:	f7fe f9c9 	bl	8005bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800782a:	bf00      	nop
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	2000598c 	.word	0x2000598c
 8007838:	2000597c 	.word	0x2000597c
 800783c:	20005988 	.word	0x20005988

08007840 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007846:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800784a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800784c:	4b27      	ldr	r3, [pc, #156]	@ (80078ec <prvHeapInit+0xac>)
 800784e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00c      	beq.n	8007874 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3307      	adds	r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ec <prvHeapInit+0xac>)
 8007870:	4413      	add	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007878:	4a1d      	ldr	r2, [pc, #116]	@ (80078f0 <prvHeapInit+0xb0>)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800787e:	4b1c      	ldr	r3, [pc, #112]	@ (80078f0 <prvHeapInit+0xb0>)
 8007880:	2200      	movs	r2, #0
 8007882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	4413      	add	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800788c:	2208      	movs	r2, #8
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0307 	bic.w	r3, r3, #7
 800789a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a15      	ldr	r2, [pc, #84]	@ (80078f4 <prvHeapInit+0xb4>)
 80078a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078a2:	4b14      	ldr	r3, [pc, #80]	@ (80078f4 <prvHeapInit+0xb4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078aa:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <prvHeapInit+0xb4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c0:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <prvHeapInit+0xb4>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	4a0a      	ldr	r2, [pc, #40]	@ (80078f8 <prvHeapInit+0xb8>)
 80078ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	4a09      	ldr	r2, [pc, #36]	@ (80078fc <prvHeapInit+0xbc>)
 80078d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078d8:	4b09      	ldr	r3, [pc, #36]	@ (8007900 <prvHeapInit+0xc0>)
 80078da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078de:	601a      	str	r2, [r3, #0]
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	20000b50 	.word	0x20000b50
 80078f0:	20005970 	.word	0x20005970
 80078f4:	20005978 	.word	0x20005978
 80078f8:	20005980 	.word	0x20005980
 80078fc:	2000597c 	.word	0x2000597c
 8007900:	2000598c 	.word	0x2000598c

08007904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800790c:	4b28      	ldr	r3, [pc, #160]	@ (80079b0 <prvInsertBlockIntoFreeList+0xac>)
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	e002      	b.n	8007918 <prvInsertBlockIntoFreeList+0x14>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d8f7      	bhi.n	8007912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d108      	bne.n	8007946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	441a      	add	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d118      	bne.n	800798c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b15      	ldr	r3, [pc, #84]	@ (80079b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d00d      	beq.n	8007982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	441a      	add	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	e008      	b.n	8007994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007982:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e003      	b.n	8007994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d002      	beq.n	80079a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	20005970 	.word	0x20005970
 80079b4:	20005978 	.word	0x20005978

080079b8 <std>:
 80079b8:	2300      	movs	r3, #0
 80079ba:	b510      	push	{r4, lr}
 80079bc:	4604      	mov	r4, r0
 80079be:	e9c0 3300 	strd	r3, r3, [r0]
 80079c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079c6:	6083      	str	r3, [r0, #8]
 80079c8:	8181      	strh	r1, [r0, #12]
 80079ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80079cc:	81c2      	strh	r2, [r0, #14]
 80079ce:	6183      	str	r3, [r0, #24]
 80079d0:	4619      	mov	r1, r3
 80079d2:	2208      	movs	r2, #8
 80079d4:	305c      	adds	r0, #92	@ 0x5c
 80079d6:	f000 f906 	bl	8007be6 <memset>
 80079da:	4b0d      	ldr	r3, [pc, #52]	@ (8007a10 <std+0x58>)
 80079dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80079de:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <std+0x5c>)
 80079e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <std+0x60>)
 80079e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079e6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a1c <std+0x64>)
 80079e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80079ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007a20 <std+0x68>)
 80079ec:	6224      	str	r4, [r4, #32]
 80079ee:	429c      	cmp	r4, r3
 80079f0:	d006      	beq.n	8007a00 <std+0x48>
 80079f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079f6:	4294      	cmp	r4, r2
 80079f8:	d002      	beq.n	8007a00 <std+0x48>
 80079fa:	33d0      	adds	r3, #208	@ 0xd0
 80079fc:	429c      	cmp	r4, r3
 80079fe:	d105      	bne.n	8007a0c <std+0x54>
 8007a00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a08:	f000 b966 	b.w	8007cd8 <__retarget_lock_init_recursive>
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	bf00      	nop
 8007a10:	08007b61 	.word	0x08007b61
 8007a14:	08007b83 	.word	0x08007b83
 8007a18:	08007bbb 	.word	0x08007bbb
 8007a1c:	08007bdf 	.word	0x08007bdf
 8007a20:	20005990 	.word	0x20005990

08007a24 <stdio_exit_handler>:
 8007a24:	4a02      	ldr	r2, [pc, #8]	@ (8007a30 <stdio_exit_handler+0xc>)
 8007a26:	4903      	ldr	r1, [pc, #12]	@ (8007a34 <stdio_exit_handler+0x10>)
 8007a28:	4803      	ldr	r0, [pc, #12]	@ (8007a38 <stdio_exit_handler+0x14>)
 8007a2a:	f000 b869 	b.w	8007b00 <_fwalk_sglue>
 8007a2e:	bf00      	nop
 8007a30:	2000001c 	.word	0x2000001c
 8007a34:	08008595 	.word	0x08008595
 8007a38:	2000002c 	.word	0x2000002c

08007a3c <cleanup_stdio>:
 8007a3c:	6841      	ldr	r1, [r0, #4]
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <cleanup_stdio+0x34>)
 8007a40:	4299      	cmp	r1, r3
 8007a42:	b510      	push	{r4, lr}
 8007a44:	4604      	mov	r4, r0
 8007a46:	d001      	beq.n	8007a4c <cleanup_stdio+0x10>
 8007a48:	f000 fda4 	bl	8008594 <_fflush_r>
 8007a4c:	68a1      	ldr	r1, [r4, #8]
 8007a4e:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <cleanup_stdio+0x38>)
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <cleanup_stdio+0x1e>
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 fd9d 	bl	8008594 <_fflush_r>
 8007a5a:	68e1      	ldr	r1, [r4, #12]
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <cleanup_stdio+0x3c>)
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	d004      	beq.n	8007a6c <cleanup_stdio+0x30>
 8007a62:	4620      	mov	r0, r4
 8007a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a68:	f000 bd94 	b.w	8008594 <_fflush_r>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	20005990 	.word	0x20005990
 8007a74:	200059f8 	.word	0x200059f8
 8007a78:	20005a60 	.word	0x20005a60

08007a7c <global_stdio_init.part.0>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <global_stdio_init.part.0+0x30>)
 8007a80:	4c0b      	ldr	r4, [pc, #44]	@ (8007ab0 <global_stdio_init.part.0+0x34>)
 8007a82:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab4 <global_stdio_init.part.0+0x38>)
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	4620      	mov	r0, r4
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2104      	movs	r1, #4
 8007a8c:	f7ff ff94 	bl	80079b8 <std>
 8007a90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a94:	2201      	movs	r2, #1
 8007a96:	2109      	movs	r1, #9
 8007a98:	f7ff ff8e 	bl	80079b8 <std>
 8007a9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa6:	2112      	movs	r1, #18
 8007aa8:	f7ff bf86 	b.w	80079b8 <std>
 8007aac:	20005ac8 	.word	0x20005ac8
 8007ab0:	20005990 	.word	0x20005990
 8007ab4:	08007a25 	.word	0x08007a25

08007ab8 <__sfp_lock_acquire>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	@ (8007ac0 <__sfp_lock_acquire+0x8>)
 8007aba:	f000 b90e 	b.w	8007cda <__retarget_lock_acquire_recursive>
 8007abe:	bf00      	nop
 8007ac0:	20005ad1 	.word	0x20005ad1

08007ac4 <__sfp_lock_release>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	@ (8007acc <__sfp_lock_release+0x8>)
 8007ac6:	f000 b909 	b.w	8007cdc <__retarget_lock_release_recursive>
 8007aca:	bf00      	nop
 8007acc:	20005ad1 	.word	0x20005ad1

08007ad0 <__sinit>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	f7ff fff0 	bl	8007ab8 <__sfp_lock_acquire>
 8007ad8:	6a23      	ldr	r3, [r4, #32]
 8007ada:	b11b      	cbz	r3, 8007ae4 <__sinit+0x14>
 8007adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ae0:	f7ff bff0 	b.w	8007ac4 <__sfp_lock_release>
 8007ae4:	4b04      	ldr	r3, [pc, #16]	@ (8007af8 <__sinit+0x28>)
 8007ae6:	6223      	str	r3, [r4, #32]
 8007ae8:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <__sinit+0x2c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1f5      	bne.n	8007adc <__sinit+0xc>
 8007af0:	f7ff ffc4 	bl	8007a7c <global_stdio_init.part.0>
 8007af4:	e7f2      	b.n	8007adc <__sinit+0xc>
 8007af6:	bf00      	nop
 8007af8:	08007a3d 	.word	0x08007a3d
 8007afc:	20005ac8 	.word	0x20005ac8

08007b00 <_fwalk_sglue>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4607      	mov	r7, r0
 8007b06:	4688      	mov	r8, r1
 8007b08:	4614      	mov	r4, r2
 8007b0a:	2600      	movs	r6, #0
 8007b0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b10:	f1b9 0901 	subs.w	r9, r9, #1
 8007b14:	d505      	bpl.n	8007b22 <_fwalk_sglue+0x22>
 8007b16:	6824      	ldr	r4, [r4, #0]
 8007b18:	2c00      	cmp	r4, #0
 8007b1a:	d1f7      	bne.n	8007b0c <_fwalk_sglue+0xc>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d907      	bls.n	8007b38 <_fwalk_sglue+0x38>
 8007b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	d003      	beq.n	8007b38 <_fwalk_sglue+0x38>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c0      	blx	r8
 8007b36:	4306      	orrs	r6, r0
 8007b38:	3568      	adds	r5, #104	@ 0x68
 8007b3a:	e7e9      	b.n	8007b10 <_fwalk_sglue+0x10>

08007b3c <iprintf>:
 8007b3c:	b40f      	push	{r0, r1, r2, r3}
 8007b3e:	b507      	push	{r0, r1, r2, lr}
 8007b40:	4906      	ldr	r1, [pc, #24]	@ (8007b5c <iprintf+0x20>)
 8007b42:	ab04      	add	r3, sp, #16
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b4a:	6881      	ldr	r1, [r0, #8]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	f000 f9f7 	bl	8007f40 <_vfiprintf_r>
 8007b52:	b003      	add	sp, #12
 8007b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b58:	b004      	add	sp, #16
 8007b5a:	4770      	bx	lr
 8007b5c:	20000028 	.word	0x20000028

08007b60 <__sread>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	f000 f868 	bl	8007c3c <_read_r>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	bfab      	itete	ge
 8007b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b72:	89a3      	ldrhlt	r3, [r4, #12]
 8007b74:	181b      	addge	r3, r3, r0
 8007b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b7a:	bfac      	ite	ge
 8007b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b7e:	81a3      	strhlt	r3, [r4, #12]
 8007b80:	bd10      	pop	{r4, pc}

08007b82 <__swrite>:
 8007b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b86:	461f      	mov	r7, r3
 8007b88:	898b      	ldrh	r3, [r1, #12]
 8007b8a:	05db      	lsls	r3, r3, #23
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4616      	mov	r6, r2
 8007b92:	d505      	bpl.n	8007ba0 <__swrite+0x1e>
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	2302      	movs	r3, #2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f000 f83c 	bl	8007c18 <_lseek_r>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007baa:	81a3      	strh	r3, [r4, #12]
 8007bac:	4632      	mov	r2, r6
 8007bae:	463b      	mov	r3, r7
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	f000 b853 	b.w	8007c60 <_write_r>

08007bba <__sseek>:
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc2:	f000 f829 	bl	8007c18 <_lseek_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	bf15      	itete	ne
 8007bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bd6:	81a3      	strheq	r3, [r4, #12]
 8007bd8:	bf18      	it	ne
 8007bda:	81a3      	strhne	r3, [r4, #12]
 8007bdc:	bd10      	pop	{r4, pc}

08007bde <__sclose>:
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 b809 	b.w	8007bf8 <_close_r>

08007be6 <memset>:
 8007be6:	4402      	add	r2, r0
 8007be8:	4603      	mov	r3, r0
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d100      	bne.n	8007bf0 <memset+0xa>
 8007bee:	4770      	bx	lr
 8007bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf4:	e7f9      	b.n	8007bea <memset+0x4>
	...

08007bf8 <_close_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	@ (8007c14 <_close_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 fb89 	bl	800131a <_close>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_close_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_close_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20005acc 	.word	0x20005acc

08007c18 <_lseek_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	@ (8007c38 <_lseek_r+0x20>)
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7f9 fb9e 	bl	8001368 <_lseek>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_lseek_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_lseek_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	20005acc 	.word	0x20005acc

08007c3c <_read_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	@ (8007c5c <_read_r+0x20>)
 8007c40:	4604      	mov	r4, r0
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	2200      	movs	r2, #0
 8007c48:	602a      	str	r2, [r5, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f7f9 fb2c 	bl	80012a8 <_read>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_read_r+0x1e>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_read_r+0x1e>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	20005acc 	.word	0x20005acc

08007c60 <_write_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	@ (8007c80 <_write_r+0x20>)
 8007c64:	4604      	mov	r4, r0
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	602a      	str	r2, [r5, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f7f9 fb37 	bl	80012e2 <_write>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_write_r+0x1e>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_write_r+0x1e>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20005acc 	.word	0x20005acc

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	@ (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000028 	.word	0x20000028

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	@ (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	@ (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f000 fdc6 	bl	8008834 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08008c14 	.word	0x08008c14
 8007ccc:	08008c14 	.word	0x08008c14
 8007cd0:	08008c14 	.word	0x08008c14
 8007cd4:	08008c18 	.word	0x08008c18

08007cd8 <__retarget_lock_init_recursive>:
 8007cd8:	4770      	bx	lr

08007cda <__retarget_lock_acquire_recursive>:
 8007cda:	4770      	bx	lr

08007cdc <__retarget_lock_release_recursive>:
 8007cdc:	4770      	bx	lr

08007cde <memcpy>:
 8007cde:	440a      	add	r2, r1
 8007ce0:	4291      	cmp	r1, r2
 8007ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce6:	d100      	bne.n	8007cea <memcpy+0xc>
 8007ce8:	4770      	bx	lr
 8007cea:	b510      	push	{r4, lr}
 8007cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cf4:	4291      	cmp	r1, r2
 8007cf6:	d1f9      	bne.n	8007cec <memcpy+0xe>
 8007cf8:	bd10      	pop	{r4, pc}
	...

08007cfc <_free_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4605      	mov	r5, r0
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d041      	beq.n	8007d88 <_free_r+0x8c>
 8007d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d08:	1f0c      	subs	r4, r1, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfb8      	it	lt
 8007d0e:	18e4      	addlt	r4, r4, r3
 8007d10:	f000 f8e0 	bl	8007ed4 <__malloc_lock>
 8007d14:	4a1d      	ldr	r2, [pc, #116]	@ (8007d8c <_free_r+0x90>)
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	b933      	cbnz	r3, 8007d28 <_free_r+0x2c>
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	6014      	str	r4, [r2, #0]
 8007d1e:	4628      	mov	r0, r5
 8007d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d24:	f000 b8dc 	b.w	8007ee0 <__malloc_unlock>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d908      	bls.n	8007d3e <_free_r+0x42>
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	1821      	adds	r1, r4, r0
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf01      	itttt	eq
 8007d34:	6819      	ldreq	r1, [r3, #0]
 8007d36:	685b      	ldreq	r3, [r3, #4]
 8007d38:	1809      	addeq	r1, r1, r0
 8007d3a:	6021      	streq	r1, [r4, #0]
 8007d3c:	e7ed      	b.n	8007d1a <_free_r+0x1e>
 8007d3e:	461a      	mov	r2, r3
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	b10b      	cbz	r3, 8007d48 <_free_r+0x4c>
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d9fa      	bls.n	8007d3e <_free_r+0x42>
 8007d48:	6811      	ldr	r1, [r2, #0]
 8007d4a:	1850      	adds	r0, r2, r1
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d10b      	bne.n	8007d68 <_free_r+0x6c>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	4401      	add	r1, r0
 8007d54:	1850      	adds	r0, r2, r1
 8007d56:	4283      	cmp	r3, r0
 8007d58:	6011      	str	r1, [r2, #0]
 8007d5a:	d1e0      	bne.n	8007d1e <_free_r+0x22>
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	6053      	str	r3, [r2, #4]
 8007d62:	4408      	add	r0, r1
 8007d64:	6010      	str	r0, [r2, #0]
 8007d66:	e7da      	b.n	8007d1e <_free_r+0x22>
 8007d68:	d902      	bls.n	8007d70 <_free_r+0x74>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	e7d6      	b.n	8007d1e <_free_r+0x22>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf04      	itt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	bf04      	itt	eq
 8007d80:	1809      	addeq	r1, r1, r0
 8007d82:	6021      	streq	r1, [r4, #0]
 8007d84:	6054      	str	r4, [r2, #4]
 8007d86:	e7ca      	b.n	8007d1e <_free_r+0x22>
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20005ad8 	.word	0x20005ad8

08007d90 <sbrk_aligned>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4e0f      	ldr	r6, [pc, #60]	@ (8007dd0 <sbrk_aligned+0x40>)
 8007d94:	460c      	mov	r4, r1
 8007d96:	6831      	ldr	r1, [r6, #0]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	b911      	cbnz	r1, 8007da2 <sbrk_aligned+0x12>
 8007d9c:	f000 fcb6 	bl	800870c <_sbrk_r>
 8007da0:	6030      	str	r0, [r6, #0]
 8007da2:	4621      	mov	r1, r4
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 fcb1 	bl	800870c <_sbrk_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d103      	bne.n	8007db6 <sbrk_aligned+0x26>
 8007dae:	f04f 34ff 	mov.w	r4, #4294967295
 8007db2:	4620      	mov	r0, r4
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	1cc4      	adds	r4, r0, #3
 8007db8:	f024 0403 	bic.w	r4, r4, #3
 8007dbc:	42a0      	cmp	r0, r4
 8007dbe:	d0f8      	beq.n	8007db2 <sbrk_aligned+0x22>
 8007dc0:	1a21      	subs	r1, r4, r0
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 fca2 	bl	800870c <_sbrk_r>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d1f2      	bne.n	8007db2 <sbrk_aligned+0x22>
 8007dcc:	e7ef      	b.n	8007dae <sbrk_aligned+0x1e>
 8007dce:	bf00      	nop
 8007dd0:	20005ad4 	.word	0x20005ad4

08007dd4 <_malloc_r>:
 8007dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	1ccd      	adds	r5, r1, #3
 8007dda:	f025 0503 	bic.w	r5, r5, #3
 8007dde:	3508      	adds	r5, #8
 8007de0:	2d0c      	cmp	r5, #12
 8007de2:	bf38      	it	cc
 8007de4:	250c      	movcc	r5, #12
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	4606      	mov	r6, r0
 8007dea:	db01      	blt.n	8007df0 <_malloc_r+0x1c>
 8007dec:	42a9      	cmp	r1, r5
 8007dee:	d904      	bls.n	8007dfa <_malloc_r+0x26>
 8007df0:	230c      	movs	r3, #12
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ed0 <_malloc_r+0xfc>
 8007dfe:	f000 f869 	bl	8007ed4 <__malloc_lock>
 8007e02:	f8d8 3000 	ldr.w	r3, [r8]
 8007e06:	461c      	mov	r4, r3
 8007e08:	bb44      	cbnz	r4, 8007e5c <_malloc_r+0x88>
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff ffbf 	bl	8007d90 <sbrk_aligned>
 8007e12:	1c43      	adds	r3, r0, #1
 8007e14:	4604      	mov	r4, r0
 8007e16:	d158      	bne.n	8007eca <_malloc_r+0xf6>
 8007e18:	f8d8 4000 	ldr.w	r4, [r8]
 8007e1c:	4627      	mov	r7, r4
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	d143      	bne.n	8007eaa <_malloc_r+0xd6>
 8007e22:	2c00      	cmp	r4, #0
 8007e24:	d04b      	beq.n	8007ebe <_malloc_r+0xea>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	eb04 0903 	add.w	r9, r4, r3
 8007e30:	f000 fc6c 	bl	800870c <_sbrk_r>
 8007e34:	4581      	cmp	r9, r0
 8007e36:	d142      	bne.n	8007ebe <_malloc_r+0xea>
 8007e38:	6821      	ldr	r1, [r4, #0]
 8007e3a:	1a6d      	subs	r5, r5, r1
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ffa6 	bl	8007d90 <sbrk_aligned>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d03a      	beq.n	8007ebe <_malloc_r+0xea>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	442b      	add	r3, r5
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	bb62      	cbnz	r2, 8007eb0 <_malloc_r+0xdc>
 8007e56:	f8c8 7000 	str.w	r7, [r8]
 8007e5a:	e00f      	b.n	8007e7c <_malloc_r+0xa8>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	1b52      	subs	r2, r2, r5
 8007e60:	d420      	bmi.n	8007ea4 <_malloc_r+0xd0>
 8007e62:	2a0b      	cmp	r2, #11
 8007e64:	d917      	bls.n	8007e96 <_malloc_r+0xc2>
 8007e66:	1961      	adds	r1, r4, r5
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	6025      	str	r5, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	6059      	strne	r1, [r3, #4]
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	bf08      	it	eq
 8007e74:	f8c8 1000 	streq.w	r1, [r8]
 8007e78:	5162      	str	r2, [r4, r5]
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f000 f82f 	bl	8007ee0 <__malloc_unlock>
 8007e82:	f104 000b 	add.w	r0, r4, #11
 8007e86:	1d23      	adds	r3, r4, #4
 8007e88:	f020 0007 	bic.w	r0, r0, #7
 8007e8c:	1ac2      	subs	r2, r0, r3
 8007e8e:	bf1c      	itt	ne
 8007e90:	1a1b      	subne	r3, r3, r0
 8007e92:	50a3      	strne	r3, [r4, r2]
 8007e94:	e7af      	b.n	8007df6 <_malloc_r+0x22>
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	bf0c      	ite	eq
 8007e9c:	f8c8 2000 	streq.w	r2, [r8]
 8007ea0:	605a      	strne	r2, [r3, #4]
 8007ea2:	e7eb      	b.n	8007e7c <_malloc_r+0xa8>
 8007ea4:	4623      	mov	r3, r4
 8007ea6:	6864      	ldr	r4, [r4, #4]
 8007ea8:	e7ae      	b.n	8007e08 <_malloc_r+0x34>
 8007eaa:	463c      	mov	r4, r7
 8007eac:	687f      	ldr	r7, [r7, #4]
 8007eae:	e7b6      	b.n	8007e1e <_malloc_r+0x4a>
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d1fb      	bne.n	8007eb0 <_malloc_r+0xdc>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	6053      	str	r3, [r2, #4]
 8007ebc:	e7de      	b.n	8007e7c <_malloc_r+0xa8>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	6033      	str	r3, [r6, #0]
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 f80c 	bl	8007ee0 <__malloc_unlock>
 8007ec8:	e794      	b.n	8007df4 <_malloc_r+0x20>
 8007eca:	6005      	str	r5, [r0, #0]
 8007ecc:	e7d6      	b.n	8007e7c <_malloc_r+0xa8>
 8007ece:	bf00      	nop
 8007ed0:	20005ad8 	.word	0x20005ad8

08007ed4 <__malloc_lock>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	@ (8007edc <__malloc_lock+0x8>)
 8007ed6:	f7ff bf00 	b.w	8007cda <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	20005ad0 	.word	0x20005ad0

08007ee0 <__malloc_unlock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	@ (8007ee8 <__malloc_unlock+0x8>)
 8007ee2:	f7ff befb 	b.w	8007cdc <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	20005ad0 	.word	0x20005ad0

08007eec <__sfputc_r>:
 8007eec:	6893      	ldr	r3, [r2, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	b410      	push	{r4}
 8007ef4:	6093      	str	r3, [r2, #8]
 8007ef6:	da08      	bge.n	8007f0a <__sfputc_r+0x1e>
 8007ef8:	6994      	ldr	r4, [r2, #24]
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	db01      	blt.n	8007f02 <__sfputc_r+0x16>
 8007efe:	290a      	cmp	r1, #10
 8007f00:	d103      	bne.n	8007f0a <__sfputc_r+0x1e>
 8007f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f06:	f000 bb6d 	b.w	80085e4 <__swbuf_r>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	1c58      	adds	r0, r3, #1
 8007f0e:	6010      	str	r0, [r2, #0]
 8007f10:	7019      	strb	r1, [r3, #0]
 8007f12:	4608      	mov	r0, r1
 8007f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <__sfputs_r>:
 8007f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	460f      	mov	r7, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	18d5      	adds	r5, r2, r3
 8007f24:	42ac      	cmp	r4, r5
 8007f26:	d101      	bne.n	8007f2c <__sfputs_r+0x12>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e007      	b.n	8007f3c <__sfputs_r+0x22>
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	463a      	mov	r2, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffda 	bl	8007eec <__sfputc_r>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d1f3      	bne.n	8007f24 <__sfputs_r+0xa>
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f40 <_vfiprintf_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	460d      	mov	r5, r1
 8007f46:	b09d      	sub	sp, #116	@ 0x74
 8007f48:	4614      	mov	r4, r2
 8007f4a:	4698      	mov	r8, r3
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	b118      	cbz	r0, 8007f58 <_vfiprintf_r+0x18>
 8007f50:	6a03      	ldr	r3, [r0, #32]
 8007f52:	b90b      	cbnz	r3, 8007f58 <_vfiprintf_r+0x18>
 8007f54:	f7ff fdbc 	bl	8007ad0 <__sinit>
 8007f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f5a:	07d9      	lsls	r1, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	059a      	lsls	r2, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f66:	f7ff feb8 	bl	8007cda <__retarget_lock_acquire_recursive>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	d501      	bpl.n	8007f74 <_vfiprintf_r+0x34>
 8007f70:	692b      	ldr	r3, [r5, #16]
 8007f72:	b99b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x5c>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 fb72 	bl	8008660 <__swsetup_r>
 8007f7c:	b170      	cbz	r0, 8007f9c <_vfiprintf_r+0x5c>
 8007f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f80:	07dc      	lsls	r4, r3, #31
 8007f82:	d504      	bpl.n	8007f8e <_vfiprintf_r+0x4e>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b01d      	add	sp, #116	@ 0x74
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	0598      	lsls	r0, r3, #22
 8007f92:	d4f7      	bmi.n	8007f84 <_vfiprintf_r+0x44>
 8007f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f96:	f7ff fea1 	bl	8007cdc <__retarget_lock_release_recursive>
 8007f9a:	e7f3      	b.n	8007f84 <_vfiprintf_r+0x44>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007faa:	2330      	movs	r3, #48	@ 0x30
 8007fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800815c <_vfiprintf_r+0x21c>
 8007fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fb4:	f04f 0901 	mov.w	r9, #1
 8007fb8:	4623      	mov	r3, r4
 8007fba:	469a      	mov	sl, r3
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_vfiprintf_r+0x86>
 8007fc2:	2a25      	cmp	r2, #37	@ 0x25
 8007fc4:	d1f9      	bne.n	8007fba <_vfiprintf_r+0x7a>
 8007fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fca:	d00b      	beq.n	8007fe4 <_vfiprintf_r+0xa4>
 8007fcc:	465b      	mov	r3, fp
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffa1 	bl	8007f1a <__sfputs_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f000 80a7 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe0:	445a      	add	r2, fp
 8007fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 809f 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008004:	931a      	str	r3, [sp, #104]	@ 0x68
 8008006:	4654      	mov	r4, sl
 8008008:	2205      	movs	r2, #5
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4853      	ldr	r0, [pc, #332]	@ (800815c <_vfiprintf_r+0x21c>)
 8008010:	f7f8 f8f6 	bl	8000200 <memchr>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	b9d8      	cbnz	r0, 8008050 <_vfiprintf_r+0x110>
 8008018:	06d1      	lsls	r1, r2, #27
 800801a:	bf44      	itt	mi
 800801c:	2320      	movmi	r3, #32
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008022:	0713      	lsls	r3, r2, #28
 8008024:	bf44      	itt	mi
 8008026:	232b      	movmi	r3, #43	@ 0x2b
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802c:	f89a 3000 	ldrb.w	r3, [sl]
 8008030:	2b2a      	cmp	r3, #42	@ 0x2a
 8008032:	d015      	beq.n	8008060 <_vfiprintf_r+0x120>
 8008034:	9a07      	ldr	r2, [sp, #28]
 8008036:	4654      	mov	r4, sl
 8008038:	2000      	movs	r0, #0
 800803a:	f04f 0c0a 	mov.w	ip, #10
 800803e:	4621      	mov	r1, r4
 8008040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008044:	3b30      	subs	r3, #48	@ 0x30
 8008046:	2b09      	cmp	r3, #9
 8008048:	d94b      	bls.n	80080e2 <_vfiprintf_r+0x1a2>
 800804a:	b1b0      	cbz	r0, 800807a <_vfiprintf_r+0x13a>
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	e014      	b.n	800807a <_vfiprintf_r+0x13a>
 8008050:	eba0 0308 	sub.w	r3, r0, r8
 8008054:	fa09 f303 	lsl.w	r3, r9, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	46a2      	mov	sl, r4
 800805e:	e7d2      	b.n	8008006 <_vfiprintf_r+0xc6>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d19      	adds	r1, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9103      	str	r1, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbb      	ittet	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	f042 0202 	orrlt.w	r2, r2, #2
 8008072:	9307      	strge	r3, [sp, #28]
 8008074:	9307      	strlt	r3, [sp, #28]
 8008076:	bfb8      	it	lt
 8008078:	9204      	strlt	r2, [sp, #16]
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b2e      	cmp	r3, #46	@ 0x2e
 800807e:	d10a      	bne.n	8008096 <_vfiprintf_r+0x156>
 8008080:	7863      	ldrb	r3, [r4, #1]
 8008082:	2b2a      	cmp	r3, #42	@ 0x2a
 8008084:	d132      	bne.n	80080ec <_vfiprintf_r+0x1ac>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d1a      	adds	r2, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9203      	str	r2, [sp, #12]
 800808e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008092:	3402      	adds	r4, #2
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800816c <_vfiprintf_r+0x22c>
 800809a:	7821      	ldrb	r1, [r4, #0]
 800809c:	2203      	movs	r2, #3
 800809e:	4650      	mov	r0, sl
 80080a0:	f7f8 f8ae 	bl	8000200 <memchr>
 80080a4:	b138      	cbz	r0, 80080b6 <_vfiprintf_r+0x176>
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	eba0 000a 	sub.w	r0, r0, sl
 80080ac:	2240      	movs	r2, #64	@ 0x40
 80080ae:	4082      	lsls	r2, r0
 80080b0:	4313      	orrs	r3, r2
 80080b2:	3401      	adds	r4, #1
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ba:	4829      	ldr	r0, [pc, #164]	@ (8008160 <_vfiprintf_r+0x220>)
 80080bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c0:	2206      	movs	r2, #6
 80080c2:	f7f8 f89d 	bl	8000200 <memchr>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d03f      	beq.n	800814a <_vfiprintf_r+0x20a>
 80080ca:	4b26      	ldr	r3, [pc, #152]	@ (8008164 <_vfiprintf_r+0x224>)
 80080cc:	bb1b      	cbnz	r3, 8008116 <_vfiprintf_r+0x1d6>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	3308      	adds	r3, #8
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	443b      	add	r3, r7
 80080de:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e0:	e76a      	b.n	8007fb8 <_vfiprintf_r+0x78>
 80080e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e6:	460c      	mov	r4, r1
 80080e8:	2001      	movs	r0, #1
 80080ea:	e7a8      	b.n	800803e <_vfiprintf_r+0xfe>
 80080ec:	2300      	movs	r3, #0
 80080ee:	3401      	adds	r4, #1
 80080f0:	9305      	str	r3, [sp, #20]
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0c0a 	mov.w	ip, #10
 80080f8:	4620      	mov	r0, r4
 80080fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080fe:	3a30      	subs	r2, #48	@ 0x30
 8008100:	2a09      	cmp	r2, #9
 8008102:	d903      	bls.n	800810c <_vfiprintf_r+0x1cc>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0c6      	beq.n	8008096 <_vfiprintf_r+0x156>
 8008108:	9105      	str	r1, [sp, #20]
 800810a:	e7c4      	b.n	8008096 <_vfiprintf_r+0x156>
 800810c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008110:	4604      	mov	r4, r0
 8008112:	2301      	movs	r3, #1
 8008114:	e7f0      	b.n	80080f8 <_vfiprintf_r+0x1b8>
 8008116:	ab03      	add	r3, sp, #12
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	462a      	mov	r2, r5
 800811c:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <_vfiprintf_r+0x228>)
 800811e:	a904      	add	r1, sp, #16
 8008120:	4630      	mov	r0, r6
 8008122:	f3af 8000 	nop.w
 8008126:	4607      	mov	r7, r0
 8008128:	1c78      	adds	r0, r7, #1
 800812a:	d1d6      	bne.n	80080da <_vfiprintf_r+0x19a>
 800812c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d405      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d402      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800813a:	f7ff fdcf 	bl	8007cdc <__retarget_lock_release_recursive>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	065b      	lsls	r3, r3, #25
 8008142:	f53f af1f 	bmi.w	8007f84 <_vfiprintf_r+0x44>
 8008146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008148:	e71e      	b.n	8007f88 <_vfiprintf_r+0x48>
 800814a:	ab03      	add	r3, sp, #12
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	462a      	mov	r2, r5
 8008150:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <_vfiprintf_r+0x228>)
 8008152:	a904      	add	r1, sp, #16
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f879 	bl	800824c <_printf_i>
 800815a:	e7e4      	b.n	8008126 <_vfiprintf_r+0x1e6>
 800815c:	08008bd8 	.word	0x08008bd8
 8008160:	08008be2 	.word	0x08008be2
 8008164:	00000000 	.word	0x00000000
 8008168:	08007f1b 	.word	0x08007f1b
 800816c:	08008bde 	.word	0x08008bde

08008170 <_printf_common>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	4616      	mov	r6, r2
 8008176:	4698      	mov	r8, r3
 8008178:	688a      	ldr	r2, [r1, #8]
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008180:	4293      	cmp	r3, r2
 8008182:	bfb8      	it	lt
 8008184:	4613      	movlt	r3, r2
 8008186:	6033      	str	r3, [r6, #0]
 8008188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800818c:	4607      	mov	r7, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b10a      	cbz	r2, 8008196 <_printf_common+0x26>
 8008192:	3301      	adds	r3, #1
 8008194:	6033      	str	r3, [r6, #0]
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	0699      	lsls	r1, r3, #26
 800819a:	bf42      	ittt	mi
 800819c:	6833      	ldrmi	r3, [r6, #0]
 800819e:	3302      	addmi	r3, #2
 80081a0:	6033      	strmi	r3, [r6, #0]
 80081a2:	6825      	ldr	r5, [r4, #0]
 80081a4:	f015 0506 	ands.w	r5, r5, #6
 80081a8:	d106      	bne.n	80081b8 <_printf_common+0x48>
 80081aa:	f104 0a19 	add.w	sl, r4, #25
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	6832      	ldr	r2, [r6, #0]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dc26      	bgt.n	8008206 <_printf_common+0x96>
 80081b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081bc:	6822      	ldr	r2, [r4, #0]
 80081be:	3b00      	subs	r3, #0
 80081c0:	bf18      	it	ne
 80081c2:	2301      	movne	r3, #1
 80081c4:	0692      	lsls	r2, r2, #26
 80081c6:	d42b      	bmi.n	8008220 <_printf_common+0xb0>
 80081c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081cc:	4641      	mov	r1, r8
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c8      	blx	r9
 80081d2:	3001      	adds	r0, #1
 80081d4:	d01e      	beq.n	8008214 <_printf_common+0xa4>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	6922      	ldr	r2, [r4, #16]
 80081da:	f003 0306 	and.w	r3, r3, #6
 80081de:	2b04      	cmp	r3, #4
 80081e0:	bf02      	ittt	eq
 80081e2:	68e5      	ldreq	r5, [r4, #12]
 80081e4:	6833      	ldreq	r3, [r6, #0]
 80081e6:	1aed      	subeq	r5, r5, r3
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	bf0c      	ite	eq
 80081ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f0:	2500      	movne	r5, #0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bfc4      	itt	gt
 80081f6:	1a9b      	subgt	r3, r3, r2
 80081f8:	18ed      	addgt	r5, r5, r3
 80081fa:	2600      	movs	r6, #0
 80081fc:	341a      	adds	r4, #26
 80081fe:	42b5      	cmp	r5, r6
 8008200:	d11a      	bne.n	8008238 <_printf_common+0xc8>
 8008202:	2000      	movs	r0, #0
 8008204:	e008      	b.n	8008218 <_printf_common+0xa8>
 8008206:	2301      	movs	r3, #1
 8008208:	4652      	mov	r2, sl
 800820a:	4641      	mov	r1, r8
 800820c:	4638      	mov	r0, r7
 800820e:	47c8      	blx	r9
 8008210:	3001      	adds	r0, #1
 8008212:	d103      	bne.n	800821c <_printf_common+0xac>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821c:	3501      	adds	r5, #1
 800821e:	e7c6      	b.n	80081ae <_printf_common+0x3e>
 8008220:	18e1      	adds	r1, r4, r3
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	2030      	movs	r0, #48	@ 0x30
 8008226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800822a:	4422      	add	r2, r4
 800822c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008234:	3302      	adds	r3, #2
 8008236:	e7c7      	b.n	80081c8 <_printf_common+0x58>
 8008238:	2301      	movs	r3, #1
 800823a:	4622      	mov	r2, r4
 800823c:	4641      	mov	r1, r8
 800823e:	4638      	mov	r0, r7
 8008240:	47c8      	blx	r9
 8008242:	3001      	adds	r0, #1
 8008244:	d0e6      	beq.n	8008214 <_printf_common+0xa4>
 8008246:	3601      	adds	r6, #1
 8008248:	e7d9      	b.n	80081fe <_printf_common+0x8e>
	...

0800824c <_printf_i>:
 800824c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	7e0f      	ldrb	r7, [r1, #24]
 8008252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008254:	2f78      	cmp	r7, #120	@ 0x78
 8008256:	4691      	mov	r9, r2
 8008258:	4680      	mov	r8, r0
 800825a:	460c      	mov	r4, r1
 800825c:	469a      	mov	sl, r3
 800825e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008262:	d807      	bhi.n	8008274 <_printf_i+0x28>
 8008264:	2f62      	cmp	r7, #98	@ 0x62
 8008266:	d80a      	bhi.n	800827e <_printf_i+0x32>
 8008268:	2f00      	cmp	r7, #0
 800826a:	f000 80d2 	beq.w	8008412 <_printf_i+0x1c6>
 800826e:	2f58      	cmp	r7, #88	@ 0x58
 8008270:	f000 80b9 	beq.w	80083e6 <_printf_i+0x19a>
 8008274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800827c:	e03a      	b.n	80082f4 <_printf_i+0xa8>
 800827e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008282:	2b15      	cmp	r3, #21
 8008284:	d8f6      	bhi.n	8008274 <_printf_i+0x28>
 8008286:	a101      	add	r1, pc, #4	@ (adr r1, 800828c <_printf_i+0x40>)
 8008288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082f9 	.word	0x080082f9
 8008294:	08008275 	.word	0x08008275
 8008298:	08008275 	.word	0x08008275
 800829c:	08008275 	.word	0x08008275
 80082a0:	08008275 	.word	0x08008275
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	08008275 	.word	0x08008275
 80082ac:	08008275 	.word	0x08008275
 80082b0:	08008275 	.word	0x08008275
 80082b4:	08008275 	.word	0x08008275
 80082b8:	080083f9 	.word	0x080083f9
 80082bc:	08008323 	.word	0x08008323
 80082c0:	080083b3 	.word	0x080083b3
 80082c4:	08008275 	.word	0x08008275
 80082c8:	08008275 	.word	0x08008275
 80082cc:	0800841b 	.word	0x0800841b
 80082d0:	08008275 	.word	0x08008275
 80082d4:	08008323 	.word	0x08008323
 80082d8:	08008275 	.word	0x08008275
 80082dc:	08008275 	.word	0x08008275
 80082e0:	080083bb 	.word	0x080083bb
 80082e4:	6833      	ldr	r3, [r6, #0]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6032      	str	r2, [r6, #0]
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082f4:	2301      	movs	r3, #1
 80082f6:	e09d      	b.n	8008434 <_printf_i+0x1e8>
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	1d19      	adds	r1, r3, #4
 80082fe:	6031      	str	r1, [r6, #0]
 8008300:	0606      	lsls	r6, r0, #24
 8008302:	d501      	bpl.n	8008308 <_printf_i+0xbc>
 8008304:	681d      	ldr	r5, [r3, #0]
 8008306:	e003      	b.n	8008310 <_printf_i+0xc4>
 8008308:	0645      	lsls	r5, r0, #25
 800830a:	d5fb      	bpl.n	8008304 <_printf_i+0xb8>
 800830c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008310:	2d00      	cmp	r5, #0
 8008312:	da03      	bge.n	800831c <_printf_i+0xd0>
 8008314:	232d      	movs	r3, #45	@ 0x2d
 8008316:	426d      	negs	r5, r5
 8008318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831c:	4859      	ldr	r0, [pc, #356]	@ (8008484 <_printf_i+0x238>)
 800831e:	230a      	movs	r3, #10
 8008320:	e011      	b.n	8008346 <_printf_i+0xfa>
 8008322:	6821      	ldr	r1, [r4, #0]
 8008324:	6833      	ldr	r3, [r6, #0]
 8008326:	0608      	lsls	r0, r1, #24
 8008328:	f853 5b04 	ldr.w	r5, [r3], #4
 800832c:	d402      	bmi.n	8008334 <_printf_i+0xe8>
 800832e:	0649      	lsls	r1, r1, #25
 8008330:	bf48      	it	mi
 8008332:	b2ad      	uxthmi	r5, r5
 8008334:	2f6f      	cmp	r7, #111	@ 0x6f
 8008336:	4853      	ldr	r0, [pc, #332]	@ (8008484 <_printf_i+0x238>)
 8008338:	6033      	str	r3, [r6, #0]
 800833a:	bf14      	ite	ne
 800833c:	230a      	movne	r3, #10
 800833e:	2308      	moveq	r3, #8
 8008340:	2100      	movs	r1, #0
 8008342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008346:	6866      	ldr	r6, [r4, #4]
 8008348:	60a6      	str	r6, [r4, #8]
 800834a:	2e00      	cmp	r6, #0
 800834c:	bfa2      	ittt	ge
 800834e:	6821      	ldrge	r1, [r4, #0]
 8008350:	f021 0104 	bicge.w	r1, r1, #4
 8008354:	6021      	strge	r1, [r4, #0]
 8008356:	b90d      	cbnz	r5, 800835c <_printf_i+0x110>
 8008358:	2e00      	cmp	r6, #0
 800835a:	d04b      	beq.n	80083f4 <_printf_i+0x1a8>
 800835c:	4616      	mov	r6, r2
 800835e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008362:	fb03 5711 	mls	r7, r3, r1, r5
 8008366:	5dc7      	ldrb	r7, [r0, r7]
 8008368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800836c:	462f      	mov	r7, r5
 800836e:	42bb      	cmp	r3, r7
 8008370:	460d      	mov	r5, r1
 8008372:	d9f4      	bls.n	800835e <_printf_i+0x112>
 8008374:	2b08      	cmp	r3, #8
 8008376:	d10b      	bne.n	8008390 <_printf_i+0x144>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	07df      	lsls	r7, r3, #31
 800837c:	d508      	bpl.n	8008390 <_printf_i+0x144>
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	6861      	ldr	r1, [r4, #4]
 8008382:	4299      	cmp	r1, r3
 8008384:	bfde      	ittt	le
 8008386:	2330      	movle	r3, #48	@ 0x30
 8008388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800838c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008390:	1b92      	subs	r2, r2, r6
 8008392:	6122      	str	r2, [r4, #16]
 8008394:	f8cd a000 	str.w	sl, [sp]
 8008398:	464b      	mov	r3, r9
 800839a:	aa03      	add	r2, sp, #12
 800839c:	4621      	mov	r1, r4
 800839e:	4640      	mov	r0, r8
 80083a0:	f7ff fee6 	bl	8008170 <_printf_common>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d14a      	bne.n	800843e <_printf_i+0x1f2>
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	b004      	add	sp, #16
 80083ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	f043 0320 	orr.w	r3, r3, #32
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	4833      	ldr	r0, [pc, #204]	@ (8008488 <_printf_i+0x23c>)
 80083bc:	2778      	movs	r7, #120	@ 0x78
 80083be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	6831      	ldr	r1, [r6, #0]
 80083c6:	061f      	lsls	r7, r3, #24
 80083c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80083cc:	d402      	bmi.n	80083d4 <_printf_i+0x188>
 80083ce:	065f      	lsls	r7, r3, #25
 80083d0:	bf48      	it	mi
 80083d2:	b2ad      	uxthmi	r5, r5
 80083d4:	6031      	str	r1, [r6, #0]
 80083d6:	07d9      	lsls	r1, r3, #31
 80083d8:	bf44      	itt	mi
 80083da:	f043 0320 	orrmi.w	r3, r3, #32
 80083de:	6023      	strmi	r3, [r4, #0]
 80083e0:	b11d      	cbz	r5, 80083ea <_printf_i+0x19e>
 80083e2:	2310      	movs	r3, #16
 80083e4:	e7ac      	b.n	8008340 <_printf_i+0xf4>
 80083e6:	4827      	ldr	r0, [pc, #156]	@ (8008484 <_printf_i+0x238>)
 80083e8:	e7e9      	b.n	80083be <_printf_i+0x172>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	f023 0320 	bic.w	r3, r3, #32
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	e7f6      	b.n	80083e2 <_printf_i+0x196>
 80083f4:	4616      	mov	r6, r2
 80083f6:	e7bd      	b.n	8008374 <_printf_i+0x128>
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	6825      	ldr	r5, [r4, #0]
 80083fc:	6961      	ldr	r1, [r4, #20]
 80083fe:	1d18      	adds	r0, r3, #4
 8008400:	6030      	str	r0, [r6, #0]
 8008402:	062e      	lsls	r6, r5, #24
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	d501      	bpl.n	800840c <_printf_i+0x1c0>
 8008408:	6019      	str	r1, [r3, #0]
 800840a:	e002      	b.n	8008412 <_printf_i+0x1c6>
 800840c:	0668      	lsls	r0, r5, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0x1bc>
 8008410:	8019      	strh	r1, [r3, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	4616      	mov	r6, r2
 8008418:	e7bc      	b.n	8008394 <_printf_i+0x148>
 800841a:	6833      	ldr	r3, [r6, #0]
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	681e      	ldr	r6, [r3, #0]
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	2100      	movs	r1, #0
 8008426:	4630      	mov	r0, r6
 8008428:	f7f7 feea 	bl	8000200 <memchr>
 800842c:	b108      	cbz	r0, 8008432 <_printf_i+0x1e6>
 800842e:	1b80      	subs	r0, r0, r6
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	2300      	movs	r3, #0
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800843c:	e7aa      	b.n	8008394 <_printf_i+0x148>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	4632      	mov	r2, r6
 8008442:	4649      	mov	r1, r9
 8008444:	4640      	mov	r0, r8
 8008446:	47d0      	blx	sl
 8008448:	3001      	adds	r0, #1
 800844a:	d0ad      	beq.n	80083a8 <_printf_i+0x15c>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	d413      	bmi.n	800847a <_printf_i+0x22e>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	4298      	cmp	r0, r3
 8008458:	bfb8      	it	lt
 800845a:	4618      	movlt	r0, r3
 800845c:	e7a6      	b.n	80083ac <_printf_i+0x160>
 800845e:	2301      	movs	r3, #1
 8008460:	4632      	mov	r2, r6
 8008462:	4649      	mov	r1, r9
 8008464:	4640      	mov	r0, r8
 8008466:	47d0      	blx	sl
 8008468:	3001      	adds	r0, #1
 800846a:	d09d      	beq.n	80083a8 <_printf_i+0x15c>
 800846c:	3501      	adds	r5, #1
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	1a5b      	subs	r3, r3, r1
 8008474:	42ab      	cmp	r3, r5
 8008476:	dcf2      	bgt.n	800845e <_printf_i+0x212>
 8008478:	e7eb      	b.n	8008452 <_printf_i+0x206>
 800847a:	2500      	movs	r5, #0
 800847c:	f104 0619 	add.w	r6, r4, #25
 8008480:	e7f5      	b.n	800846e <_printf_i+0x222>
 8008482:	bf00      	nop
 8008484:	08008be9 	.word	0x08008be9
 8008488:	08008bfa 	.word	0x08008bfa

0800848c <__sflush_r>:
 800848c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008494:	0716      	lsls	r6, r2, #28
 8008496:	4605      	mov	r5, r0
 8008498:	460c      	mov	r4, r1
 800849a:	d454      	bmi.n	8008546 <__sflush_r+0xba>
 800849c:	684b      	ldr	r3, [r1, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dc02      	bgt.n	80084a8 <__sflush_r+0x1c>
 80084a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dd48      	ble.n	800853a <__sflush_r+0xae>
 80084a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d045      	beq.n	800853a <__sflush_r+0xae>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084b4:	682f      	ldr	r7, [r5, #0]
 80084b6:	6a21      	ldr	r1, [r4, #32]
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	d030      	beq.n	800851e <__sflush_r+0x92>
 80084bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	0759      	lsls	r1, r3, #29
 80084c2:	d505      	bpl.n	80084d0 <__sflush_r+0x44>
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	1ad2      	subs	r2, r2, r3
 80084c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084ca:	b10b      	cbz	r3, 80084d0 <__sflush_r+0x44>
 80084cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	2300      	movs	r3, #0
 80084d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b0      	blx	r6
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	d106      	bne.n	80084ee <__sflush_r+0x62>
 80084e0:	6829      	ldr	r1, [r5, #0]
 80084e2:	291d      	cmp	r1, #29
 80084e4:	d82b      	bhi.n	800853e <__sflush_r+0xb2>
 80084e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008590 <__sflush_r+0x104>)
 80084e8:	410a      	asrs	r2, r1
 80084ea:	07d6      	lsls	r6, r2, #31
 80084ec:	d427      	bmi.n	800853e <__sflush_r+0xb2>
 80084ee:	2200      	movs	r2, #0
 80084f0:	6062      	str	r2, [r4, #4]
 80084f2:	04d9      	lsls	r1, r3, #19
 80084f4:	6922      	ldr	r2, [r4, #16]
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	d504      	bpl.n	8008504 <__sflush_r+0x78>
 80084fa:	1c42      	adds	r2, r0, #1
 80084fc:	d101      	bne.n	8008502 <__sflush_r+0x76>
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	b903      	cbnz	r3, 8008504 <__sflush_r+0x78>
 8008502:	6560      	str	r0, [r4, #84]	@ 0x54
 8008504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	b1b9      	cbz	r1, 800853a <__sflush_r+0xae>
 800850a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800850e:	4299      	cmp	r1, r3
 8008510:	d002      	beq.n	8008518 <__sflush_r+0x8c>
 8008512:	4628      	mov	r0, r5
 8008514:	f7ff fbf2 	bl	8007cfc <_free_r>
 8008518:	2300      	movs	r3, #0
 800851a:	6363      	str	r3, [r4, #52]	@ 0x34
 800851c:	e00d      	b.n	800853a <__sflush_r+0xae>
 800851e:	2301      	movs	r3, #1
 8008520:	4628      	mov	r0, r5
 8008522:	47b0      	blx	r6
 8008524:	4602      	mov	r2, r0
 8008526:	1c50      	adds	r0, r2, #1
 8008528:	d1c9      	bne.n	80084be <__sflush_r+0x32>
 800852a:	682b      	ldr	r3, [r5, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0c6      	beq.n	80084be <__sflush_r+0x32>
 8008530:	2b1d      	cmp	r3, #29
 8008532:	d001      	beq.n	8008538 <__sflush_r+0xac>
 8008534:	2b16      	cmp	r3, #22
 8008536:	d11e      	bne.n	8008576 <__sflush_r+0xea>
 8008538:	602f      	str	r7, [r5, #0]
 800853a:	2000      	movs	r0, #0
 800853c:	e022      	b.n	8008584 <__sflush_r+0xf8>
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	b21b      	sxth	r3, r3
 8008544:	e01b      	b.n	800857e <__sflush_r+0xf2>
 8008546:	690f      	ldr	r7, [r1, #16]
 8008548:	2f00      	cmp	r7, #0
 800854a:	d0f6      	beq.n	800853a <__sflush_r+0xae>
 800854c:	0793      	lsls	r3, r2, #30
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	bf08      	it	eq
 8008552:	694b      	ldreq	r3, [r1, #20]
 8008554:	600f      	str	r7, [r1, #0]
 8008556:	bf18      	it	ne
 8008558:	2300      	movne	r3, #0
 800855a:	eba6 0807 	sub.w	r8, r6, r7
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	f1b8 0f00 	cmp.w	r8, #0
 8008564:	dde9      	ble.n	800853a <__sflush_r+0xae>
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800856a:	4643      	mov	r3, r8
 800856c:	463a      	mov	r2, r7
 800856e:	4628      	mov	r0, r5
 8008570:	47b0      	blx	r6
 8008572:	2800      	cmp	r0, #0
 8008574:	dc08      	bgt.n	8008588 <__sflush_r+0xfc>
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	4407      	add	r7, r0
 800858a:	eba8 0800 	sub.w	r8, r8, r0
 800858e:	e7e7      	b.n	8008560 <__sflush_r+0xd4>
 8008590:	dfbffffe 	.word	0xdfbffffe

08008594 <_fflush_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	690b      	ldr	r3, [r1, #16]
 8008598:	4605      	mov	r5, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b913      	cbnz	r3, 80085a4 <_fflush_r+0x10>
 800859e:	2500      	movs	r5, #0
 80085a0:	4628      	mov	r0, r5
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	b118      	cbz	r0, 80085ae <_fflush_r+0x1a>
 80085a6:	6a03      	ldr	r3, [r0, #32]
 80085a8:	b90b      	cbnz	r3, 80085ae <_fflush_r+0x1a>
 80085aa:	f7ff fa91 	bl	8007ad0 <__sinit>
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f3      	beq.n	800859e <_fflush_r+0xa>
 80085b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085b8:	07d0      	lsls	r0, r2, #31
 80085ba:	d404      	bmi.n	80085c6 <_fflush_r+0x32>
 80085bc:	0599      	lsls	r1, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_fflush_r+0x32>
 80085c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085c2:	f7ff fb8a 	bl	8007cda <__retarget_lock_acquire_recursive>
 80085c6:	4628      	mov	r0, r5
 80085c8:	4621      	mov	r1, r4
 80085ca:	f7ff ff5f 	bl	800848c <__sflush_r>
 80085ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085d0:	07da      	lsls	r2, r3, #31
 80085d2:	4605      	mov	r5, r0
 80085d4:	d4e4      	bmi.n	80085a0 <_fflush_r+0xc>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	059b      	lsls	r3, r3, #22
 80085da:	d4e1      	bmi.n	80085a0 <_fflush_r+0xc>
 80085dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085de:	f7ff fb7d 	bl	8007cdc <__retarget_lock_release_recursive>
 80085e2:	e7dd      	b.n	80085a0 <_fflush_r+0xc>

080085e4 <__swbuf_r>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	460e      	mov	r6, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	4605      	mov	r5, r0
 80085ec:	b118      	cbz	r0, 80085f6 <__swbuf_r+0x12>
 80085ee:	6a03      	ldr	r3, [r0, #32]
 80085f0:	b90b      	cbnz	r3, 80085f6 <__swbuf_r+0x12>
 80085f2:	f7ff fa6d 	bl	8007ad0 <__sinit>
 80085f6:	69a3      	ldr	r3, [r4, #24]
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	071a      	lsls	r2, r3, #28
 80085fe:	d501      	bpl.n	8008604 <__swbuf_r+0x20>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	b943      	cbnz	r3, 8008616 <__swbuf_r+0x32>
 8008604:	4621      	mov	r1, r4
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f82a 	bl	8008660 <__swsetup_r>
 800860c:	b118      	cbz	r0, 8008616 <__swbuf_r+0x32>
 800860e:	f04f 37ff 	mov.w	r7, #4294967295
 8008612:	4638      	mov	r0, r7
 8008614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	6922      	ldr	r2, [r4, #16]
 800861a:	1a98      	subs	r0, r3, r2
 800861c:	6963      	ldr	r3, [r4, #20]
 800861e:	b2f6      	uxtb	r6, r6
 8008620:	4283      	cmp	r3, r0
 8008622:	4637      	mov	r7, r6
 8008624:	dc05      	bgt.n	8008632 <__swbuf_r+0x4e>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff ffb3 	bl	8008594 <_fflush_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	d1ed      	bne.n	800860e <__swbuf_r+0x2a>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	3b01      	subs	r3, #1
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	701e      	strb	r6, [r3, #0]
 8008640:	6962      	ldr	r2, [r4, #20]
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d004      	beq.n	8008652 <__swbuf_r+0x6e>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d5e1      	bpl.n	8008612 <__swbuf_r+0x2e>
 800864e:	2e0a      	cmp	r6, #10
 8008650:	d1df      	bne.n	8008612 <__swbuf_r+0x2e>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f7ff ff9d 	bl	8008594 <_fflush_r>
 800865a:	2800      	cmp	r0, #0
 800865c:	d0d9      	beq.n	8008612 <__swbuf_r+0x2e>
 800865e:	e7d6      	b.n	800860e <__swbuf_r+0x2a>

08008660 <__swsetup_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4b29      	ldr	r3, [pc, #164]	@ (8008708 <__swsetup_r+0xa8>)
 8008664:	4605      	mov	r5, r0
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	460c      	mov	r4, r1
 800866a:	b118      	cbz	r0, 8008674 <__swsetup_r+0x14>
 800866c:	6a03      	ldr	r3, [r0, #32]
 800866e:	b90b      	cbnz	r3, 8008674 <__swsetup_r+0x14>
 8008670:	f7ff fa2e 	bl	8007ad0 <__sinit>
 8008674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008678:	0719      	lsls	r1, r3, #28
 800867a:	d422      	bmi.n	80086c2 <__swsetup_r+0x62>
 800867c:	06da      	lsls	r2, r3, #27
 800867e:	d407      	bmi.n	8008690 <__swsetup_r+0x30>
 8008680:	2209      	movs	r2, #9
 8008682:	602a      	str	r2, [r5, #0]
 8008684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e033      	b.n	80086f8 <__swsetup_r+0x98>
 8008690:	0758      	lsls	r0, r3, #29
 8008692:	d512      	bpl.n	80086ba <__swsetup_r+0x5a>
 8008694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008696:	b141      	cbz	r1, 80086aa <__swsetup_r+0x4a>
 8008698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800869c:	4299      	cmp	r1, r3
 800869e:	d002      	beq.n	80086a6 <__swsetup_r+0x46>
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7ff fb2b 	bl	8007cfc <_free_r>
 80086a6:	2300      	movs	r3, #0
 80086a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	2300      	movs	r3, #0
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f043 0308 	orr.w	r3, r3, #8
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	b94b      	cbnz	r3, 80086da <__swsetup_r+0x7a>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d0:	d003      	beq.n	80086da <__swsetup_r+0x7a>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f84f 	bl	8008778 <__smakebuf_r>
 80086da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086de:	f013 0201 	ands.w	r2, r3, #1
 80086e2:	d00a      	beq.n	80086fa <__swsetup_r+0x9a>
 80086e4:	2200      	movs	r2, #0
 80086e6:	60a2      	str	r2, [r4, #8]
 80086e8:	6962      	ldr	r2, [r4, #20]
 80086ea:	4252      	negs	r2, r2
 80086ec:	61a2      	str	r2, [r4, #24]
 80086ee:	6922      	ldr	r2, [r4, #16]
 80086f0:	b942      	cbnz	r2, 8008704 <__swsetup_r+0xa4>
 80086f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086f6:	d1c5      	bne.n	8008684 <__swsetup_r+0x24>
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	0799      	lsls	r1, r3, #30
 80086fc:	bf58      	it	pl
 80086fe:	6962      	ldrpl	r2, [r4, #20]
 8008700:	60a2      	str	r2, [r4, #8]
 8008702:	e7f4      	b.n	80086ee <__swsetup_r+0x8e>
 8008704:	2000      	movs	r0, #0
 8008706:	e7f7      	b.n	80086f8 <__swsetup_r+0x98>
 8008708:	20000028 	.word	0x20000028

0800870c <_sbrk_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d06      	ldr	r5, [pc, #24]	@ (8008728 <_sbrk_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	602b      	str	r3, [r5, #0]
 8008718:	f7f8 fe34 	bl	8001384 <_sbrk>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_sbrk_r+0x1a>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_sbrk_r+0x1a>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20005acc 	.word	0x20005acc

0800872c <__swhatbuf_r>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008734:	2900      	cmp	r1, #0
 8008736:	b096      	sub	sp, #88	@ 0x58
 8008738:	4615      	mov	r5, r2
 800873a:	461e      	mov	r6, r3
 800873c:	da0d      	bge.n	800875a <__swhatbuf_r+0x2e>
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008744:	f04f 0100 	mov.w	r1, #0
 8008748:	bf14      	ite	ne
 800874a:	2340      	movne	r3, #64	@ 0x40
 800874c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008750:	2000      	movs	r0, #0
 8008752:	6031      	str	r1, [r6, #0]
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	b016      	add	sp, #88	@ 0x58
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	466a      	mov	r2, sp
 800875c:	f000 f848 	bl	80087f0 <_fstat_r>
 8008760:	2800      	cmp	r0, #0
 8008762:	dbec      	blt.n	800873e <__swhatbuf_r+0x12>
 8008764:	9901      	ldr	r1, [sp, #4]
 8008766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800876a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800876e:	4259      	negs	r1, r3
 8008770:	4159      	adcs	r1, r3
 8008772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008776:	e7eb      	b.n	8008750 <__swhatbuf_r+0x24>

08008778 <__smakebuf_r>:
 8008778:	898b      	ldrh	r3, [r1, #12]
 800877a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800877c:	079d      	lsls	r5, r3, #30
 800877e:	4606      	mov	r6, r0
 8008780:	460c      	mov	r4, r1
 8008782:	d507      	bpl.n	8008794 <__smakebuf_r+0x1c>
 8008784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	2301      	movs	r3, #1
 800878e:	6163      	str	r3, [r4, #20]
 8008790:	b003      	add	sp, #12
 8008792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008794:	ab01      	add	r3, sp, #4
 8008796:	466a      	mov	r2, sp
 8008798:	f7ff ffc8 	bl	800872c <__swhatbuf_r>
 800879c:	9f00      	ldr	r7, [sp, #0]
 800879e:	4605      	mov	r5, r0
 80087a0:	4639      	mov	r1, r7
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff fb16 	bl	8007dd4 <_malloc_r>
 80087a8:	b948      	cbnz	r0, 80087be <__smakebuf_r+0x46>
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	059a      	lsls	r2, r3, #22
 80087b0:	d4ee      	bmi.n	8008790 <__smakebuf_r+0x18>
 80087b2:	f023 0303 	bic.w	r3, r3, #3
 80087b6:	f043 0302 	orr.w	r3, r3, #2
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	e7e2      	b.n	8008784 <__smakebuf_r+0xc>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	6020      	str	r0, [r4, #0]
 80087c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087c6:	81a3      	strh	r3, [r4, #12]
 80087c8:	9b01      	ldr	r3, [sp, #4]
 80087ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087ce:	b15b      	cbz	r3, 80087e8 <__smakebuf_r+0x70>
 80087d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f81d 	bl	8008814 <_isatty_r>
 80087da:	b128      	cbz	r0, 80087e8 <__smakebuf_r+0x70>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	f043 0301 	orr.w	r3, r3, #1
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	431d      	orrs	r5, r3
 80087ec:	81a5      	strh	r5, [r4, #12]
 80087ee:	e7cf      	b.n	8008790 <__smakebuf_r+0x18>

080087f0 <_fstat_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d07      	ldr	r5, [pc, #28]	@ (8008810 <_fstat_r+0x20>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	4611      	mov	r1, r2
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f7f8 fd98 	bl	8001332 <_fstat>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d102      	bne.n	800880c <_fstat_r+0x1c>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	b103      	cbz	r3, 800880c <_fstat_r+0x1c>
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	bd38      	pop	{r3, r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	20005acc 	.word	0x20005acc

08008814 <_isatty_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	@ (8008830 <_isatty_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f8 fd97 	bl	8001352 <_isatty>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_isatty_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_isatty_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20005acc 	.word	0x20005acc

08008834 <_init>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr

08008840 <_fini>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr
