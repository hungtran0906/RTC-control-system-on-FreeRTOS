
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800656c  0800656c  0000756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006660  08006660  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006660  08006660  00007660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006668  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000059c0  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005a2c  20005a2c  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f171  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e00  00000000  00000000  0001720d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  0001a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b06  00000000  00000000  0001ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002452b  00000000  00000000  0001b99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001430f  00000000  00000000  0003fec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d34c9  00000000  00000000  000541d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001276a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ac  00000000  00000000  001276e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0012b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006554 	.word	0x08006554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006554 	.word	0x08006554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000088 	.word	0x20000088
 8000590:	200000dc 	.word	0x200000dc

08000594 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <vApplicationGetTimerTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005b2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	200002dc 	.word	0x200002dc
 80005c4:	20000330 	.word	0x20000330

080005c8 <led_effect_stop>:

#include "led_effect.h"

extern TimerHandle_t handle_led_timer[4];
int led_effect_stop(int *n) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
	return xTimerStop(handle_led_timer[*n], 0);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <led_effect_stop+0x2c>)
 80005d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005da:	2300      	movs	r3, #0
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2200      	movs	r2, #0
 80005e2:	2103      	movs	r1, #3
 80005e4:	f004 f922 	bl	800482c <xTimerGenericCommand>
 80005e8:	4603      	mov	r3, r0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000080c 	.word	0x2000080c

080005f8 <led_effect>:
int led_effect(int *n) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
	led_effect_stop(n);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff ffe1 	bl	80005c8 <led_effect_stop>
	return xTimerStart(handle_led_timer[*n], 0);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <led_effect+0x38>)
 800060c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000610:	f003 fc20 	bl	8003e54 <xTaskGetTickCount>
 8000614:	4602      	mov	r2, r0
 8000616:	2300      	movs	r3, #0
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4620      	mov	r0, r4
 8000620:	f004 f904 	bl	800482c <xTimerGenericCommand>
 8000624:	4603      	mov	r3, r0

}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	bf00      	nop
 8000630:	2000080c 	.word	0x2000080c

08000634 <led_effect1>:

void led_effect1(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 800063a:	230c      	movs	r3, #12
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e010      	b.n	8000662 <led_effect1+0x2e>
		if (i % 2 == 0)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d108      	bne.n	800065c <led_effect1+0x28>
			HAL_GPIO_TogglePin(GPIOD, 1 << i);
 800064a:	2201      	movs	r2, #1
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	b29b      	uxth	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	4807      	ldr	r0, [pc, #28]	@ (8000674 <led_effect1+0x40>)
 8000658:	f001 f8af 	bl	80017ba <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	ddeb      	ble.n	8000640 <led_effect1+0xc>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020c00 	.word	0x40020c00

08000678 <led_effect2>:
void led_effect2(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 800067e:	230c      	movs	r3, #12
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e013      	b.n	80006ac <led_effect2+0x34>
		if (i % 2 == 1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	bfb8      	it	lt
 800068e:	425b      	neglt	r3, r3
 8000690:	2b01      	cmp	r3, #1
 8000692:	d108      	bne.n	80006a6 <led_effect2+0x2e>
			HAL_GPIO_TogglePin(GPIOD, 1 << i);
 8000694:	2201      	movs	r2, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	b29b      	uxth	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <led_effect2+0x44>)
 80006a2:	f001 f88a 	bl	80017ba <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b0f      	cmp	r3, #15
 80006b0:	dde8      	ble.n	8000684 <led_effect2+0xc>
	}
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020c00 	.word	0x40020c00

080006c0 <led_effect3>:
void led_effect3(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	for (int i = 12; i < 16; i++) {
 80006c6:	230c      	movs	r3, #12
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	e017      	b.n	80006fc <led_effect3+0x3c>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 80006cc:	2201      	movs	r2, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <led_effect3+0x4c>)
 80006da:	f001 f86e 	bl	80017ba <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 80006de:	2032      	movs	r0, #50	@ 0x32
 80006e0:	f000 fdac 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 80006e4:	2201      	movs	r2, #1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4806      	ldr	r0, [pc, #24]	@ (800070c <led_effect3+0x4c>)
 80006f2:	f001 f862 	bl	80017ba <HAL_GPIO_TogglePin>
	for (int i = 12; i < 16; i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	dde4      	ble.n	80006cc <led_effect3+0xc>

	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020c00 	.word	0x40020c00

08000710 <led_effect4>:
void led_effect4(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	for (int i = 15; i > 11; i--) {
 8000716:	230f      	movs	r3, #15
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e017      	b.n	800074c <led_effect4+0x3c>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 800071c:	2201      	movs	r2, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b29b      	uxth	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <led_effect4+0x4c>)
 800072a:	f001 f846 	bl	80017ba <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800072e:	2032      	movs	r0, #50	@ 0x32
 8000730:	f000 fd84 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, 1 << i);
 8000734:	2201      	movs	r2, #1
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	b29b      	uxth	r3, r3
 800073e:	4619      	mov	r1, r3
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <led_effect4+0x4c>)
 8000742:	f001 f83a 	bl	80017ba <HAL_GPIO_TogglePin>
	for (int i = 15; i > 11; i--) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3b01      	subs	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b0b      	cmp	r3, #11
 8000750:	dce4      	bgt.n	800071c <led_effect4+0xc>

	}
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020c00 	.word	0x40020c00

08000760 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b085      	sub	sp, #20
 8000764:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000766:	f000 fcf7 	bl	8001158 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800076a:	f000 f8a7 	bl	80008bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800076e:	f000 f9f9 	bl	8000b64 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000772:	f000 f90f 	bl	8000994 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000776:	f000 f93b 	bl	80009f0 <MX_I2C2_Init>
	MX_RTC_Init();
 800077a:	f000 f967 	bl	8000a4c <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	xTaskCreate(menu_task, "menu_task", 200, NULL, 2, &handle_menu_task);
 800077e:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <main+0x100>)
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2302      	movs	r3, #2
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2300      	movs	r3, #0
 8000788:	22c8      	movs	r2, #200	@ 0xc8
 800078a:	4936      	ldr	r1, [pc, #216]	@ (8000864 <main+0x104>)
 800078c:	4836      	ldr	r0, [pc, #216]	@ (8000868 <main+0x108>)
 800078e:	f003 f915 	bl	80039bc <xTaskCreate>
	xTaskCreate(cmd_handler_task, "cmd_task", 200, NULL, 2, &handle_cmd_task);
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <main+0x10c>)
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	22c8      	movs	r2, #200	@ 0xc8
 800079e:	4934      	ldr	r1, [pc, #208]	@ (8000870 <main+0x110>)
 80007a0:	4834      	ldr	r0, [pc, #208]	@ (8000874 <main+0x114>)
 80007a2:	f003 f90b 	bl	80039bc <xTaskCreate>
	xTaskCreate(print_task, "print_task", 200, NULL, 2, &handle_print_task);
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <main+0x118>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2302      	movs	r3, #2
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	22c8      	movs	r2, #200	@ 0xc8
 80007b2:	4932      	ldr	r1, [pc, #200]	@ (800087c <main+0x11c>)
 80007b4:	4832      	ldr	r0, [pc, #200]	@ (8000880 <main+0x120>)
 80007b6:	f003 f901 	bl	80039bc <xTaskCreate>
	xTaskCreate(led_task, "led_task", 200, NULL, 2, &handle_led_task);
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <main+0x124>)
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	22c8      	movs	r2, #200	@ 0xc8
 80007c6:	4930      	ldr	r1, [pc, #192]	@ (8000888 <main+0x128>)
 80007c8:	4830      	ldr	r0, [pc, #192]	@ (800088c <main+0x12c>)
 80007ca:	f003 f8f7 	bl	80039bc <xTaskCreate>
	xTaskCreate(rtc_task, "rtc_task", 200, NULL, 2, &handle_rtc_task);
 80007ce:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <main+0x130>)
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2302      	movs	r3, #2
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	22c8      	movs	r2, #200	@ 0xc8
 80007da:	492e      	ldr	r1, [pc, #184]	@ (8000894 <main+0x134>)
 80007dc:	482e      	ldr	r0, [pc, #184]	@ (8000898 <main+0x138>)
 80007de:	f003 f8ed 	bl	80039bc <xTaskCreate>

	q_data = xQueueCreate(10, sizeof(char));
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	200a      	movs	r0, #10
 80007e8:	f002 fc3d 	bl	8003066 <xQueueGenericCreate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a2b      	ldr	r2, [pc, #172]	@ (800089c <main+0x13c>)
 80007f0:	6013      	str	r3, [r2, #0]
	q_print = xQueueCreate(10, sizeof(size_t));
 80007f2:	2200      	movs	r2, #0
 80007f4:	2104      	movs	r1, #4
 80007f6:	200a      	movs	r0, #10
 80007f8:	f002 fc35 	bl	8003066 <xQueueGenericCreate>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a28      	ldr	r2, [pc, #160]	@ (80008a0 <main+0x140>)
 8000800:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e017      	b.n	8000838 <main+0xd8>
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(1000),
				pdTRUE, (void*) (i + 1), led_effect_callback);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3301      	adds	r3, #1
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(1000),
 800080c:	461a      	mov	r2, r3
 800080e:	687c      	ldr	r4, [r7, #4]
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <main+0x144>)
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800081c:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <main+0x148>)
 800081e:	f003 ffa7 	bl	8004770 <xTimerCreate>
 8000822:	4603      	mov	r3, r0
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <main+0x14c>)
 8000826:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		led_effect(&i);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fee3 	bl	80005f8 <led_effect>
	for (int i = 0; i < 4; i++) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3301      	adds	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	dde4      	ble.n	8000808 <main+0xa8>

	}
	rtc_timer = xTimerCreate("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE,
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <main+0x150>)
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800084a:	481a      	ldr	r0, [pc, #104]	@ (80008b4 <main+0x154>)
 800084c:	f003 ff90 	bl	8004770 <xTimerCreate>
 8000850:	4603      	mov	r3, r0
 8000852:	4a19      	ldr	r2, [pc, #100]	@ (80008b8 <main+0x158>)
 8000854:	6013      	str	r3, [r2, #0]
			NULL, rtc_report_callback);

	vTaskStartScheduler();
 8000856:	f003 f9e9 	bl	8003c2c <vTaskStartScheduler>
//  osKernelStart();
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <main+0xfa>
 800085e:	bf00      	nop
 8000860:	200007fc 	.word	0x200007fc
 8000864:	0800656c 	.word	0x0800656c
 8000868:	080010a1 	.word	0x080010a1
 800086c:	200007f8 	.word	0x200007f8
 8000870:	08006578 	.word	0x08006578
 8000874:	080010b5 	.word	0x080010b5
 8000878:	20000804 	.word	0x20000804
 800087c:	08006584 	.word	0x08006584
 8000880:	080010c9 	.word	0x080010c9
 8000884:	20000800 	.word	0x20000800
 8000888:	08006590 	.word	0x08006590
 800088c:	080010dd 	.word	0x080010dd
 8000890:	20000808 	.word	0x20000808
 8000894:	0800659c 	.word	0x0800659c
 8000898:	080010f1 	.word	0x080010f1
 800089c:	20000820 	.word	0x20000820
 80008a0:	20000824 	.word	0x20000824
 80008a4:	08000c41 	.word	0x08000c41
 80008a8:	080065a8 	.word	0x080065a8
 80008ac:	2000080c 	.word	0x2000080c
 80008b0:	08000c91 	.word	0x08000c91
 80008b4:	080065b4 	.word	0x080065b4
 80008b8:	2000081c 	.word	0x2000081c

080008bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	@ 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 f81b 	bl	8005906 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <SystemClock_Config+0xd0>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a28      	ldr	r2, [pc, #160]	@ (800098c <SystemClock_Config+0xd0>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f0:	4b26      	ldr	r3, [pc, #152]	@ (800098c <SystemClock_Config+0xd0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <SystemClock_Config+0xd4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <SystemClock_Config+0xd4>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <SystemClock_Config+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000918:	230a      	movs	r3, #10
 800091a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000934:	23a8      	movs	r3, #168	@ 0xa8
 8000936:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f897 	bl	8001a78 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x98>
		Error_Handler();
 8000950:	f000 f9a8 	bl	8000ca4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000960:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000964:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2105      	movs	r1, #5
 8000972:	4618      	mov	r0, r3
 8000974:	f001 faf8 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xc6>
		Error_Handler();
 800097e:	f000 f991 	bl	8000ca4 <Error_Handler>
	}
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	@ 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2C1_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <MX_I2C1_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_I2C1_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_I2C1_Init+0x50>)
 80009d2:	f000 ff0d 	bl	80017f0 <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80009dc:	f000 f962 	bl	8000ca4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000730 	.word	0x20000730
 80009e8:	40005400 	.word	0x40005400
 80009ec:	000186a0 	.word	0x000186a0

080009f0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2C2_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <MX_I2C2_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_I2C2_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_I2C2_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_I2C2_Init+0x50>)
 8000a2e:	f000 fedf 	bl	80017f0 <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000a38:	f000 f934 	bl	8000ca4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000784 	.word	0x20000784
 8000a44:	40005800 	.word	0x40005800
 8000a48:	000186a0 	.word	0x000186a0

08000a4c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	@ 0x40
 8000a50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000a52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000a66:	463b      	mov	r3, r7
 8000a68:	2228      	movs	r2, #40	@ 0x28
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 ff4a 	bl	8005906 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a74:	4a3a      	ldr	r2, [pc, #232]	@ (8000b60 <MX_RTC_Init+0x114>)
 8000a76:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a78:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a80:	227f      	movs	r2, #127	@ 0x7f
 8000a82:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a86:	22ff      	movs	r2, #255	@ 0xff
 8000a88:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a8a:	4b34      	ldr	r3, [pc, #208]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a90:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a96:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000a9c:	482f      	ldr	r0, [pc, #188]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000a9e:	f001 fd11 	bl	80024c4 <HAL_RTC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_RTC_Init+0x60>
		Error_Handler();
 8000aa8:	f000 f8fc 	bl	8000ca4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	sTime.Minutes = 0x0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	sTime.Seconds = 0x0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4823      	ldr	r0, [pc, #140]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000ad0:	f001 fd7b 	bl	80025ca <HAL_RTC_SetTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0x92>
		Error_Handler();
 8000ada:	f000 f8e3 	bl	8000ca4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sDate.Month = RTC_MONTH_JANUARY;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	sDate.Date = 0x1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	sDate.Year = 0x0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afa:	2201      	movs	r2, #1
 8000afc:	4619      	mov	r1, r3
 8000afe:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000b00:	f001 fe5b 	bl	80027ba <HAL_RTC_SetDate>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RTC_Init+0xc2>
		Error_Handler();
 8000b0a:	f000 f8cb 	bl	8000ca4 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_RTC_Init+0x110>)
 8000b46:	f001 ff0b 	bl	8002960 <HAL_RTC_SetAlarm>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_RTC_Init+0x108>
		Error_Handler();
 8000b50:	f000 f8a8 	bl	8000ca4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3740      	adds	r7, #64	@ 0x40
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200007d8 	.word	0x200007d8
 8000b60:	40002800 	.word	0x40002800

08000b64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a2d      	ldr	r2, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a18      	ldr	r2, [pc, #96]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <MX_GPIO_Init+0xd8>)
 8000c0e:	f000 fdbb 	bl	8001788 <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000c12:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_GPIO_Init+0xd8>)
 8000c2c:	f000 fc10 	bl	8001450 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	@ 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <led_effect_callback>:

/* USER CODE BEGIN 4 */
void led_effect_callback(TimerHandle_t xTimer) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	int id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f004 f8e3 	bl	8004e14 <pvTimerGetTimerID>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60fb      	str	r3, [r7, #12]

	switch (id) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d816      	bhi.n	8000c88 <led_effect_callback+0x48>
 8000c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c60 <led_effect_callback+0x20>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	08000c77 	.word	0x08000c77
 8000c68:	08000c7d 	.word	0x08000c7d
 8000c6c:	08000c83 	.word	0x08000c83
	case 1:
		led_effect1();
 8000c70:	f7ff fce0 	bl	8000634 <led_effect1>
		break;
 8000c74:	e008      	b.n	8000c88 <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000c76:	f7ff fcff 	bl	8000678 <led_effect2>
		break;
 8000c7a:	e005      	b.n	8000c88 <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000c7c:	f7ff fd20 	bl	80006c0 <led_effect3>
		break;
 8000c80:	e002      	b.n	8000c88 <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000c82:	f7ff fd45 	bl	8000710 <led_effect4>
		break;
 8000c86:	bf00      	nop

	}
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <rtc_report_callback>:
void rtc_report_callback(TimerHandle_t xTimer) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	show_time_data_itm();
 8000c98:	f000 f80a 	bl	8000cb0 <show_time_data_itm>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Error_Handler>:
//}
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <show_time_data_itm>:
 *  Created on: Sep 15, 2024
 *      Author: Acer
 */
#include "rtc.h"

void show_time_data_itm(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2204      	movs	r2, #4
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fe21 	bl	8005906 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2214      	movs	r2, #20
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fe1b 	bl	8005906 <memset>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4815      	ldr	r0, [pc, #84]	@ (8000d2c <show_time_data_itm+0x7c>)
 8000cd8:	f001 fd11 	bl	80026fe <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <show_time_data_itm+0x7c>)
 8000ce6:	f001 fdec 	bl	80028c2 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <show_time_data_itm+0x44>
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <show_time_data_itm+0x80>)
 8000cf2:	e000      	b.n	8000cf6 <show_time_data_itm+0x46>
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <show_time_data_itm+0x84>)
 8000cf6:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes,
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	461a      	mov	r2, r3
			rtc_time.Seconds, format);
 8000d00:	79bb      	ldrb	r3, [r7, #6]
	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes,
 8000d02:	4618      	mov	r0, r3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4603      	mov	r3, r0
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <show_time_data_itm+0x88>)
 8000d0c:	f004 fda6 	bl	800585c <iprintf>
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000d10:	7e7b      	ldrb	r3, [r7, #25]
 8000d12:	4619      	mov	r1, r3
 8000d14:	7ebb      	ldrb	r3, [r7, #26]
 8000d16:	461a      	mov	r2, r3
			2000 + rtc_date.Year);
 8000d18:	7efb      	ldrb	r3, [r7, #27]
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date,
 8000d1a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <show_time_data_itm+0x8c>)
 8000d20:	f004 fd9c 	bl	800585c <iprintf>
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200007d8 	.word	0x200007d8
 8000d30:	080065c8 	.word	0x080065c8
 8000d34:	080065cc 	.word	0x080065cc
 8000d38:	080065d0 	.word	0x080065d0
 8000d3c:	080065e4 	.word	0x080065e4

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210f      	movs	r1, #15
 8000d82:	f06f 0001 	mvn.w	r0, #1
 8000d86:	f000 fb3a 	bl	80013fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <HAL_I2C_MspInit+0xe8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12c      	bne.n	8000e14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	@ 0xc0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de6:	2304      	movs	r3, #4
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4825      	ldr	r0, [pc, #148]	@ (8000e88 <HAL_I2C_MspInit+0xf0>)
 8000df2:	f000 fb2d 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e12:	e031      	b.n	8000e78 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <HAL_I2C_MspInit+0xf4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	2312      	movs	r3, #18
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <HAL_I2C_MspInit+0xf0>)
 8000e58:	f000 fafa 	bl	8001450 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	@ 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40005800 	.word	0x40005800

08000e90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_RTC_MspInit+0x4c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d111      	bne.n	8000ed4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fa1e 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000eca:	f7ff feeb 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <HAL_RTC_MspInit+0x50>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40002800 	.word	0x40002800
 8000ee0:	42470e3c 	.word	0x42470e3c

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <NMI_Handler+0x4>

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f96d 	bl	80011fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f22:	f003 facf 	bl	80044c4 <xTaskGetSchedulerState>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d001      	beq.n	8000f30 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f2c:	f004 f954 	bl	80051d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf0      	blt.n	8000f46 <_read+0x12>
  }

  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e009      	b.n	8000f94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf1      	blt.n	8000f80 <_write+0x12>
  }
  return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_close>:

int _close(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fce:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_isatty>:

int _isatty(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	@ (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f004 fcb0 	bl	80059a4 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	20000828 	.word	0x20000828
 8001078:	20005a30 	.word	0x20005a30

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <menu_task>:
 *  Created on: Sep 18, 2024
 *      Author: User
 */
#include "main.h"
#include "task_handler.h"
void menu_task(void *parameter){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <cmd_handler_task>:
void cmd_handler_task(void *parameter){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <print_task>:
void print_task(void *paramter){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <led_task>:
void led_task(void *parameter){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <rtc_task>:
void rtc_task(void *parameter){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001108:	f7ff ffb8 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f004 fc3d 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fb13 	bl	8000760 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001148:	08006668 	.word	0x08006668
  ldr r2, =_sbss
 800114c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001150:	20005a2c 	.word	0x20005a2c

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f931 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fdd8 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f93b 	bl	8001436 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f911 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	2000082c 	.word	0x2000082c

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000082c 	.word	0x2000082c

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	@ (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	@ (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff47 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff5c 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffb0 	bl	80013a4 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	@ 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e16b      	b.n	8001744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	429a      	cmp	r2, r3
 8001486:	f040 815a 	bne.w	800173e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d005      	beq.n	80014a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d130      	bne.n	8001504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 0201 	and.w	r2, r3, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b03      	cmp	r3, #3
 800150e:	d017      	beq.n	8001540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d123      	bne.n	8001594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80b4 	beq.w	800173e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b60      	ldr	r3, [pc, #384]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a5f      	ldr	r2, [pc, #380]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <HAL_GPIO_Init+0x30c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001760 <HAL_GPIO_Init+0x310>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a52      	ldr	r2, [pc, #328]	@ (8001764 <HAL_GPIO_Init+0x314>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_GPIO_Init+0x226>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a51      	ldr	r2, [pc, #324]	@ (8001768 <HAL_GPIO_Init+0x318>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x222>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a50      	ldr	r2, [pc, #320]	@ (800176c <HAL_GPIO_Init+0x31c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x21e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4f      	ldr	r2, [pc, #316]	@ (8001770 <HAL_GPIO_Init+0x320>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x21a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4e      	ldr	r2, [pc, #312]	@ (8001774 <HAL_GPIO_Init+0x324>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x216>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4d      	ldr	r2, [pc, #308]	@ (8001778 <HAL_GPIO_Init+0x328>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x212>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4c      	ldr	r2, [pc, #304]	@ (800177c <HAL_GPIO_Init+0x32c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x20e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4b      	ldr	r2, [pc, #300]	@ (8001780 <HAL_GPIO_Init+0x330>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x20a>
 8001656:	2307      	movs	r3, #7
 8001658:	e00e      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800165a:	2308      	movs	r3, #8
 800165c:	e00c      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800165e:	2306      	movs	r3, #6
 8001660:	e00a      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001662:	2305      	movs	r3, #5
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001666:	2304      	movs	r3, #4
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x228>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x228>
 8001676:	2300      	movs	r3, #0
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	@ (8001760 <HAL_GPIO_Init+0x310>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a32      	ldr	r2, [pc, #200]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_GPIO_Init+0x334>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_GPIO_Init+0x334>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3301      	adds	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	f67f ae90 	bls.w	800146c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40013800 	.word	0x40013800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40021000 	.word	0x40021000
 8001778:	40021400 	.word	0x40021400
 800177c:	40021800 	.word	0x40021800
 8001780:	40021c00 	.word	0x40021c00
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a4:	e003      	b.n	80017ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	041a      	lsls	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	619a      	str	r2, [r3, #24]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	041a      	lsls	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	400b      	ands	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e12b      	b.n	8001a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fabe 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	@ 0x24
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001854:	f000 fd40 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8001858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a81      	ldr	r2, [pc, #516]	@ (8001a64 <HAL_I2C_Init+0x274>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d807      	bhi.n	8001874 <HAL_I2C_Init+0x84>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a80      	ldr	r2, [pc, #512]	@ (8001a68 <HAL_I2C_Init+0x278>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e006      	b.n	8001882 <HAL_I2C_Init+0x92>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a7d      	ldr	r2, [pc, #500]	@ (8001a6c <HAL_I2C_Init+0x27c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0e7      	b.n	8001a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4a78      	ldr	r2, [pc, #480]	@ (8001a70 <HAL_I2C_Init+0x280>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001a64 <HAL_I2C_Init+0x274>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d802      	bhi.n	80018c4 <HAL_I2C_Init+0xd4>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	e009      	b.n	80018d8 <HAL_I2C_Init+0xe8>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a69      	ldr	r2, [pc, #420]	@ (8001a74 <HAL_I2C_Init+0x284>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	3301      	adds	r3, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	430b      	orrs	r3, r1
 80018de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	495c      	ldr	r1, [pc, #368]	@ (8001a64 <HAL_I2C_Init+0x274>)
 80018f4:	428b      	cmp	r3, r1
 80018f6:	d819      	bhi.n	800192c <HAL_I2C_Init+0x13c>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fbb1 f3f3 	udiv	r3, r1, r3
 8001906:	1c59      	adds	r1, r3, #1
 8001908:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800190c:	400b      	ands	r3, r1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <HAL_I2C_Init+0x138>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e59      	subs	r1, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	e051      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 8001928:	2304      	movs	r3, #4
 800192a:	e04f      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d111      	bne.n	8001958 <HAL_I2C_Init+0x168>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e012      	b.n	800197e <HAL_I2C_Init+0x18e>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	0099      	lsls	r1, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x196>
 8001982:	2301      	movs	r3, #1
 8001984:	e022      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10e      	bne.n	80019ac <HAL_I2C_Init+0x1bc>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1e58      	subs	r0, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6859      	ldr	r1, [r3, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	440b      	add	r3, r1
 800199c:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019aa:	e00f      	b.n	80019cc <HAL_I2C_Init+0x1dc>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	0099      	lsls	r1, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6809      	ldr	r1, [r1, #0]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6911      	ldr	r1, [r2, #16]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68d2      	ldr	r2, [r2, #12]
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	000186a0 	.word	0x000186a0
 8001a68:	001e847f 	.word	0x001e847f
 8001a6c:	003d08ff 	.word	0x003d08ff
 8001a70:	431bde83 	.word	0x431bde83
 8001a74:	10624dd3 	.word	0x10624dd3

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e267      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d075      	beq.n	8001b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a96:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d00c      	beq.n	8001abc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d112      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b82      	ldr	r3, [pc, #520]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d05b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x108>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d157      	bne.n	8001b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e242      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x74>
 8001ade:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6f      	ldr	r2, [pc, #444]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001b10:	4b69      	ldr	r3, [pc, #420]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a68      	ldr	r2, [pc, #416]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb78 	bl	8001224 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb74 	bl	8001224 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e207      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xc0>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb64 	bl	8001224 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb60 	bl	8001224 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1f3      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b51      	ldr	r3, [pc, #324]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0xe8>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b44      	ldr	r3, [pc, #272]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b41      	ldr	r3, [pc, #260]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c7      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4937      	ldr	r1, [pc, #220]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb19 	bl	8001224 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fb15 	bl	8001224 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a8      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4925      	ldr	r1, [pc, #148]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <HAL_RCC_OscConfig+0x244>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff faf8 	bl	8001224 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff faf4 	bl	8001224 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e187      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d036      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff fad8 	bl	8001224 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fad4 	bl	8001224 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e167      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x200>
 8001c96:	e01b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_RCC_OscConfig+0x248>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fac1 	bl	8001224 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e00e      	b.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fabd 	bl	8001224 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d907      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e150      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470000 	.word	0x42470000
 8001cc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc4:	4b88      	ldr	r3, [pc, #544]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ea      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8097 	beq.w	8001e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b81      	ldr	r3, [pc, #516]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b77      	ldr	r3, [pc, #476]	@ (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b74      	ldr	r3, [pc, #464]	@ (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	@ (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fa7d 	bl	8001224 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff fa79 	bl	8001224 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e10c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b6a      	ldr	r3, [pc, #424]	@ (8001eec <HAL_RCC_OscConfig+0x474>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2ea>
 8001d54:	4b64      	ldr	r3, [pc, #400]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a63      	ldr	r2, [pc, #396]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x30c>
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d76:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x324>
 8001d84:	4b58      	ldr	r3, [pc, #352]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d88:	4a57      	ldr	r2, [pc, #348]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d90:	4b55      	ldr	r3, [pc, #340]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d94:	4a54      	ldr	r2, [pc, #336]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 0304 	bic.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fa3e 	bl	8001224 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff fa3a 	bl	8001224 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0cb      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ee      	beq.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fa28 	bl	8001224 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fa24 	bl	8001224 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0b5      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	4a38      	ldr	r2, [pc, #224]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a1 	beq.w	8001f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e16:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d05c      	beq.n	8001edc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d141      	bne.n	8001eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff f9f8 	bl	8001224 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f9f4 	bl	8001224 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e087      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	491b      	ldr	r1, [pc, #108]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f9cd 	bl	8001224 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f9c9 	bl	8001224 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e05c      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x416>
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_RCC_OscConfig+0x478>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f9b6 	bl	8001224 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f9b2 	bl	8001224 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e045      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e038      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d028      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d121      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d11a      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f24:	4013      	ands	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3a:	085b      	lsrs	r3, r3, #1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0cc      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b68      	ldr	r3, [pc, #416]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d90c      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b59      	ldr	r3, [pc, #356]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a58      	ldr	r2, [pc, #352]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	494d      	ldr	r1, [pc, #308]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d044      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d119      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b3f      	ldr	r3, [pc, #252]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e067      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4934      	ldr	r1, [pc, #208]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff f8e4 	bl	8001224 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff f8e0 	bl	8001224 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e04f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d20c      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4916      	ldr	r1, [pc, #88]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	490e      	ldr	r1, [pc, #56]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	490a      	ldr	r1, [pc, #40]	@ (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f844 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00
 8002124:	40023800 	.word	0x40023800
 8002128:	0800660c 	.word	0x0800660c
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b090      	sub	sp, #64	@ 0x40
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214c:	4b59      	ldr	r3, [pc, #356]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d00d      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x40>
 8002158:	2b08      	cmp	r3, #8
 800215a:	f200 80a1 	bhi.w	80022a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 8002162:	2b04      	cmp	r3, #4
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x3a>
 8002166:	e09b      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800216a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800216c:	e09b      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216e:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002170:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002172:	e098      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002174:	4b4f      	ldr	r3, [pc, #316]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800217e:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d028      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218a:	4b4a      	ldr	r3, [pc, #296]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	099b      	lsrs	r3, r3, #6
 8002190:	2200      	movs	r2, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	627a      	str	r2, [r7, #36]	@ 0x24
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800219c:	2100      	movs	r1, #0
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x188>)
 80021a0:	fb03 f201 	mul.w	r2, r3, r1
 80021a4:	2300      	movs	r3, #0
 80021a6:	fb00 f303 	mul.w	r3, r0, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	4a43      	ldr	r2, [pc, #268]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x188>)
 80021ae:	fba0 1202 	umull	r1, r2, r0, r2
 80021b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021b4:	460a      	mov	r2, r1
 80021b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ba:	4413      	add	r3, r2
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	2200      	movs	r2, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	61fa      	str	r2, [r7, #28]
 80021c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021ce:	f7fe f84f 	bl	8000270 <__aeabi_uldivmod>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4613      	mov	r3, r2
 80021d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021da:	e053      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021dc:	4b35      	ldr	r3, [pc, #212]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	2200      	movs	r2, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	617a      	str	r2, [r7, #20]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021ee:	f04f 0b00 	mov.w	fp, #0
 80021f2:	4652      	mov	r2, sl
 80021f4:	465b      	mov	r3, fp
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002204:	0150      	lsls	r0, r2, #5
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	ebb2 080a 	subs.w	r8, r2, sl
 800220e:	eb63 090b 	sbc.w	r9, r3, fp
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800221e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002222:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002226:	ebb2 0408 	subs.w	r4, r2, r8
 800222a:	eb63 0509 	sbc.w	r5, r3, r9
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	00eb      	lsls	r3, r5, #3
 8002238:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800223c:	00e2      	lsls	r2, r4, #3
 800223e:	4614      	mov	r4, r2
 8002240:	461d      	mov	r5, r3
 8002242:	eb14 030a 	adds.w	r3, r4, sl
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	eb45 030b 	adc.w	r3, r5, fp
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225a:	4629      	mov	r1, r5
 800225c:	028b      	lsls	r3, r1, #10
 800225e:	4621      	mov	r1, r4
 8002260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002264:	4621      	mov	r1, r4
 8002266:	028a      	lsls	r2, r1, #10
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226e:	2200      	movs	r2, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	60fa      	str	r2, [r7, #12]
 8002274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002278:	f7fd fffa 	bl	8000270 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4613      	mov	r3, r2
 8002282:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3740      	adds	r7, #64	@ 0x40
 80022ac:	46bd      	mov	sp, r7
 80022ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	017d7840 	.word	0x017d7840

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	0800661c 	.word	0x0800661c

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d035      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002328:	4b62      	ldr	r3, [pc, #392]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800232e:	f7fe ff79 	bl	8001224 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002336:	f7fe ff75 	bl	8001224 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0b0      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002348:	4b5b      	ldr	r3, [pc, #364]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	019a      	lsls	r2, r3, #6
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	4955      	ldr	r1, [pc, #340]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002368:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800236e:	f7fe ff59 	bl	8001224 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002376:	f7fe ff55 	bl	8001224 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e090      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002388:	4b4b      	ldr	r3, [pc, #300]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8083 	beq.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b44      	ldr	r3, [pc, #272]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023be:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3e      	ldr	r2, [pc, #248]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ca:	f7fe ff2b 	bl	8001224 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe ff27 	bl	8001224 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e062      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80023e4:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f0:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02f      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d028      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002416:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002418:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800241e:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800242a:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d114      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fef5 	bl	8001224 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fef1 	bl	8001224 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e02a      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002468:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800246c:	d10d      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800247e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002482:	490d      	ldr	r1, [pc, #52]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]
 8002488:	e005      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002490:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002494:	6093      	str	r3, [r2, #8]
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002498:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	4905      	ldr	r1, [pc, #20]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	42470068 	.word	0x42470068
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000
 80024c0:	42470e40 	.word	0x42470e40

080024c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e073      	b.n	80025c2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7f5b      	ldrb	r3, [r3, #29]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fcd0 	bl	8000e90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b10      	cmp	r3, #16
 8002502:	d055      	beq.n	80025b0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	22ca      	movs	r2, #202	@ 0xca
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2253      	movs	r2, #83	@ 0x53
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb73 	bl	8002c00 <RTC_EnterInitMode>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d12c      	bne.n	800257e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002536:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fb7a 	bl	8002c6e <RTC_ExitInitMode>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d110      	bne.n	80025a6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	22ff      	movs	r2, #255	@ 0xff
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80025ae:	e001      	b.n	80025b4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	7f1b      	ldrb	r3, [r3, #28]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RTC_SetTime+0x1c>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e087      	b.n	80026f6 <HAL_RTC_SetTime+0x12c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2202      	movs	r2, #2
 80025f0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d126      	bne.n	8002646 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fb51 	bl	8002cb8 <RTC_ByteToBcd2>
 8002616:	4603      	mov	r3, r0
 8002618:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fb4a 	bl	8002cb8 <RTC_ByteToBcd2>
 8002624:	4603      	mov	r3, r0
 8002626:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002628:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	789b      	ldrb	r3, [r3, #2]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fb42 	bl	8002cb8 <RTC_ByteToBcd2>
 8002634:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002636:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	78db      	ldrb	r3, [r3, #3]
 800263e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e018      	b.n	8002678 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002666:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800266c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	78db      	ldrb	r3, [r3, #3]
 8002672:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ca      	movs	r2, #202	@ 0xca
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2253      	movs	r2, #83	@ 0x53
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fab9 	bl	8002c00 <RTC_EnterInitMode>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d120      	bne.n	80026da <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80026a2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80026a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 facc 	bl	8002c6e <RTC_ExitInitMode>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]

  return status;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}

080026fe <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002730:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002734:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	0d9b      	lsrs	r3, r3, #22
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11a      	bne.n	80027b0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fab8 	bl	8002cf4 <RTC_Bcd2ToByte>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 faaf 	bl	8002cf4 <RTC_Bcd2ToByte>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	789b      	ldrb	r3, [r3, #2]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 faa6 	bl	8002cf4 <RTC_Bcd2ToByte>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027ba:	b590      	push	{r4, r7, lr}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	7f1b      	ldrb	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_RTC_SetDate+0x1c>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e071      	b.n	80028ba <HAL_RTC_SetDate+0x100>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2202      	movs	r2, #2
 80027e0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10e      	bne.n	8002806 <HAL_RTC_SetDate+0x4c>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	f023 0310 	bic.w	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	330a      	adds	r3, #10
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11c      	bne.n	8002846 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fa51 	bl	8002cb8 <RTC_ByteToBcd2>
 8002816:	4603      	mov	r3, r0
 8002818:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa4a 	bl	8002cb8 <RTC_ByteToBcd2>
 8002824:	4603      	mov	r3, r0
 8002826:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002828:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fa42 	bl	8002cb8 <RTC_ByteToBcd2>
 8002834:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002836:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e00e      	b.n	8002864 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	78db      	ldrb	r3, [r3, #3]
 800284a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002852:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002858:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	22ca      	movs	r2, #202	@ 0xca
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2253      	movs	r2, #83	@ 0x53
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9c3 	bl	8002c00 <RTC_EnterInitMode>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800288e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002892:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9ea 	bl	8002c6e <RTC_ExitInitMode>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	22ff      	movs	r2, #255	@ 0xff
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]

  return status;
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}

080028c2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80028e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0b5b      	lsrs	r3, r3, #13
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11a      	bne.n	8002956 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	78db      	ldrb	r3, [r3, #3]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f9e5 	bl	8002cf4 <RTC_Bcd2ToByte>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f9dc 	bl	8002cf4 <RTC_Bcd2ToByte>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	789b      	ldrb	r3, [r3, #2]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f9d3 	bl	8002cf4 <RTC_Bcd2ToByte>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b089      	sub	sp, #36	@ 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7f1b      	ldrb	r3, [r3, #28]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_RTC_SetAlarm+0x24>
 8002980:	2302      	movs	r3, #2
 8002982:	e113      	b.n	8002bac <HAL_RTC_SetAlarm+0x24c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2202      	movs	r2, #2
 800298e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d137      	bne.n	8002a06 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f982 	bl	8002cb8 <RTC_ByteToBcd2>
 80029b4:	4603      	mov	r3, r0
 80029b6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f97b 	bl	8002cb8 <RTC_ByteToBcd2>
 80029c2:	4603      	mov	r3, r0
 80029c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80029c6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f973 	bl	8002cb8 <RTC_ByteToBcd2>
 80029d2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	78db      	ldrb	r3, [r3, #3]
 80029dc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80029de:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f965 	bl	8002cb8 <RTC_ByteToBcd2>
 80029ee:	4603      	mov	r3, r0
 80029f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80029f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80029fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	e023      	b.n	8002a4e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a26:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a2c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	78db      	ldrb	r3, [r3, #3]
 8002a32:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a34:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a3e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a44:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	22ca      	movs	r2, #202	@ 0xca
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2253      	movs	r2, #83	@ 0x53
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a72:	d148      	bne.n	8002b06 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a82:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a92:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002aa4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fbbd 	bl	8001224 <HAL_GetTick>
 8002aaa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002aac:	e013      	b.n	8002ad6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aae:	f7fe fbb9 	bl	8001224 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002abc:	d90b      	bls.n	8002ad6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ff      	movs	r2, #255	@ 0xff
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e06a      	b.n	8002bac <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0e4      	beq.n	8002aae <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e047      	b.n	8002b96 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b14:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b24:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002b36:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fb74 	bl	8001224 <HAL_GetTick>
 8002b3c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b3e:	e013      	b.n	8002b68 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b40:	f7fe fb70 	bl	8001224 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b4e:	d90b      	bls.n	8002b68 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	22ff      	movs	r2, #255	@ 0xff
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e021      	b.n	8002bac <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0e4      	beq.n	8002b40 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	22ff      	movs	r2, #255	@ 0xff
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3724      	adds	r7, #36	@ 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}

08002bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <HAL_RTC_WaitForSynchro+0x48>)
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fb2c 	bl	8001224 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bce:	e009      	b.n	8002be4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bd0:	f7fe fb28 	bl	8001224 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bde:	d901      	bls.n	8002be4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e007      	b.n	8002bf4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ee      	beq.n	8002bd0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00017f5f 	.word	0x00017f5f

08002c00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d122      	bne.n	8002c64 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe faf9 	bl	8001224 <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c34:	e00c      	b.n	8002c50 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c36:	f7fe faf5 	bl	8001224 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c44:	d904      	bls.n	8002c50 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <RTC_EnterInitMode+0x64>
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d1e8      	bne.n	8002c36 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c88:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff8b 	bl	8002bb4 <HAL_RTC_WaitForSynchro>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002cc6:	e005      	b.n	8002cd4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	3b0a      	subs	r3, #10
 8002cd2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	d8f6      	bhi.n	8002cc8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b2db      	uxtb	r3, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	b2db      	uxtb	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f103 0208 	add.w	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 0208 	add.w	r2, r3, #8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d103      	bne.n	8002df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e00c      	b.n	8002e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3308      	adds	r3, #8
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e002      	b.n	8002e00 <vListInsert+0x2e>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d2f6      	bcs.n	8002dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6852      	ldr	r2, [r2, #4]
 8002e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d103      	bne.n	8002e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ec4:	f002 f8f8 	bl	80050b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	441a      	add	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	441a      	add	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	22ff      	movs	r2, #255	@ 0xff
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d114      	bne.n	8002f44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01a      	beq.n	8002f58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3310      	adds	r3, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 f90c 	bl	8004144 <xTaskRemoveFromEventList>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <xQueueGenericReset+0xd0>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	e009      	b.n	8002f58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3310      	adds	r3, #16
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fef1 	bl	8002d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3324      	adds	r3, #36	@ 0x24
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff feec 	bl	8002d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f58:	f002 f8e0 	bl	800511c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	@ 0x38
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <xQueueGenericCreateStatic+0x56>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <xQueueGenericCreateStatic+0x5a>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xQueueGenericCreateStatic+0x5c>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	623b      	str	r3, [r7, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <xQueueGenericCreateStatic+0x84>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <xQueueGenericCreateStatic+0x88>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <xQueueGenericCreateStatic+0x8a>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	61fb      	str	r3, [r7, #28]
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003012:	2348      	movs	r3, #72	@ 0x48
 8003014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b48      	cmp	r3, #72	@ 0x48
 800301a:	d00b      	beq.n	8003034 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61bb      	str	r3, [r7, #24]
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003034:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003048:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f840 	bl	80030dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800305e:	4618      	mov	r0, r3
 8003060:	3730      	adds	r7, #48	@ 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003066:	b580      	push	{r7, lr}
 8003068:	b08a      	sub	sp, #40	@ 0x28
 800306a:	af02      	add	r7, sp, #8
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <xQueueGenericCreate+0x2c>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	613b      	str	r3, [r7, #16]
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	e7fd      	b.n	800308e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3348      	adds	r3, #72	@ 0x48
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 f92b 	bl	80052fc <pvPortMalloc>
 80030a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d011      	beq.n	80030d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3348      	adds	r3, #72	@ 0x48
 80030b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f805 	bl	80030dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030d2:	69bb      	ldr	r3, [r7, #24]
	}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e002      	b.n	80030fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800310a:	2101      	movs	r1, #1
 800310c:	69b8      	ldr	r0, [r7, #24]
 800310e:	f7ff fec3 	bl	8002e98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	@ 0x38
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xQueueGenericSend+0x34>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <xQueueGenericSend+0x42>
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueGenericSend+0x46>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericSend+0x48>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <xQueueGenericSend+0x64>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d103      	bne.n	800318e <xQueueGenericSend+0x72>
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <xQueueGenericSend+0x76>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueGenericSend+0x78>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	623b      	str	r3, [r7, #32]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b0:	f001 f988 	bl	80044c4 <xTaskGetSchedulerState>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <xQueueGenericSend+0xa4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <xQueueGenericSend+0xa8>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <xQueueGenericSend+0xaa>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	61fb      	str	r3, [r7, #28]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031e2:	f001 ff69 	bl	80050b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <xQueueGenericSend+0xdc>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d129      	bne.n	800324c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031fe:	f000 fa0f 	bl	8003620 <prvCopyDataToQueue>
 8003202:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	3324      	adds	r3, #36	@ 0x24
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff97 	bl	8004144 <xTaskRemoveFromEventList>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800321c:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <xQueueGenericSend+0x200>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	e00a      	b.n	8003244 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003234:	4b39      	ldr	r3, [pc, #228]	@ (800331c <xQueueGenericSend+0x200>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003244:	f001 ff6a 	bl	800511c <vPortExitCritical>
				return pdPASS;
 8003248:	2301      	movs	r3, #1
 800324a:	e063      	b.n	8003314 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003252:	f001 ff63 	bl	800511c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003256:	2300      	movs	r3, #0
 8003258:	e05c      	b.n	8003314 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800325a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4618      	mov	r0, r3
 8003266:	f000 ffd1 	bl	800420c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800326a:	2301      	movs	r3, #1
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800326e:	f001 ff55 	bl	800511c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003272:	f000 fd43 	bl	8003cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003276:	f001 ff1f 	bl	80050b8 <vPortEnterCritical>
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d103      	bne.n	8003290 <xQueueGenericSend+0x174>
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003296:	b25b      	sxtb	r3, r3
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSend+0x18a>
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032a6:	f001 ff39 	bl	800511c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 ffc0 	bl	8004238 <xTaskCheckForTimeOut>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d124      	bne.n	8003308 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032c0:	f000 faa6 	bl	8003810 <prvIsQueueFull>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	3310      	adds	r3, #16
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fee4 	bl	80040a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032da:	f000 fa31 	bl	8003740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032de:	f000 fd1b 	bl	8003d18 <xTaskResumeAll>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f af7c 	bne.w	80031e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <xQueueGenericSend+0x200>)
 80032ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	e772      	b.n	80031e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032fe:	f000 fa1f 	bl	8003740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003302:	f000 fd09 	bl	8003d18 <xTaskResumeAll>
 8003306:	e76c      	b.n	80031e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330a:	f000 fa19 	bl	8003740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800330e:	f000 fd03 	bl	8003d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003314:	4618      	mov	r0, r3
 8003316:	3738      	adds	r7, #56	@ 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	@ 0x40
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <xQueueGenericSendFromISR+0x3e>
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <xQueueGenericSendFromISR+0x42>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <xQueueGenericSendFromISR+0x44>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <xQueueGenericSendFromISR+0x6e>
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <xQueueGenericSendFromISR+0x72>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueGenericSendFromISR+0x74>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033b0:	f001 ff62 	bl	8005278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033b4:	f3ef 8211 	mrs	r2, BASEPRI
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	61fa      	str	r2, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <xQueueGenericSendFromISR+0xc2>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d12f      	bne.n	8003442 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80033f8:	f000 f912 	bl	8003620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d112      	bne.n	800342c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	3324      	adds	r3, #36	@ 0x24
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fe96 	bl	8004144 <xTaskRemoveFromEventList>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e007      	b.n	800343c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800342c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003430:	3301      	adds	r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	b25a      	sxtb	r2, r3
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800343c:	2301      	movs	r3, #1
 800343e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003440:	e001      	b.n	8003446 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003442:	2300      	movs	r3, #0
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003454:	4618      	mov	r0, r3
 8003456:	3740      	adds	r7, #64	@ 0x40
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	@ 0x30
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <xQueueReceive+0x32>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	623b      	str	r3, [r7, #32]
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <xQueueReceive+0x40>
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <xQueueReceive+0x44>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <xQueueReceive+0x46>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <xQueueReceive+0x62>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	61fb      	str	r3, [r7, #28]
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	e7fd      	b.n	80034ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034be:	f001 f801 	bl	80044c4 <xTaskGetSchedulerState>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <xQueueReceive+0x72>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <xQueueReceive+0x76>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueReceive+0x78>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xQueueReceive+0x94>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61bb      	str	r3, [r7, #24]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f0:	f001 fde2 	bl	80050b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01f      	beq.n	8003540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003504:	f000 f8f6 	bl	80036f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	1e5a      	subs	r2, r3, #1
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00f      	beq.n	8003538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	3310      	adds	r3, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fe11 	bl	8004144 <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <xQueueReceive+0x1c0>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003538:	f001 fdf0 	bl	800511c <vPortExitCritical>
				return pdPASS;
 800353c:	2301      	movs	r3, #1
 800353e:	e069      	b.n	8003614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003546:	f001 fde9 	bl	800511c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800354a:	2300      	movs	r3, #0
 800354c:	e062      	b.n	8003614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fe57 	bl	800420c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800355e:	2301      	movs	r3, #1
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003562:	f001 fddb 	bl	800511c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003566:	f000 fbc9 	bl	8003cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800356a:	f001 fda5 	bl	80050b8 <vPortEnterCritical>
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003574:	b25b      	sxtb	r3, r3
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d103      	bne.n	8003584 <xQueueReceive+0x128>
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800358a:	b25b      	sxtb	r3, r3
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <xQueueReceive+0x13e>
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800359a:	f001 fdbf 	bl	800511c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800359e:	1d3a      	adds	r2, r7, #4
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe46 	bl	8004238 <xTaskCheckForTimeOut>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d123      	bne.n	80035fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035b4:	f000 f916 	bl	80037e4 <prvIsQueueEmpty>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	3324      	adds	r3, #36	@ 0x24
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fd6a 	bl	80040a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ce:	f000 f8b7 	bl	8003740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035d2:	f000 fba1 	bl	8003d18 <xTaskResumeAll>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d189      	bne.n	80034f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035dc:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <xQueueReceive+0x1c0>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	e780      	b.n	80034f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f0:	f000 f8a6 	bl	8003740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035f4:	f000 fb90 	bl	8003d18 <xTaskResumeAll>
 80035f8:	e77a      	b.n	80034f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035fc:	f000 f8a0 	bl	8003740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003600:	f000 fb8a 	bl	8003d18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003606:	f000 f8ed 	bl	80037e4 <prvIsQueueEmpty>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f43f af6f 	beq.w	80034f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003614:	4618      	mov	r0, r3
 8003616:	3730      	adds	r7, #48	@ 0x30
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d14d      	bne.n	80036e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 ff58 	bl	8004500 <xTaskPriorityDisinherit>
 8003650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e043      	b.n	80036e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d119      	bne.n	8003694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6858      	ldr	r0, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	461a      	mov	r2, r3
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	f002 f9c7 	bl	80059fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	441a      	add	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d32b      	bcc.n	80036e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e026      	b.n	80036e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68d8      	ldr	r0, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	461a      	mov	r2, r3
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f002 f9ad 	bl	80059fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	425b      	negs	r3, r3
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	425b      	negs	r3, r3
 80036ca:	441a      	add	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d105      	bne.n	80036e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d018      	beq.n	8003738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d303      	bcc.n	8003728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68d9      	ldr	r1, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	461a      	mov	r2, r3
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f002 f963 	bl	80059fe <memcpy>
	}
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003748:	f001 fcb6 	bl	80050b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003754:	e011      	b.n	800377a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3324      	adds	r3, #36	@ 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fcee 	bl	8004144 <xTaskRemoveFromEventList>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800376e:	f000 fdc7 	bl	8004300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	3b01      	subs	r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	dce9      	bgt.n	8003756 <prvUnlockQueue+0x16>
 8003782:	e000      	b.n	8003786 <prvUnlockQueue+0x46>
					break;
 8003784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	22ff      	movs	r2, #255	@ 0xff
 800378a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800378e:	f001 fcc5 	bl	800511c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003792:	f001 fc91 	bl	80050b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800379c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800379e:	e011      	b.n	80037c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3310      	adds	r3, #16
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fcc9 	bl	8004144 <xTaskRemoveFromEventList>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037b8:	f000 fda2 	bl	8004300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037bc:	7bbb      	ldrb	r3, [r7, #14]
 80037be:	3b01      	subs	r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	dce9      	bgt.n	80037a0 <prvUnlockQueue+0x60>
 80037cc:	e000      	b.n	80037d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	22ff      	movs	r2, #255	@ 0xff
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037d8:	f001 fca0 	bl	800511c <vPortExitCritical>
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037ec:	f001 fc64 	bl	80050b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e001      	b.n	8003802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003802:	f001 fc8b 	bl	800511c <vPortExitCritical>

	return xReturn;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003818:	f001 fc4e 	bl	80050b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	429a      	cmp	r2, r3
 8003826:	d102      	bne.n	800382e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 fc73 	bl	800511c <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e014      	b.n	800387a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003850:	4a0f      	ldr	r2, [pc, #60]	@ (8003890 <vQueueAddToRegistry+0x50>)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800385c:	490c      	ldr	r1, [pc, #48]	@ (8003890 <vQueueAddToRegistry+0x50>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003866:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <vQueueAddToRegistry+0x50>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003872:	e006      	b.n	8003882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b07      	cmp	r3, #7
 800387e:	d9e7      	bls.n	8003850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000830 	.word	0x20000830

08003894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038a4:	f001 fc08 	bl	80050b8 <vPortEnterCritical>
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d103      	bne.n	80038be <vQueueWaitForMessageRestricted+0x2a>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d103      	bne.n	80038d4 <vQueueWaitForMessageRestricted+0x40>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038d4:	f001 fc22 	bl	800511c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3324      	adds	r3, #36	@ 0x24
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fbff 	bl	80040ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff26 	bl	8003740 <prvUnlockQueue>
	}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	@ 0x38
 8003900:	af04      	add	r7, sp, #16
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800390a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	623b      	str	r3, [r7, #32]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <xTaskCreateStatic+0x4a>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	61fb      	str	r3, [r7, #28]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003946:	2354      	movs	r3, #84	@ 0x54
 8003948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b54      	cmp	r3, #84	@ 0x54
 800394e:	d00b      	beq.n	8003968 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61bb      	str	r3, [r7, #24]
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003968:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01e      	beq.n	80039ae <xTaskCreateStatic+0xb2>
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01b      	beq.n	80039ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003988:	2300      	movs	r3, #0
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f850 	bl	8003a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039a8:	f000 f8d6 	bl	8003b58 <prvAddNewTaskToReadyList>
 80039ac:	e001      	b.n	80039b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039b2:	697b      	ldr	r3, [r7, #20]
	}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3728      	adds	r7, #40	@ 0x28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08c      	sub	sp, #48	@ 0x30
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fc93 	bl	80052fc <pvPortMalloc>
 80039d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039de:	2054      	movs	r0, #84	@ 0x54
 80039e0:	f001 fc8c 	bl	80052fc <pvPortMalloc>
 80039e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80039f2:	e005      	b.n	8003a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f001 fd4f 	bl	8005498 <vPortFree>
 80039fa:	e001      	b.n	8003a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d017      	beq.n	8003a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9303      	str	r3, [sp, #12]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	9302      	str	r3, [sp, #8]
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f80e 	bl	8003a46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a2a:	69f8      	ldr	r0, [r7, #28]
 8003a2c:	f000 f894 	bl	8003b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e002      	b.n	8003a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b088      	sub	sp, #32
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f023 0307 	bic.w	r3, r3, #7
 8003a6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	617b      	str	r3, [r7, #20]
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01f      	beq.n	8003ad6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e012      	b.n	8003ac2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	7819      	ldrb	r1, [r3, #0]
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3334      	adds	r3, #52	@ 0x34
 8003aac:	460a      	mov	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d9e9      	bls.n	8003a9c <prvInitialiseNewTask+0x56>
 8003ac8:	e000      	b.n	8003acc <prvInitialiseNewTask+0x86>
			{
				break;
 8003aca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad4:	e003      	b.n	8003ade <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae0:	2b06      	cmp	r3, #6
 8003ae2:	d901      	bls.n	8003ae8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	2200      	movs	r2, #0
 8003af8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f936 	bl	8002d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	3318      	adds	r3, #24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f931 	bl	8002d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	f1c3 0207 	rsb	r2, r3, #7
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	2200      	movs	r2, #0
 8003b28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	69b8      	ldr	r0, [r7, #24]
 8003b38:	f001 f98e 	bl	8004e58 <pxPortInitialiseStack>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b60:	f001 faaa 	bl	80050b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <prvAddNewTaskToReadyList+0xb8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <prvAddNewTaskToReadyList+0xb8>)
 8003b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b6e:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <prvAddNewTaskToReadyList+0xbc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b76:	4a27      	ldr	r2, [pc, #156]	@ (8003c14 <prvAddNewTaskToReadyList+0xbc>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b7c:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <prvAddNewTaskToReadyList+0xb8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d110      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b84:	f000 fbe0 	bl	8004348 <prvInitialiseTaskLists>
 8003b88:	e00d      	b.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b8a:	4b23      	ldr	r3, [pc, #140]	@ (8003c18 <prvAddNewTaskToReadyList+0xc0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b92:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <prvAddNewTaskToReadyList+0xbc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d802      	bhi.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c14 <prvAddNewTaskToReadyList+0xbc>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <prvAddNewTaskToReadyList+0xc4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a1b      	ldr	r2, [pc, #108]	@ (8003c1c <prvAddNewTaskToReadyList+0xc4>)
 8003bae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <prvAddNewTaskToReadyList+0xcc>)
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7ff f8d6 	bl	8002d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bde:	f001 fa9d 	bl	800511c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <prvAddNewTaskToReadyList+0xc0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <prvAddNewTaskToReadyList+0xbc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d207      	bcs.n	8003c08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000970 	.word	0x20000970
 8003c14:	20000870 	.word	0x20000870
 8003c18:	2000097c 	.word	0x2000097c
 8003c1c:	2000098c 	.word	0x2000098c
 8003c20:	20000978 	.word	0x20000978
 8003c24:	20000874 	.word	0x20000874
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	@ 0x28
 8003c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c3a:	463a      	mov	r2, r7
 8003c3c:	1d39      	adds	r1, r7, #4
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fc8c 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	9202      	str	r2, [sp, #8]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2300      	movs	r3, #0
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	4922      	ldr	r1, [pc, #136]	@ (8003ce4 <vTaskStartScheduler+0xb8>)
 8003c5c:	4822      	ldr	r0, [pc, #136]	@ (8003ce8 <vTaskStartScheduler+0xbc>)
 8003c5e:	f7ff fe4d 	bl	80038fc <xTaskCreateStatic>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <vTaskStartScheduler+0xc0>)
 8003c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c68:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <vTaskStartScheduler+0xc0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e001      	b.n	8003c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d102      	bne.n	8003c86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c80:	f000 fd2c 	bl	80046dc <xTimerCreateTimerTask>
 8003c84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d116      	bne.n	8003cba <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	613b      	str	r3, [r7, #16]
}
 8003c9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <vTaskStartScheduler+0xc4>)
 8003ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <vTaskStartScheduler+0xc8>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cae:	4b12      	ldr	r3, [pc, #72]	@ (8003cf8 <vTaskStartScheduler+0xcc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cb4:	f001 f95c 	bl	8004f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cb8:	e00f      	b.n	8003cda <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d10b      	bne.n	8003cda <vTaskStartScheduler+0xae>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60fb      	str	r3, [r7, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	e7fd      	b.n	8003cd6 <vTaskStartScheduler+0xaa>
}
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	080065f4 	.word	0x080065f4
 8003ce8:	08004319 	.word	0x08004319
 8003cec:	20000994 	.word	0x20000994
 8003cf0:	20000990 	.word	0x20000990
 8003cf4:	2000097c 	.word	0x2000097c
 8003cf8:	20000974 	.word	0x20000974

08003cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d00:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <vTaskSuspendAll+0x18>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a03      	ldr	r2, [pc, #12]	@ (8003d14 <vTaskSuspendAll+0x18>)
 8003d08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20000998 	.word	0x20000998

08003d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d26:	4b42      	ldr	r3, [pc, #264]	@ (8003e30 <xTaskResumeAll+0x118>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <xTaskResumeAll+0x2e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d46:	f001 f9b7 	bl	80050b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d4a:	4b39      	ldr	r3, [pc, #228]	@ (8003e30 <xTaskResumeAll+0x118>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a37      	ldr	r2, [pc, #220]	@ (8003e30 <xTaskResumeAll+0x118>)
 8003d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d54:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <xTaskResumeAll+0x118>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d161      	bne.n	8003e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d5c:	4b35      	ldr	r3, [pc, #212]	@ (8003e34 <xTaskResumeAll+0x11c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d05d      	beq.n	8003e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d64:	e02e      	b.n	8003dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d66:	4b34      	ldr	r3, [pc, #208]	@ (8003e38 <xTaskResumeAll+0x120>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3318      	adds	r3, #24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f866 	bl	8002e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff f861 	bl	8002e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e3c <xTaskResumeAll+0x124>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <xTaskResumeAll+0x124>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <xTaskResumeAll+0x128>)
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fe ffed 	bl	8002d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db4:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <xTaskResumeAll+0x12c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <xTaskResumeAll+0x130>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e38 <xTaskResumeAll+0x120>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1cc      	bne.n	8003d66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dd2:	f000 fb57 	bl	8004484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <xTaskResumeAll+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003de2:	f000 f847 	bl	8003e74 <xTaskIncrementTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003dec:	4b16      	ldr	r3, [pc, #88]	@ (8003e48 <xTaskResumeAll+0x130>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f1      	bne.n	8003de2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <xTaskResumeAll+0x134>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <xTaskResumeAll+0x130>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e10:	4b0f      	ldr	r3, [pc, #60]	@ (8003e50 <xTaskResumeAll+0x138>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e20:	f001 f97c 	bl	800511c <vPortExitCritical>

	return xAlreadyYielded;
 8003e24:	68bb      	ldr	r3, [r7, #8]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000998 	.word	0x20000998
 8003e34:	20000970 	.word	0x20000970
 8003e38:	20000930 	.word	0x20000930
 8003e3c:	20000978 	.word	0x20000978
 8003e40:	20000874 	.word	0x20000874
 8003e44:	20000870 	.word	0x20000870
 8003e48:	20000984 	.word	0x20000984
 8003e4c:	20000980 	.word	0x20000980
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <xTaskGetTickCount+0x1c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000974 	.word	0x20000974

08003e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003fbc <xTaskIncrementTick+0x148>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 808f 	bne.w	8003fa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e88:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc0 <xTaskIncrementTick+0x14c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e90:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc0 <xTaskIncrementTick+0x14c>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d121      	bne.n	8003ee0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e9c:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <xTaskIncrementTick+0x150>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <xTaskIncrementTick+0x4a>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	603b      	str	r3, [r7, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <xTaskIncrementTick+0x46>
 8003ebe:	4b41      	ldr	r3, [pc, #260]	@ (8003fc4 <xTaskIncrementTick+0x150>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	4b40      	ldr	r3, [pc, #256]	@ (8003fc8 <xTaskIncrementTick+0x154>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc4 <xTaskIncrementTick+0x150>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc8 <xTaskIncrementTick+0x154>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fcc <xTaskIncrementTick+0x158>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <xTaskIncrementTick+0x158>)
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	f000 fad2 	bl	8004484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd0 <xTaskIncrementTick+0x15c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d348      	bcc.n	8003f7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eea:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <xTaskIncrementTick+0x150>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	4b36      	ldr	r3, [pc, #216]	@ (8003fd0 <xTaskIncrementTick+0x15c>)
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	601a      	str	r2, [r3, #0]
					break;
 8003efc:	e03e      	b.n	8003f7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efe:	4b31      	ldr	r3, [pc, #196]	@ (8003fc4 <xTaskIncrementTick+0x150>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d203      	bcs.n	8003f1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f16:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd0 <xTaskIncrementTick+0x15c>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f1c:	e02e      	b.n	8003f7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe ff8e 	bl	8002e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3318      	adds	r3, #24
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe ff85 	bl	8002e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	2201      	movs	r2, #1
 8003f40:	409a      	lsls	r2, r3
 8003f42:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <xTaskIncrementTick+0x160>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	4a22      	ldr	r2, [pc, #136]	@ (8003fd4 <xTaskIncrementTick+0x160>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <xTaskIncrementTick+0x164>)
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fe ff11 	bl	8002d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <xTaskIncrementTick+0x168>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3b9      	bcc.n	8003eea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7a:	e7b6      	b.n	8003eea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <xTaskIncrementTick+0x168>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f82:	4915      	ldr	r1, [pc, #84]	@ (8003fd8 <xTaskIncrementTick+0x164>)
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d901      	bls.n	8003f98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f98:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <xTaskIncrementTick+0x16c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e004      	b.n	8003fb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <xTaskIncrementTick+0x170>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe4 <xTaskIncrementTick+0x170>)
 8003fae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fb0:	697b      	ldr	r3, [r7, #20]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000998 	.word	0x20000998
 8003fc0:	20000974 	.word	0x20000974
 8003fc4:	20000928 	.word	0x20000928
 8003fc8:	2000092c 	.word	0x2000092c
 8003fcc:	20000988 	.word	0x20000988
 8003fd0:	20000990 	.word	0x20000990
 8003fd4:	20000978 	.word	0x20000978
 8003fd8:	20000874 	.word	0x20000874
 8003fdc:	20000870 	.word	0x20000870
 8003fe0:	20000984 	.word	0x20000984
 8003fe4:	20000980 	.word	0x20000980

08003fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fee:	4b27      	ldr	r3, [pc, #156]	@ (800408c <vTaskSwitchContext+0xa4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ff6:	4b26      	ldr	r3, [pc, #152]	@ (8004090 <vTaskSwitchContext+0xa8>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ffc:	e040      	b.n	8004080 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <vTaskSwitchContext+0xa8>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b23      	ldr	r3, [pc, #140]	@ (8004094 <vTaskSwitchContext+0xac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f1c3 031f 	rsb	r3, r3, #31
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	491f      	ldr	r1, [pc, #124]	@ (8004098 <vTaskSwitchContext+0xb0>)
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <vTaskSwitchContext+0x5e>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	e7fd      	b.n	8004042 <vTaskSwitchContext+0x5a>
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <vTaskSwitchContext+0xb0>)
 8004052:	4413      	add	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3308      	adds	r3, #8
 8004068:	429a      	cmp	r2, r3
 800406a:	d104      	bne.n	8004076 <vTaskSwitchContext+0x8e>
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a07      	ldr	r2, [pc, #28]	@ (800409c <vTaskSwitchContext+0xb4>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000998 	.word	0x20000998
 8004090:	20000984 	.word	0x20000984
 8004094:	20000978 	.word	0x20000978
 8004098:	20000874 	.word	0x20000874
 800409c:	20000870 	.word	0x20000870

080040a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040c8:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <vTaskPlaceOnEventList+0x48>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3318      	adds	r3, #24
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fe fe7e 	bl	8002dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040d6:	2101      	movs	r1, #1
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f000 fa99 	bl	8004610 <prvAddCurrentTaskToDelayedList>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000870 	.word	0x20000870

080040ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	617b      	str	r3, [r7, #20]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <vTaskPlaceOnEventListRestricted+0x54>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3318      	adds	r3, #24
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7fe fe33 	bl	8002d8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	68b8      	ldr	r0, [r7, #8]
 8004134:	f000 fa6c 	bl	8004610 <prvAddCurrentTaskToDelayedList>
	}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000870 	.word	0x20000870

08004144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60fb      	str	r3, [r7, #12]
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	e7fd      	b.n	800416e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	3318      	adds	r3, #24
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fe64 	bl	8002e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <xTaskRemoveFromEventList+0xb0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11c      	bne.n	80041be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe fe5b 	bl	8002e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	2201      	movs	r2, #1
 8004194:	409a      	lsls	r2, r3
 8004196:	4b18      	ldr	r3, [pc, #96]	@ (80041f8 <xTaskRemoveFromEventList+0xb4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	4a16      	ldr	r2, [pc, #88]	@ (80041f8 <xTaskRemoveFromEventList+0xb4>)
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a13      	ldr	r2, [pc, #76]	@ (80041fc <xTaskRemoveFromEventList+0xb8>)
 80041ae:	441a      	add	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7fe fde7 	bl	8002d8a <vListInsertEnd>
 80041bc:	e005      	b.n	80041ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3318      	adds	r3, #24
 80041c2:	4619      	mov	r1, r3
 80041c4:	480e      	ldr	r0, [pc, #56]	@ (8004200 <xTaskRemoveFromEventList+0xbc>)
 80041c6:	f7fe fde0 	bl	8002d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <xTaskRemoveFromEventList+0xc0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d905      	bls.n	80041e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <xTaskRemoveFromEventList+0xc4>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e001      	b.n	80041e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000998 	.word	0x20000998
 80041f8:	20000978 	.word	0x20000978
 80041fc:	20000874 	.word	0x20000874
 8004200:	20000930 	.word	0x20000930
 8004204:	20000870 	.word	0x20000870
 8004208:	20000984 	.word	0x20000984

0800420c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <vTaskInternalSetTimeOutState+0x24>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <vTaskInternalSetTimeOutState+0x28>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	20000988 	.word	0x20000988
 8004234:	20000974 	.word	0x20000974

08004238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	613b      	str	r3, [r7, #16]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60fb      	str	r3, [r7, #12]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800427e:	f000 ff1b 	bl	80050b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004282:	4b1d      	ldr	r3, [pc, #116]	@ (80042f8 <xTaskCheckForTimeOut+0xc0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d102      	bne.n	80042a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	e023      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <xTaskCheckForTimeOut+0xc4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d007      	beq.n	80042be <xTaskCheckForTimeOut+0x86>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e015      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d20b      	bcs.n	80042e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff99 	bl	800420c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e004      	b.n	80042ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ea:	f000 ff17 	bl	800511c <vPortExitCritical>

	return xReturn;
 80042ee:	69fb      	ldr	r3, [r7, #28]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000974 	.word	0x20000974
 80042fc:	20000988 	.word	0x20000988

08004300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <vTaskMissedYield+0x14>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000984 	.word	0x20000984

08004318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004320:	f000 f852 	bl	80043c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <prvIdleTask+0x28>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d9f9      	bls.n	8004320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <prvIdleTask+0x2c>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800433c:	e7f0      	b.n	8004320 <prvIdleTask+0x8>
 800433e:	bf00      	nop
 8004340:	20000874 	.word	0x20000874
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	e00c      	b.n	800436e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4a12      	ldr	r2, [pc, #72]	@ (80043a8 <prvInitialiseTaskLists+0x60>)
 8004360:	4413      	add	r3, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fce4 	bl	8002d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3301      	adds	r3, #1
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d9ef      	bls.n	8004354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004374:	480d      	ldr	r0, [pc, #52]	@ (80043ac <prvInitialiseTaskLists+0x64>)
 8004376:	f7fe fcdb 	bl	8002d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800437a:	480d      	ldr	r0, [pc, #52]	@ (80043b0 <prvInitialiseTaskLists+0x68>)
 800437c:	f7fe fcd8 	bl	8002d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004380:	480c      	ldr	r0, [pc, #48]	@ (80043b4 <prvInitialiseTaskLists+0x6c>)
 8004382:	f7fe fcd5 	bl	8002d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004386:	480c      	ldr	r0, [pc, #48]	@ (80043b8 <prvInitialiseTaskLists+0x70>)
 8004388:	f7fe fcd2 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800438c:	480b      	ldr	r0, [pc, #44]	@ (80043bc <prvInitialiseTaskLists+0x74>)
 800438e:	f7fe fccf 	bl	8002d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <prvInitialiseTaskLists+0x78>)
 8004394:	4a05      	ldr	r2, [pc, #20]	@ (80043ac <prvInitialiseTaskLists+0x64>)
 8004396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <prvInitialiseTaskLists+0x7c>)
 800439a:	4a05      	ldr	r2, [pc, #20]	@ (80043b0 <prvInitialiseTaskLists+0x68>)
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000874 	.word	0x20000874
 80043ac:	20000900 	.word	0x20000900
 80043b0:	20000914 	.word	0x20000914
 80043b4:	20000930 	.word	0x20000930
 80043b8:	20000944 	.word	0x20000944
 80043bc:	2000095c 	.word	0x2000095c
 80043c0:	20000928 	.word	0x20000928
 80043c4:	2000092c 	.word	0x2000092c

080043c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ce:	e019      	b.n	8004404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043d0:	f000 fe72 	bl	80050b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d4:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <prvCheckTasksWaitingTermination+0x50>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe fd2f 	bl	8002e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <prvCheckTasksWaitingTermination+0x54>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	4a0b      	ldr	r2, [pc, #44]	@ (800441c <prvCheckTasksWaitingTermination+0x54>)
 80043ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <prvCheckTasksWaitingTermination+0x58>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004420 <prvCheckTasksWaitingTermination+0x58>)
 80043f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043fa:	f000 fe8f 	bl	800511c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f810 	bl	8004424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <prvCheckTasksWaitingTermination+0x58>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e1      	bne.n	80043d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000944 	.word	0x20000944
 800441c:	20000970 	.word	0x20000970
 8004420:	20000958 	.word	0x20000958

08004424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f82c 	bl	8005498 <vPortFree>
				vPortFree( pxTCB );
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 f829 	bl	8005498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004446:	e019      	b.n	800447c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800444e:	2b01      	cmp	r3, #1
 8004450:	d103      	bne.n	800445a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f001 f820 	bl	8005498 <vPortFree>
	}
 8004458:	e010      	b.n	800447c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004460:	2b02      	cmp	r3, #2
 8004462:	d00b      	beq.n	800447c <prvDeleteTCB+0x58>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <prvDeleteTCB+0x54>
	}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448a:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <prvResetNextTaskUnblockTime+0x38>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <prvResetNextTaskUnblockTime+0x3c>)
 8004496:	f04f 32ff 	mov.w	r2, #4294967295
 800449a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800449c:	e008      	b.n	80044b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <prvResetNextTaskUnblockTime+0x38>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a04      	ldr	r2, [pc, #16]	@ (80044c0 <prvResetNextTaskUnblockTime+0x3c>)
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000928 	.word	0x20000928
 80044c0:	20000990 	.word	0x20000990

080044c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ca:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <xTaskGetSchedulerState+0x34>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044d2:	2301      	movs	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	e008      	b.n	80044ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d8:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <xTaskGetSchedulerState+0x38>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044e0:	2302      	movs	r3, #2
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	e001      	b.n	80044ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044ea:	687b      	ldr	r3, [r7, #4]
	}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	2000097c 	.word	0x2000097c
 80044fc:	20000998 	.word	0x20000998

08004500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d070      	beq.n	80045f8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004516:	4b3b      	ldr	r3, [pc, #236]	@ (8004604 <xTaskPriorityDisinherit+0x104>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d00b      	beq.n	8004538 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60bb      	str	r3, [r7, #8]
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	429a      	cmp	r2, r3
 800456c:	d044      	beq.n	80045f8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004572:	2b00      	cmp	r3, #0
 8004574:	d140      	bne.n	80045f8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fc62 	bl	8002e44 <uxListRemove>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d115      	bne.n	80045b2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800458a:	491f      	ldr	r1, [pc, #124]	@ (8004608 <xTaskPriorityDisinherit+0x108>)
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xTaskPriorityDisinherit+0xb2>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	4b18      	ldr	r3, [pc, #96]	@ (800460c <xTaskPriorityDisinherit+0x10c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4013      	ands	r3, r2
 80045ae:	4a17      	ldr	r2, [pc, #92]	@ (800460c <xTaskPriorityDisinherit+0x10c>)
 80045b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045be:	f1c3 0207 	rsb	r2, r3, #7
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	2201      	movs	r2, #1
 80045cc:	409a      	lsls	r2, r3
 80045ce:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <xTaskPriorityDisinherit+0x10c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	4a0d      	ldr	r2, [pc, #52]	@ (800460c <xTaskPriorityDisinherit+0x10c>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <xTaskPriorityDisinherit+0x108>)
 80045e6:	441a      	add	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fe fbcb 	bl	8002d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045f8:	697b      	ldr	r3, [r7, #20]
	}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000870 	.word	0x20000870
 8004608:	20000874 	.word	0x20000874
 800460c:	20000978 	.word	0x20000978

08004610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800461a:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fc0c 	bl	8002e44 <uxListRemove>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	2201      	movs	r2, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43da      	mvns	r2, r3
 8004640:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4013      	ands	r3, r2
 8004646:	4a20      	ldr	r2, [pc, #128]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004648:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d10a      	bne.n	8004668 <prvAddCurrentTaskToDelayedList+0x58>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	481a      	ldr	r0, [pc, #104]	@ (80046cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004662:	f7fe fb92 	bl	8002d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004666:	e026      	b.n	80046b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004670:	4b14      	ldr	r3, [pc, #80]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	429a      	cmp	r2, r3
 800467e:	d209      	bcs.n	8004694 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004680:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe fba0 	bl	8002dd2 <vListInsert>
}
 8004692:	e010      	b.n	80046b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fe fb96 	bl	8002dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046a6:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d202      	bcs.n	80046b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046b0:	4a09      	ldr	r2, [pc, #36]	@ (80046d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	6013      	str	r3, [r2, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000974 	.word	0x20000974
 80046c4:	20000870 	.word	0x20000870
 80046c8:	20000978 	.word	0x20000978
 80046cc:	2000095c 	.word	0x2000095c
 80046d0:	2000092c 	.word	0x2000092c
 80046d4:	20000928 	.word	0x20000928
 80046d8:	20000990 	.word	0x20000990

080046dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046e6:	f000 fb55 	bl	8004d94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <xTimerCreateTimerTask+0x84>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d021      	beq.n	8004736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046fa:	1d3a      	adds	r2, r7, #4
 80046fc:	f107 0108 	add.w	r1, r7, #8
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	4618      	mov	r0, r3
 8004706:	f7fb ff45 	bl	8000594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	9202      	str	r2, [sp, #8]
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	2302      	movs	r3, #2
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2300      	movs	r3, #0
 800471a:	460a      	mov	r2, r1
 800471c:	4911      	ldr	r1, [pc, #68]	@ (8004764 <xTimerCreateTimerTask+0x88>)
 800471e:	4812      	ldr	r0, [pc, #72]	@ (8004768 <xTimerCreateTimerTask+0x8c>)
 8004720:	f7ff f8ec 	bl	80038fc <xTaskCreateStatic>
 8004724:	4603      	mov	r3, r0
 8004726:	4a11      	ldr	r2, [pc, #68]	@ (800476c <xTimerCreateTimerTask+0x90>)
 8004728:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <xTimerCreateTimerTask+0x90>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004732:	2301      	movs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	613b      	str	r3, [r7, #16]
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004754:	697b      	ldr	r3, [r7, #20]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200009cc 	.word	0x200009cc
 8004764:	080065fc 	.word	0x080065fc
 8004768:	08004965 	.word	0x08004965
 800476c:	200009d0 	.word	0x200009d0

08004770 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800477e:	2028      	movs	r0, #40	@ 0x28
 8004780:	f000 fdbc 	bl	80052fc <pvPortMalloc>
 8004784:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f805 	bl	80047b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80047a8:	697b      	ldr	r3, [r7, #20]
	}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	617b      	str	r3, [r7, #20]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01e      	beq.n	8004822 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80047e4:	f000 fad6 	bl	8004d94 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fab3 	bl	8002d70 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	b2da      	uxtb	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	@ 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <xTimerGenericCommand+0x30>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800485c:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <xTimerGenericCommand+0x98>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02a      	beq.n	80048ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	dc18      	bgt.n	80048a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004876:	f7ff fe25 	bl	80044c4 <xTaskGetSchedulerState>
 800487a:	4603      	mov	r3, r0
 800487c:	2b02      	cmp	r3, #2
 800487e:	d109      	bne.n	8004894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004880:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <xTimerGenericCommand+0x98>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	f107 0114 	add.w	r1, r7, #20
 8004888:	2300      	movs	r3, #0
 800488a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488c:	f7fe fc46 	bl	800311c <xQueueGenericSend>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24
 8004892:	e012      	b.n	80048ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <xTimerGenericCommand+0x98>)
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	f107 0114 	add.w	r1, r7, #20
 800489c:	2300      	movs	r3, #0
 800489e:	2200      	movs	r2, #0
 80048a0:	f7fe fc3c 	bl	800311c <xQueueGenericSend>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80048a6:	e008      	b.n	80048ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <xTimerGenericCommand+0x98>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	f107 0114 	add.w	r1, r7, #20
 80048b0:	2300      	movs	r3, #0
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	f7fe fd34 	bl	8003320 <xQueueGenericSendFromISR>
 80048b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	@ 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200009cc 	.word	0x200009cc

080048c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d2:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <prvProcessExpiredTimer+0x98>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	3304      	adds	r3, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe faaf 	bl	8002e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d023      	beq.n	800493c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	18d1      	adds	r1, r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f000 f8d5 	bl	8004ab0 <prvInsertTimerInActiveList>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800490c:	2300      	movs	r3, #0
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2300      	movs	r3, #0
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	2100      	movs	r1, #0
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	f7ff ff88 	bl	800482c <xTimerGenericCommand>
 800491c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d114      	bne.n	800494e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	b2da      	uxtb	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	4798      	blx	r3
}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200009c4 	.word	0x200009c4

08004964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f859 	bl	8004a28 <prvGetNextExpireTime>
 8004976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4619      	mov	r1, r3
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f805 	bl	800498c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004982:	f000 f8d7 	bl	8004b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004986:	bf00      	nop
 8004988:	e7f0      	b.n	800496c <prvTimerTask+0x8>
	...

0800498c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004996:	f7ff f9b1 	bl	8003cfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f866 	bl	8004a70 <prvSampleTimeNow>
 80049a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d130      	bne.n	8004a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <prvProcessTimerOrBlockTask+0x3c>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d806      	bhi.n	80049c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ba:	f7ff f9ad 	bl	8003d18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ff81 	bl	80048c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049c6:	e024      	b.n	8004a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ce:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <prvProcessTimerOrBlockTask+0x90>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <prvProcessTimerOrBlockTask+0x50>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <prvProcessTimerOrBlockTask+0x52>
 80049dc:	2300      	movs	r3, #0
 80049de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <prvProcessTimerOrBlockTask+0x94>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fe ff51 	bl	8003894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049f2:	f7ff f991 	bl	8003d18 <xTaskResumeAll>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049fc:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <prvProcessTimerOrBlockTask+0x98>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
}
 8004a0c:	e001      	b.n	8004a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a0e:	f7ff f983 	bl	8003d18 <xTaskResumeAll>
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200009c8 	.word	0x200009c8
 8004a20:	200009cc 	.word	0x200009cc
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <prvGetNextExpireTime+0x44>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <prvGetNextExpireTime+0x16>
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	e000      	b.n	8004a40 <prvGetNextExpireTime+0x18>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a4c:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <prvGetNextExpireTime+0x44>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e001      	b.n	8004a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	200009c4 	.word	0x200009c4

08004a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a78:	f7ff f9ec 	bl	8003e54 <xTaskGetTickCount>
 8004a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <prvSampleTimeNow+0x3c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d205      	bcs.n	8004a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a88:	f000 f91e 	bl	8004cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <prvSampleTimeNow+0x3c>)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200009d4 	.word	0x200009d4

08004ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d812      	bhi.n	8004afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e01b      	b.n	8004b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004aea:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <prvInsertTimerInActiveList+0x7c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7fe f96c 	bl	8002dd2 <vListInsert>
 8004afa:	e012      	b.n	8004b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d206      	bcs.n	8004b12 <prvInsertTimerInActiveList+0x62>
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d302      	bcc.n	8004b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e007      	b.n	8004b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b12:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <prvInsertTimerInActiveList+0x80>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fe f958 	bl	8002dd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b22:	697b      	ldr	r3, [r7, #20]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200009c8 	.word	0x200009c8
 8004b30:	200009c4 	.word	0x200009c4

08004b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	@ 0x30
 8004b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b3a:	e0b2      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f2c0 80af 	blt.w	8004ca2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe f975 	bl	8002e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff87 	bl	8004a70 <prvSampleTimeNow>
 8004b62:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b09      	cmp	r3, #9
 8004b68:	f200 8098 	bhi.w	8004c9c <prvProcessReceivedCommands+0x168>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <prvProcessReceivedCommands+0x40>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b9d 	.word	0x08004b9d
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004b9d 	.word	0x08004b9d
 8004b80:	08004c13 	.word	0x08004c13
 8004b84:	08004c27 	.word	0x08004c27
 8004b88:	08004c73 	.word	0x08004c73
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004b9d 	.word	0x08004b9d
 8004b94:	08004c13 	.word	0x08004c13
 8004b98:	08004c27 	.word	0x08004c27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	18d1      	adds	r1, r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bbc:	f7ff ff78 	bl	8004ab0 <prvInsertTimerInActiveList>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d06c      	beq.n	8004ca0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d061      	beq.n	8004ca0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	441a      	add	r2, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	2100      	movs	r1, #0
 8004bec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bee:	f7ff fe1d 	bl	800482c <xTimerGenericCommand>
 8004bf2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d152      	bne.n	8004ca0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	61bb      	str	r3, [r7, #24]
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	e7fd      	b.n	8004c0e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004c24:	e03d      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	617b      	str	r3, [r7, #20]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	18d1      	adds	r1, r2, r3
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c6c:	f7ff ff20 	bl	8004ab0 <prvInsertTimerInActiveList>
					break;
 8004c70:	e017      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004c80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c82:	f000 fc09 	bl	8005498 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c86:	e00c      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004c9a:	e002      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <prvProcessReceivedCommands+0x16e>
					break;
 8004ca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ca2:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <prvProcessReceivedCommands+0x190>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f107 0108 	add.w	r1, r7, #8
 8004caa:	2200      	movs	r2, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fbd5 	bl	800345c <xQueueReceive>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af41 	bne.w	8004b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	3728      	adds	r7, #40	@ 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200009cc 	.word	0x200009cc

08004cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cce:	e049      	b.n	8004d64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cda:	4b2c      	ldr	r3, [pc, #176]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe f8ab 	bl	8002e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02f      	beq.n	8004d64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d90e      	bls.n	8004d34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d22:	4b1a      	ldr	r3, [pc, #104]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f7fe f850 	bl	8002dd2 <vListInsert>
 8004d32:	e017      	b.n	8004d64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d34:	2300      	movs	r3, #0
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fd74 	bl	800482c <xTimerGenericCommand>
 8004d44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	603b      	str	r3, [r7, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	bf00      	nop
 8004d62:	e7fd      	b.n	8004d60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1b0      	bne.n	8004cd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d6e:	4b07      	ldr	r3, [pc, #28]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <prvSwitchTimerLists+0xc8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <prvSwitchTimerLists+0xc4>)
 8004d7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d7c:	4a04      	ldr	r2, [pc, #16]	@ (8004d90 <prvSwitchTimerLists+0xc8>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200009c4 	.word	0x200009c4
 8004d90:	200009c8 	.word	0x200009c8

08004d94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d9a:	f000 f98d 	bl	80050b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d9e:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <prvCheckForValidListAndQueue+0x60>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d120      	bne.n	8004de8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004da6:	4814      	ldr	r0, [pc, #80]	@ (8004df8 <prvCheckForValidListAndQueue+0x64>)
 8004da8:	f7fd ffc2 	bl	8002d30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dac:	4813      	ldr	r0, [pc, #76]	@ (8004dfc <prvCheckForValidListAndQueue+0x68>)
 8004dae:	f7fd ffbf 	bl	8002d30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004db2:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <prvCheckForValidListAndQueue+0x6c>)
 8004db4:	4a10      	ldr	r2, [pc, #64]	@ (8004df8 <prvCheckForValidListAndQueue+0x64>)
 8004db6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <prvCheckForValidListAndQueue+0x70>)
 8004dba:	4a10      	ldr	r2, [pc, #64]	@ (8004dfc <prvCheckForValidListAndQueue+0x68>)
 8004dbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <prvCheckForValidListAndQueue+0x74>)
 8004dc4:	4a11      	ldr	r2, [pc, #68]	@ (8004e0c <prvCheckForValidListAndQueue+0x78>)
 8004dc6:	210c      	movs	r1, #12
 8004dc8:	200a      	movs	r0, #10
 8004dca:	f7fe f8cf 	bl	8002f6c <xQueueGenericCreateStatic>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <prvCheckForValidListAndQueue+0x60>)
 8004dd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004dd4:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <prvCheckForValidListAndQueue+0x60>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <prvCheckForValidListAndQueue+0x60>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	490b      	ldr	r1, [pc, #44]	@ (8004e10 <prvCheckForValidListAndQueue+0x7c>)
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fd2c 	bl	8003840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004de8:	f000 f998 	bl	800511c <vPortExitCritical>
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200009cc 	.word	0x200009cc
 8004df8:	2000099c 	.word	0x2000099c
 8004dfc:	200009b0 	.word	0x200009b0
 8004e00:	200009c4 	.word	0x200009c4
 8004e04:	200009c8 	.word	0x200009c8
 8004e08:	20000a50 	.word	0x20000a50
 8004e0c:	200009d8 	.word	0x200009d8
 8004e10:	08006604 	.word	0x08006604

08004e14 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <pvTimerGetTimerID+0x2a>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004e3e:	f000 f93b 	bl	80050b8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004e48:	f000 f968 	bl	800511c <vPortExitCritical>

	return pvReturn;
 8004e4c:	693b      	ldr	r3, [r7, #16]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3b04      	subs	r3, #4
 8004e68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3b04      	subs	r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f023 0201 	bic.w	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e88:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <pxPortInitialiseStack+0x64>)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b14      	subs	r3, #20
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3b04      	subs	r3, #4
 8004e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f06f 0202 	mvn.w	r2, #2
 8004ea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b20      	subs	r3, #32
 8004eac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	08004ec1 	.word	0x08004ec1

08004ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eca:	4b13      	ldr	r3, [pc, #76]	@ (8004f18 <prvTaskExitError+0x58>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d00b      	beq.n	8004eec <prvTaskExitError+0x2c>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	60fb      	str	r3, [r7, #12]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <prvTaskExitError+0x28>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	60bb      	str	r3, [r7, #8]
}
 8004efe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f00:	bf00      	nop
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0fc      	beq.n	8004f02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	2000000c 	.word	0x2000000c
 8004f1c:	00000000 	.word	0x00000000

08004f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <pxCurrentTCBConst2>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	f380 8809 	msr	PSP, r0
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	4770      	bx	lr
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst2>:
 8004f40:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f48:	4808      	ldr	r0, [pc, #32]	@ (8004f6c <prvPortStartFirstTask+0x24>)
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	6800      	ldr	r0, [r0, #0]
 8004f4e:	f380 8808 	msr	MSP, r0
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8814 	msr	CONTROL, r0
 8004f5a:	b662      	cpsie	i
 8004f5c:	b661      	cpsie	f
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	df00      	svc	0
 8004f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed08 	.word	0xe000ed08

08004f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <xPortStartScheduler+0x124>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a47      	ldr	r2, [pc, #284]	@ (8005098 <xPortStartScheduler+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10b      	bne.n	8004f98 <xPortStartScheduler+0x28>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <xPortStartScheduler+0x124>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <xPortStartScheduler+0x12c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10b      	bne.n	8004fba <xPortStartScheduler+0x4a>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fba:	4b39      	ldr	r3, [pc, #228]	@ (80050a0 <xPortStartScheduler+0x130>)
 8004fbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	22ff      	movs	r2, #255	@ 0xff
 8004fca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4b31      	ldr	r3, [pc, #196]	@ (80050a4 <xPortStartScheduler+0x134>)
 8004fe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fe2:	4b31      	ldr	r3, [pc, #196]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe8:	e009      	b.n	8004ffe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fea:	4b2f      	ldr	r3, [pc, #188]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80050a8 <xPortStartScheduler+0x138>)
 8004ff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005006:	2b80      	cmp	r3, #128	@ 0x80
 8005008:	d0ef      	beq.n	8004fea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800500a:	4b27      	ldr	r3, [pc, #156]	@ (80050a8 <xPortStartScheduler+0x138>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1c3 0307 	rsb	r3, r3, #7
 8005012:	2b04      	cmp	r3, #4
 8005014:	d00b      	beq.n	800502e <xPortStartScheduler+0xbe>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60bb      	str	r3, [r7, #8]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800502e:	4b1e      	ldr	r3, [pc, #120]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005038:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <xPortStartScheduler+0x138>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005040:	4a19      	ldr	r2, [pc, #100]	@ (80050a8 <xPortStartScheduler+0x138>)
 8005042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <xPortStartScheduler+0x13c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a16      	ldr	r2, [pc, #88]	@ (80050ac <xPortStartScheduler+0x13c>)
 8005052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <xPortStartScheduler+0x13c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a13      	ldr	r2, [pc, #76]	@ (80050ac <xPortStartScheduler+0x13c>)
 800505e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005064:	f000 f8da 	bl	800521c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005068:	4b11      	ldr	r3, [pc, #68]	@ (80050b0 <xPortStartScheduler+0x140>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800506e:	f000 f8f9 	bl	8005264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <xPortStartScheduler+0x144>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a0f      	ldr	r2, [pc, #60]	@ (80050b4 <xPortStartScheduler+0x144>)
 8005078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800507e:	f7ff ff63 	bl	8004f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005082:	f7fe ffb1 	bl	8003fe8 <vTaskSwitchContext>
	prvTaskExitError();
 8005086:	f7ff ff1b 	bl	8004ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	e000ed00 	.word	0xe000ed00
 8005098:	410fc271 	.word	0x410fc271
 800509c:	410fc270 	.word	0x410fc270
 80050a0:	e000e400 	.word	0xe000e400
 80050a4:	20000a98 	.word	0x20000a98
 80050a8:	20000a9c 	.word	0x20000a9c
 80050ac:	e000ed20 	.word	0xe000ed20
 80050b0:	2000000c 	.word	0x2000000c
 80050b4:	e000ef34 	.word	0xe000ef34

080050b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050d2:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <vPortEnterCritical+0x5c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d110      	bne.n	8005106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <vPortEnterCritical+0x60>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <vPortEnterCritical+0x4e>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	603b      	str	r3, [r7, #0]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortEnterCritical+0x4a>
	}
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005122:	4b12      	ldr	r3, [pc, #72]	@ (800516c <vPortExitCritical+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <vPortExitCritical+0x26>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	e7fd      	b.n	800513e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <vPortExitCritical+0x50>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	4a08      	ldr	r2, [pc, #32]	@ (800516c <vPortExitCritical+0x50>)
 800514a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <vPortExitCritical+0x50>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <vPortExitCritical+0x44>
 8005154:	2300      	movs	r3, #0
 8005156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f383 8811 	msr	BASEPRI, r3
}
 800515e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	2000000c 	.word	0x2000000c

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f01e 0f10 	tst.w	lr, #16
 8005180:	bf08      	it	eq
 8005182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005194:	f380 8811 	msr	BASEPRI, r0
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f7fe ff22 	bl	8003fe8 <vTaskSwitchContext>
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f380 8811 	msr	BASEPRI, r0
 80051ac:	bc09      	pop	{r0, r3}
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	6808      	ldr	r0, [r1, #0]
 80051b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	f01e 0f10 	tst.w	lr, #16
 80051ba:	bf08      	it	eq
 80051bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051c0:	f380 8809 	msr	PSP, r0
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst>:
 80051d0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051f2:	f7fe fe3f 	bl	8003e74 <xTaskIncrementTick>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051fc:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <xPortSysTickHandler+0x40>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f383 8811 	msr	BASEPRI, r3
}
 800520e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <vPortSetupTimerInterrupt+0x38>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <vPortSetupTimerInterrupt+0x3c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0a      	ldr	r2, [pc, #40]	@ (800525c <vPortSetupTimerInterrupt+0x40>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	4a09      	ldr	r2, [pc, #36]	@ (8005260 <vPortSetupTimerInterrupt+0x44>)
 800523a:	3b01      	subs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800523e:	4b04      	ldr	r3, [pc, #16]	@ (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010
 8005254:	e000e018 	.word	0xe000e018
 8005258:	20000000 	.word	0x20000000
 800525c:	10624dd3 	.word	0x10624dd3
 8005260:	e000e014 	.word	0xe000e014

08005264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005274 <vPortEnableVFP+0x10>
 8005268:	6801      	ldr	r1, [r0, #0]
 800526a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800526e:	6001      	str	r1, [r0, #0]
 8005270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005272:	bf00      	nop
 8005274:	e000ed88 	.word	0xe000ed88

08005278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d915      	bls.n	80052b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800528a:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <vPortValidateInterruptPriority+0x74>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005294:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <vPortValidateInterruptPriority+0x78>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20b      	bcs.n	80052b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052b6:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <vPortValidateInterruptPriority+0x7c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052be:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <vPortValidateInterruptPriority+0x80>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90b      	bls.n	80052de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	603b      	str	r3, [r7, #0]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vPortValidateInterruptPriority+0x62>
	}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	e000e3f0 	.word	0xe000e3f0
 80052f0:	20000a98 	.word	0x20000a98
 80052f4:	e000ed0c 	.word	0xe000ed0c
 80052f8:	20000a9c 	.word	0x20000a9c

080052fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	@ 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005308:	f7fe fcf8 	bl	8003cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800530c:	4b5c      	ldr	r3, [pc, #368]	@ (8005480 <pvPortMalloc+0x184>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005314:	f000 f924 	bl	8005560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005318:	4b5a      	ldr	r3, [pc, #360]	@ (8005484 <pvPortMalloc+0x188>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 8095 	bne.w	8005450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01e      	beq.n	800536a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800532c:	2208      	movs	r2, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d015      	beq.n	800536a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f023 0307 	bic.w	r3, r3, #7
 8005344:	3308      	adds	r3, #8
 8005346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <pvPortMalloc+0x6e>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d06f      	beq.n	8005450 <pvPortMalloc+0x154>
 8005370:	4b45      	ldr	r3, [pc, #276]	@ (8005488 <pvPortMalloc+0x18c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d86a      	bhi.n	8005450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800537a:	4b44      	ldr	r3, [pc, #272]	@ (800548c <pvPortMalloc+0x190>)
 800537c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800537e:	4b43      	ldr	r3, [pc, #268]	@ (800548c <pvPortMalloc+0x190>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005384:	e004      	b.n	8005390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d903      	bls.n	80053a2 <pvPortMalloc+0xa6>
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053a2:	4b37      	ldr	r3, [pc, #220]	@ (8005480 <pvPortMalloc+0x184>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d051      	beq.n	8005450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4413      	add	r3, r2
 80053b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	2308      	movs	r3, #8
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d920      	bls.n	8005410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <pvPortMalloc+0xfc>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	613b      	str	r3, [r7, #16]
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800540a:	69b8      	ldr	r0, [r7, #24]
 800540c:	f000 f90a 	bl	8005624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005410:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <pvPortMalloc+0x18c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	4a1b      	ldr	r2, [pc, #108]	@ (8005488 <pvPortMalloc+0x18c>)
 800541c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541e:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <pvPortMalloc+0x18c>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <pvPortMalloc+0x194>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d203      	bcs.n	8005432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800542a:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <pvPortMalloc+0x18c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	@ (8005490 <pvPortMalloc+0x194>)
 8005430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4b13      	ldr	r3, [pc, #76]	@ (8005484 <pvPortMalloc+0x188>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	431a      	orrs	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005446:	4b13      	ldr	r3, [pc, #76]	@ (8005494 <pvPortMalloc+0x198>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3301      	adds	r3, #1
 800544c:	4a11      	ldr	r2, [pc, #68]	@ (8005494 <pvPortMalloc+0x198>)
 800544e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005450:	f7fe fc62 	bl	8003d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <pvPortMalloc+0x17a>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60fb      	str	r3, [r7, #12]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <pvPortMalloc+0x176>
	return pvReturn;
 8005476:	69fb      	ldr	r3, [r7, #28]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	@ 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200058c8 	.word	0x200058c8
 8005484:	200058dc 	.word	0x200058dc
 8005488:	200058cc 	.word	0x200058cc
 800548c:	200058c0 	.word	0x200058c0
 8005490:	200058d0 	.word	0x200058d0
 8005494:	200058d4 	.word	0x200058d4

08005498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d04f      	beq.n	800554a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054aa:	2308      	movs	r3, #8
 80054ac:	425b      	negs	r3, r3
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b25      	ldr	r3, [pc, #148]	@ (8005554 <vPortFree+0xbc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <vPortFree+0x46>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60fb      	str	r3, [r7, #12]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <vPortFree+0x66>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60bb      	str	r3, [r7, #8]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <vPortFree+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01e      	beq.n	800554a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b0e      	ldr	r3, [pc, #56]	@ (8005554 <vPortFree+0xbc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005524:	f7fe fbea 	bl	8003cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <vPortFree+0xc0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4413      	add	r3, r2
 8005532:	4a09      	ldr	r2, [pc, #36]	@ (8005558 <vPortFree+0xc0>)
 8005534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f000 f874 	bl	8005624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800553c:	4b07      	ldr	r3, [pc, #28]	@ (800555c <vPortFree+0xc4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a06      	ldr	r2, [pc, #24]	@ (800555c <vPortFree+0xc4>)
 8005544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005546:	f7fe fbe7 	bl	8003d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200058dc 	.word	0x200058dc
 8005558:	200058cc 	.word	0x200058cc
 800555c:	200058d8 	.word	0x200058d8

08005560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005566:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800556a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800556c:	4b27      	ldr	r3, [pc, #156]	@ (800560c <prvHeapInit+0xac>)
 800556e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3307      	adds	r3, #7
 800557e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <prvHeapInit+0xac>)
 8005590:	4413      	add	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005598:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <prvHeapInit+0xb0>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800559e:	4b1c      	ldr	r3, [pc, #112]	@ (8005610 <prvHeapInit+0xb0>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	4413      	add	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055ac:	2208      	movs	r2, #8
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0307 	bic.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a15      	ldr	r2, [pc, #84]	@ (8005614 <prvHeapInit+0xb4>)
 80055c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <prvHeapInit+0xb4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ca:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <prvHeapInit+0xb4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <prvHeapInit+0xb4>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <prvHeapInit+0xb8>)
 80055ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a09      	ldr	r2, [pc, #36]	@ (800561c <prvHeapInit+0xbc>)
 80055f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055f8:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <prvHeapInit+0xc0>)
 80055fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055fe:	601a      	str	r2, [r3, #0]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	20000aa0 	.word	0x20000aa0
 8005610:	200058c0 	.word	0x200058c0
 8005614:	200058c8 	.word	0x200058c8
 8005618:	200058d0 	.word	0x200058d0
 800561c:	200058cc 	.word	0x200058cc
 8005620:	200058dc 	.word	0x200058dc

08005624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800562c:	4b28      	ldr	r3, [pc, #160]	@ (80056d0 <prvInsertBlockIntoFreeList+0xac>)
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e002      	b.n	8005638 <prvInsertBlockIntoFreeList+0x14>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d8f7      	bhi.n	8005632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4413      	add	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d108      	bne.n	8005666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	441a      	add	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d118      	bne.n	80056ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d00d      	beq.n	80056a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	441a      	add	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e008      	b.n	80056b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <prvInsertBlockIntoFreeList+0xb0>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e003      	b.n	80056b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d002      	beq.n	80056c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	200058c0 	.word	0x200058c0
 80056d4:	200058c8 	.word	0x200058c8

080056d8 <std>:
 80056d8:	2300      	movs	r3, #0
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	e9c0 3300 	strd	r3, r3, [r0]
 80056e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056e6:	6083      	str	r3, [r0, #8]
 80056e8:	8181      	strh	r1, [r0, #12]
 80056ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80056ec:	81c2      	strh	r2, [r0, #14]
 80056ee:	6183      	str	r3, [r0, #24]
 80056f0:	4619      	mov	r1, r3
 80056f2:	2208      	movs	r2, #8
 80056f4:	305c      	adds	r0, #92	@ 0x5c
 80056f6:	f000 f906 	bl	8005906 <memset>
 80056fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <std+0x58>)
 80056fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80056fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <std+0x5c>)
 8005700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <std+0x60>)
 8005704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005706:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <std+0x64>)
 8005708:	6323      	str	r3, [r4, #48]	@ 0x30
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <std+0x68>)
 800570c:	6224      	str	r4, [r4, #32]
 800570e:	429c      	cmp	r4, r3
 8005710:	d006      	beq.n	8005720 <std+0x48>
 8005712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005716:	4294      	cmp	r4, r2
 8005718:	d002      	beq.n	8005720 <std+0x48>
 800571a:	33d0      	adds	r3, #208	@ 0xd0
 800571c:	429c      	cmp	r4, r3
 800571e:	d105      	bne.n	800572c <std+0x54>
 8005720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005728:	f000 b966 	b.w	80059f8 <__retarget_lock_init_recursive>
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	08005881 	.word	0x08005881
 8005734:	080058a3 	.word	0x080058a3
 8005738:	080058db 	.word	0x080058db
 800573c:	080058ff 	.word	0x080058ff
 8005740:	200058e0 	.word	0x200058e0

08005744 <stdio_exit_handler>:
 8005744:	4a02      	ldr	r2, [pc, #8]	@ (8005750 <stdio_exit_handler+0xc>)
 8005746:	4903      	ldr	r1, [pc, #12]	@ (8005754 <stdio_exit_handler+0x10>)
 8005748:	4803      	ldr	r0, [pc, #12]	@ (8005758 <stdio_exit_handler+0x14>)
 800574a:	f000 b869 	b.w	8005820 <_fwalk_sglue>
 800574e:	bf00      	nop
 8005750:	20000010 	.word	0x20000010
 8005754:	080062b5 	.word	0x080062b5
 8005758:	20000020 	.word	0x20000020

0800575c <cleanup_stdio>:
 800575c:	6841      	ldr	r1, [r0, #4]
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <cleanup_stdio+0x34>)
 8005760:	4299      	cmp	r1, r3
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	d001      	beq.n	800576c <cleanup_stdio+0x10>
 8005768:	f000 fda4 	bl	80062b4 <_fflush_r>
 800576c:	68a1      	ldr	r1, [r4, #8]
 800576e:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <cleanup_stdio+0x38>)
 8005770:	4299      	cmp	r1, r3
 8005772:	d002      	beq.n	800577a <cleanup_stdio+0x1e>
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fd9d 	bl	80062b4 <_fflush_r>
 800577a:	68e1      	ldr	r1, [r4, #12]
 800577c:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <cleanup_stdio+0x3c>)
 800577e:	4299      	cmp	r1, r3
 8005780:	d004      	beq.n	800578c <cleanup_stdio+0x30>
 8005782:	4620      	mov	r0, r4
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	f000 bd94 	b.w	80062b4 <_fflush_r>
 800578c:	bd10      	pop	{r4, pc}
 800578e:	bf00      	nop
 8005790:	200058e0 	.word	0x200058e0
 8005794:	20005948 	.word	0x20005948
 8005798:	200059b0 	.word	0x200059b0

0800579c <global_stdio_init.part.0>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <global_stdio_init.part.0+0x30>)
 80057a0:	4c0b      	ldr	r4, [pc, #44]	@ (80057d0 <global_stdio_init.part.0+0x34>)
 80057a2:	4a0c      	ldr	r2, [pc, #48]	@ (80057d4 <global_stdio_init.part.0+0x38>)
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	4620      	mov	r0, r4
 80057a8:	2200      	movs	r2, #0
 80057aa:	2104      	movs	r1, #4
 80057ac:	f7ff ff94 	bl	80056d8 <std>
 80057b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057b4:	2201      	movs	r2, #1
 80057b6:	2109      	movs	r1, #9
 80057b8:	f7ff ff8e 	bl	80056d8 <std>
 80057bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057c0:	2202      	movs	r2, #2
 80057c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c6:	2112      	movs	r1, #18
 80057c8:	f7ff bf86 	b.w	80056d8 <std>
 80057cc:	20005a18 	.word	0x20005a18
 80057d0:	200058e0 	.word	0x200058e0
 80057d4:	08005745 	.word	0x08005745

080057d8 <__sfp_lock_acquire>:
 80057d8:	4801      	ldr	r0, [pc, #4]	@ (80057e0 <__sfp_lock_acquire+0x8>)
 80057da:	f000 b90e 	b.w	80059fa <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	20005a21 	.word	0x20005a21

080057e4 <__sfp_lock_release>:
 80057e4:	4801      	ldr	r0, [pc, #4]	@ (80057ec <__sfp_lock_release+0x8>)
 80057e6:	f000 b909 	b.w	80059fc <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	20005a21 	.word	0x20005a21

080057f0 <__sinit>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4604      	mov	r4, r0
 80057f4:	f7ff fff0 	bl	80057d8 <__sfp_lock_acquire>
 80057f8:	6a23      	ldr	r3, [r4, #32]
 80057fa:	b11b      	cbz	r3, 8005804 <__sinit+0x14>
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f7ff bff0 	b.w	80057e4 <__sfp_lock_release>
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <__sinit+0x28>)
 8005806:	6223      	str	r3, [r4, #32]
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <__sinit+0x2c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f5      	bne.n	80057fc <__sinit+0xc>
 8005810:	f7ff ffc4 	bl	800579c <global_stdio_init.part.0>
 8005814:	e7f2      	b.n	80057fc <__sinit+0xc>
 8005816:	bf00      	nop
 8005818:	0800575d 	.word	0x0800575d
 800581c:	20005a18 	.word	0x20005a18

08005820 <_fwalk_sglue>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	4607      	mov	r7, r0
 8005826:	4688      	mov	r8, r1
 8005828:	4614      	mov	r4, r2
 800582a:	2600      	movs	r6, #0
 800582c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005830:	f1b9 0901 	subs.w	r9, r9, #1
 8005834:	d505      	bpl.n	8005842 <_fwalk_sglue+0x22>
 8005836:	6824      	ldr	r4, [r4, #0]
 8005838:	2c00      	cmp	r4, #0
 800583a:	d1f7      	bne.n	800582c <_fwalk_sglue+0xc>
 800583c:	4630      	mov	r0, r6
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d907      	bls.n	8005858 <_fwalk_sglue+0x38>
 8005848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800584c:	3301      	adds	r3, #1
 800584e:	d003      	beq.n	8005858 <_fwalk_sglue+0x38>
 8005850:	4629      	mov	r1, r5
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	4306      	orrs	r6, r0
 8005858:	3568      	adds	r5, #104	@ 0x68
 800585a:	e7e9      	b.n	8005830 <_fwalk_sglue+0x10>

0800585c <iprintf>:
 800585c:	b40f      	push	{r0, r1, r2, r3}
 800585e:	b507      	push	{r0, r1, r2, lr}
 8005860:	4906      	ldr	r1, [pc, #24]	@ (800587c <iprintf+0x20>)
 8005862:	ab04      	add	r3, sp, #16
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	f853 2b04 	ldr.w	r2, [r3], #4
 800586a:	6881      	ldr	r1, [r0, #8]
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	f000 f9f7 	bl	8005c60 <_vfiprintf_r>
 8005872:	b003      	add	sp, #12
 8005874:	f85d eb04 	ldr.w	lr, [sp], #4
 8005878:	b004      	add	sp, #16
 800587a:	4770      	bx	lr
 800587c:	2000001c 	.word	0x2000001c

08005880 <__sread>:
 8005880:	b510      	push	{r4, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	f000 f868 	bl	800595c <_read_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	bfab      	itete	ge
 8005890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005892:	89a3      	ldrhlt	r3, [r4, #12]
 8005894:	181b      	addge	r3, r3, r0
 8005896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800589a:	bfac      	ite	ge
 800589c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800589e:	81a3      	strhlt	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__swrite>:
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	461f      	mov	r7, r3
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	05db      	lsls	r3, r3, #23
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4616      	mov	r6, r2
 80058b2:	d505      	bpl.n	80058c0 <__swrite+0x1e>
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	2302      	movs	r3, #2
 80058ba:	2200      	movs	r2, #0
 80058bc:	f000 f83c 	bl	8005938 <_lseek_r>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	4632      	mov	r2, r6
 80058ce:	463b      	mov	r3, r7
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	f000 b853 	b.w	8005980 <_write_r>

080058da <__sseek>:
 80058da:	b510      	push	{r4, lr}
 80058dc:	460c      	mov	r4, r1
 80058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e2:	f000 f829 	bl	8005938 <_lseek_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	bf15      	itete	ne
 80058ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058f6:	81a3      	strheq	r3, [r4, #12]
 80058f8:	bf18      	it	ne
 80058fa:	81a3      	strhne	r3, [r4, #12]
 80058fc:	bd10      	pop	{r4, pc}

080058fe <__sclose>:
 80058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005902:	f000 b809 	b.w	8005918 <_close_r>

08005906 <memset>:
 8005906:	4402      	add	r2, r0
 8005908:	4603      	mov	r3, r0
 800590a:	4293      	cmp	r3, r2
 800590c:	d100      	bne.n	8005910 <memset+0xa>
 800590e:	4770      	bx	lr
 8005910:	f803 1b01 	strb.w	r1, [r3], #1
 8005914:	e7f9      	b.n	800590a <memset+0x4>
	...

08005918 <_close_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d06      	ldr	r5, [pc, #24]	@ (8005934 <_close_r+0x1c>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	f7fb fb3f 	bl	8000fa6 <_close>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_close_r+0x1a>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_close_r+0x1a>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	20005a1c 	.word	0x20005a1c

08005938 <_lseek_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d07      	ldr	r5, [pc, #28]	@ (8005958 <_lseek_r+0x20>)
 800593c:	4604      	mov	r4, r0
 800593e:	4608      	mov	r0, r1
 8005940:	4611      	mov	r1, r2
 8005942:	2200      	movs	r2, #0
 8005944:	602a      	str	r2, [r5, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f7fb fb54 	bl	8000ff4 <_lseek>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_lseek_r+0x1e>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_lseek_r+0x1e>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20005a1c 	.word	0x20005a1c

0800595c <_read_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	@ (800597c <_read_r+0x20>)
 8005960:	4604      	mov	r4, r0
 8005962:	4608      	mov	r0, r1
 8005964:	4611      	mov	r1, r2
 8005966:	2200      	movs	r2, #0
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fb fae2 	bl	8000f34 <_read>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_read_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_read_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	20005a1c 	.word	0x20005a1c

08005980 <_write_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	@ (80059a0 <_write_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fb faed 	bl	8000f6e <_write>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_write_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_write_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20005a1c 	.word	0x20005a1c

080059a4 <__errno>:
 80059a4:	4b01      	ldr	r3, [pc, #4]	@ (80059ac <__errno+0x8>)
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	2000001c 	.word	0x2000001c

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4d0d      	ldr	r5, [pc, #52]	@ (80059e8 <__libc_init_array+0x38>)
 80059b4:	4c0d      	ldr	r4, [pc, #52]	@ (80059ec <__libc_init_array+0x3c>)
 80059b6:	1b64      	subs	r4, r4, r5
 80059b8:	10a4      	asrs	r4, r4, #2
 80059ba:	2600      	movs	r6, #0
 80059bc:	42a6      	cmp	r6, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	4d0b      	ldr	r5, [pc, #44]	@ (80059f0 <__libc_init_array+0x40>)
 80059c2:	4c0c      	ldr	r4, [pc, #48]	@ (80059f4 <__libc_init_array+0x44>)
 80059c4:	f000 fdc6 	bl	8006554 <_init>
 80059c8:	1b64      	subs	r4, r4, r5
 80059ca:	10a4      	asrs	r4, r4, #2
 80059cc:	2600      	movs	r6, #0
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d8:	4798      	blx	r3
 80059da:	3601      	adds	r6, #1
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e2:	4798      	blx	r3
 80059e4:	3601      	adds	r6, #1
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08006660 	.word	0x08006660
 80059ec:	08006660 	.word	0x08006660
 80059f0:	08006660 	.word	0x08006660
 80059f4:	08006664 	.word	0x08006664

080059f8 <__retarget_lock_init_recursive>:
 80059f8:	4770      	bx	lr

080059fa <__retarget_lock_acquire_recursive>:
 80059fa:	4770      	bx	lr

080059fc <__retarget_lock_release_recursive>:
 80059fc:	4770      	bx	lr

080059fe <memcpy>:
 80059fe:	440a      	add	r2, r1
 8005a00:	4291      	cmp	r1, r2
 8005a02:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a06:	d100      	bne.n	8005a0a <memcpy+0xc>
 8005a08:	4770      	bx	lr
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a14:	4291      	cmp	r1, r2
 8005a16:	d1f9      	bne.n	8005a0c <memcpy+0xe>
 8005a18:	bd10      	pop	{r4, pc}
	...

08005a1c <_free_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	d041      	beq.n	8005aa8 <_free_r+0x8c>
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f0c      	subs	r4, r1, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	18e4      	addlt	r4, r4, r3
 8005a30:	f000 f8e0 	bl	8005bf4 <__malloc_lock>
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <_free_r+0x90>)
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	b933      	cbnz	r3, 8005a48 <_free_r+0x2c>
 8005a3a:	6063      	str	r3, [r4, #4]
 8005a3c:	6014      	str	r4, [r2, #0]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a44:	f000 b8dc 	b.w	8005c00 <__malloc_unlock>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d908      	bls.n	8005a5e <_free_r+0x42>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	1821      	adds	r1, r4, r0
 8005a50:	428b      	cmp	r3, r1
 8005a52:	bf01      	itttt	eq
 8005a54:	6819      	ldreq	r1, [r3, #0]
 8005a56:	685b      	ldreq	r3, [r3, #4]
 8005a58:	1809      	addeq	r1, r1, r0
 8005a5a:	6021      	streq	r1, [r4, #0]
 8005a5c:	e7ed      	b.n	8005a3a <_free_r+0x1e>
 8005a5e:	461a      	mov	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b10b      	cbz	r3, 8005a68 <_free_r+0x4c>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d9fa      	bls.n	8005a5e <_free_r+0x42>
 8005a68:	6811      	ldr	r1, [r2, #0]
 8005a6a:	1850      	adds	r0, r2, r1
 8005a6c:	42a0      	cmp	r0, r4
 8005a6e:	d10b      	bne.n	8005a88 <_free_r+0x6c>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	4401      	add	r1, r0
 8005a74:	1850      	adds	r0, r2, r1
 8005a76:	4283      	cmp	r3, r0
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	d1e0      	bne.n	8005a3e <_free_r+0x22>
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6053      	str	r3, [r2, #4]
 8005a82:	4408      	add	r0, r1
 8005a84:	6010      	str	r0, [r2, #0]
 8005a86:	e7da      	b.n	8005a3e <_free_r+0x22>
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x74>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	e7d6      	b.n	8005a3e <_free_r+0x22>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	1821      	adds	r1, r4, r0
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf04      	itt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	bf04      	itt	eq
 8005aa0:	1809      	addeq	r1, r1, r0
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	6054      	str	r4, [r2, #4]
 8005aa6:	e7ca      	b.n	8005a3e <_free_r+0x22>
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20005a28 	.word	0x20005a28

08005ab0 <sbrk_aligned>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8005af0 <sbrk_aligned+0x40>)
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	6831      	ldr	r1, [r6, #0]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	b911      	cbnz	r1, 8005ac2 <sbrk_aligned+0x12>
 8005abc:	f000 fcb6 	bl	800642c <_sbrk_r>
 8005ac0:	6030      	str	r0, [r6, #0]
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 fcb1 	bl	800642c <_sbrk_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d103      	bne.n	8005ad6 <sbrk_aligned+0x26>
 8005ace:	f04f 34ff 	mov.w	r4, #4294967295
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d0f8      	beq.n	8005ad2 <sbrk_aligned+0x22>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 fca2 	bl	800642c <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d1f2      	bne.n	8005ad2 <sbrk_aligned+0x22>
 8005aec:	e7ef      	b.n	8005ace <sbrk_aligned+0x1e>
 8005aee:	bf00      	nop
 8005af0:	20005a24 	.word	0x20005a24

08005af4 <_malloc_r>:
 8005af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	1ccd      	adds	r5, r1, #3
 8005afa:	f025 0503 	bic.w	r5, r5, #3
 8005afe:	3508      	adds	r5, #8
 8005b00:	2d0c      	cmp	r5, #12
 8005b02:	bf38      	it	cc
 8005b04:	250c      	movcc	r5, #12
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	4606      	mov	r6, r0
 8005b0a:	db01      	blt.n	8005b10 <_malloc_r+0x1c>
 8005b0c:	42a9      	cmp	r1, r5
 8005b0e:	d904      	bls.n	8005b1a <_malloc_r+0x26>
 8005b10:	230c      	movs	r3, #12
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	2000      	movs	r0, #0
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bf0 <_malloc_r+0xfc>
 8005b1e:	f000 f869 	bl	8005bf4 <__malloc_lock>
 8005b22:	f8d8 3000 	ldr.w	r3, [r8]
 8005b26:	461c      	mov	r4, r3
 8005b28:	bb44      	cbnz	r4, 8005b7c <_malloc_r+0x88>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff ffbf 	bl	8005ab0 <sbrk_aligned>
 8005b32:	1c43      	adds	r3, r0, #1
 8005b34:	4604      	mov	r4, r0
 8005b36:	d158      	bne.n	8005bea <_malloc_r+0xf6>
 8005b38:	f8d8 4000 	ldr.w	r4, [r8]
 8005b3c:	4627      	mov	r7, r4
 8005b3e:	2f00      	cmp	r7, #0
 8005b40:	d143      	bne.n	8005bca <_malloc_r+0xd6>
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	d04b      	beq.n	8005bde <_malloc_r+0xea>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	eb04 0903 	add.w	r9, r4, r3
 8005b50:	f000 fc6c 	bl	800642c <_sbrk_r>
 8005b54:	4581      	cmp	r9, r0
 8005b56:	d142      	bne.n	8005bde <_malloc_r+0xea>
 8005b58:	6821      	ldr	r1, [r4, #0]
 8005b5a:	1a6d      	subs	r5, r5, r1
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f7ff ffa6 	bl	8005ab0 <sbrk_aligned>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d03a      	beq.n	8005bde <_malloc_r+0xea>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	442b      	add	r3, r5
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	bb62      	cbnz	r2, 8005bd0 <_malloc_r+0xdc>
 8005b76:	f8c8 7000 	str.w	r7, [r8]
 8005b7a:	e00f      	b.n	8005b9c <_malloc_r+0xa8>
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	1b52      	subs	r2, r2, r5
 8005b80:	d420      	bmi.n	8005bc4 <_malloc_r+0xd0>
 8005b82:	2a0b      	cmp	r2, #11
 8005b84:	d917      	bls.n	8005bb6 <_malloc_r+0xc2>
 8005b86:	1961      	adds	r1, r4, r5
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	6025      	str	r5, [r4, #0]
 8005b8c:	bf18      	it	ne
 8005b8e:	6059      	strne	r1, [r3, #4]
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	bf08      	it	eq
 8005b94:	f8c8 1000 	streq.w	r1, [r8]
 8005b98:	5162      	str	r2, [r4, r5]
 8005b9a:	604b      	str	r3, [r1, #4]
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f000 f82f 	bl	8005c00 <__malloc_unlock>
 8005ba2:	f104 000b 	add.w	r0, r4, #11
 8005ba6:	1d23      	adds	r3, r4, #4
 8005ba8:	f020 0007 	bic.w	r0, r0, #7
 8005bac:	1ac2      	subs	r2, r0, r3
 8005bae:	bf1c      	itt	ne
 8005bb0:	1a1b      	subne	r3, r3, r0
 8005bb2:	50a3      	strne	r3, [r4, r2]
 8005bb4:	e7af      	b.n	8005b16 <_malloc_r+0x22>
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	bf0c      	ite	eq
 8005bbc:	f8c8 2000 	streq.w	r2, [r8]
 8005bc0:	605a      	strne	r2, [r3, #4]
 8005bc2:	e7eb      	b.n	8005b9c <_malloc_r+0xa8>
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	6864      	ldr	r4, [r4, #4]
 8005bc8:	e7ae      	b.n	8005b28 <_malloc_r+0x34>
 8005bca:	463c      	mov	r4, r7
 8005bcc:	687f      	ldr	r7, [r7, #4]
 8005bce:	e7b6      	b.n	8005b3e <_malloc_r+0x4a>
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d1fb      	bne.n	8005bd0 <_malloc_r+0xdc>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6053      	str	r3, [r2, #4]
 8005bdc:	e7de      	b.n	8005b9c <_malloc_r+0xa8>
 8005bde:	230c      	movs	r3, #12
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	4630      	mov	r0, r6
 8005be4:	f000 f80c 	bl	8005c00 <__malloc_unlock>
 8005be8:	e794      	b.n	8005b14 <_malloc_r+0x20>
 8005bea:	6005      	str	r5, [r0, #0]
 8005bec:	e7d6      	b.n	8005b9c <_malloc_r+0xa8>
 8005bee:	bf00      	nop
 8005bf0:	20005a28 	.word	0x20005a28

08005bf4 <__malloc_lock>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	@ (8005bfc <__malloc_lock+0x8>)
 8005bf6:	f7ff bf00 	b.w	80059fa <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20005a20 	.word	0x20005a20

08005c00 <__malloc_unlock>:
 8005c00:	4801      	ldr	r0, [pc, #4]	@ (8005c08 <__malloc_unlock+0x8>)
 8005c02:	f7ff befb 	b.w	80059fc <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	20005a20 	.word	0x20005a20

08005c0c <__sfputc_r>:
 8005c0c:	6893      	ldr	r3, [r2, #8]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	b410      	push	{r4}
 8005c14:	6093      	str	r3, [r2, #8]
 8005c16:	da08      	bge.n	8005c2a <__sfputc_r+0x1e>
 8005c18:	6994      	ldr	r4, [r2, #24]
 8005c1a:	42a3      	cmp	r3, r4
 8005c1c:	db01      	blt.n	8005c22 <__sfputc_r+0x16>
 8005c1e:	290a      	cmp	r1, #10
 8005c20:	d103      	bne.n	8005c2a <__sfputc_r+0x1e>
 8005c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c26:	f000 bb6d 	b.w	8006304 <__swbuf_r>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	1c58      	adds	r0, r3, #1
 8005c2e:	6010      	str	r0, [r2, #0]
 8005c30:	7019      	strb	r1, [r3, #0]
 8005c32:	4608      	mov	r0, r1
 8005c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <__sfputs_r>:
 8005c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	460f      	mov	r7, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	18d5      	adds	r5, r2, r3
 8005c44:	42ac      	cmp	r4, r5
 8005c46:	d101      	bne.n	8005c4c <__sfputs_r+0x12>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e007      	b.n	8005c5c <__sfputs_r+0x22>
 8005c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c50:	463a      	mov	r2, r7
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ffda 	bl	8005c0c <__sfputc_r>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d1f3      	bne.n	8005c44 <__sfputs_r+0xa>
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c60 <_vfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	460d      	mov	r5, r1
 8005c66:	b09d      	sub	sp, #116	@ 0x74
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4698      	mov	r8, r3
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <_vfiprintf_r+0x18>
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	b90b      	cbnz	r3, 8005c78 <_vfiprintf_r+0x18>
 8005c74:	f7ff fdbc 	bl	80057f0 <__sinit>
 8005c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c7a:	07d9      	lsls	r1, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	059a      	lsls	r2, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <_vfiprintf_r+0x2a>
 8005c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c86:	f7ff feb8 	bl	80059fa <__retarget_lock_acquire_recursive>
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	071b      	lsls	r3, r3, #28
 8005c8e:	d501      	bpl.n	8005c94 <_vfiprintf_r+0x34>
 8005c90:	692b      	ldr	r3, [r5, #16]
 8005c92:	b99b      	cbnz	r3, 8005cbc <_vfiprintf_r+0x5c>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 fb72 	bl	8006380 <__swsetup_r>
 8005c9c:	b170      	cbz	r0, 8005cbc <_vfiprintf_r+0x5c>
 8005c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca0:	07dc      	lsls	r4, r3, #31
 8005ca2:	d504      	bpl.n	8005cae <_vfiprintf_r+0x4e>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b01d      	add	sp, #116	@ 0x74
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cae:	89ab      	ldrh	r3, [r5, #12]
 8005cb0:	0598      	lsls	r0, r3, #22
 8005cb2:	d4f7      	bmi.n	8005ca4 <_vfiprintf_r+0x44>
 8005cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cb6:	f7ff fea1 	bl	80059fc <__retarget_lock_release_recursive>
 8005cba:	e7f3      	b.n	8005ca4 <_vfiprintf_r+0x44>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cca:	2330      	movs	r3, #48	@ 0x30
 8005ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e7c <_vfiprintf_r+0x21c>
 8005cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cd4:	f04f 0901 	mov.w	r9, #1
 8005cd8:	4623      	mov	r3, r4
 8005cda:	469a      	mov	sl, r3
 8005cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_vfiprintf_r+0x86>
 8005ce2:	2a25      	cmp	r2, #37	@ 0x25
 8005ce4:	d1f9      	bne.n	8005cda <_vfiprintf_r+0x7a>
 8005ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8005cea:	d00b      	beq.n	8005d04 <_vfiprintf_r+0xa4>
 8005cec:	465b      	mov	r3, fp
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffa1 	bl	8005c3a <__sfputs_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f000 80a7 	beq.w	8005e4c <_vfiprintf_r+0x1ec>
 8005cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d00:	445a      	add	r2, fp
 8005d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d04:	f89a 3000 	ldrb.w	r3, [sl]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 809f 	beq.w	8005e4c <_vfiprintf_r+0x1ec>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d18:	f10a 0a01 	add.w	sl, sl, #1
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d26:	4654      	mov	r4, sl
 8005d28:	2205      	movs	r2, #5
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	4853      	ldr	r0, [pc, #332]	@ (8005e7c <_vfiprintf_r+0x21c>)
 8005d30:	f7fa fa4e 	bl	80001d0 <memchr>
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	b9d8      	cbnz	r0, 8005d70 <_vfiprintf_r+0x110>
 8005d38:	06d1      	lsls	r1, r2, #27
 8005d3a:	bf44      	itt	mi
 8005d3c:	2320      	movmi	r3, #32
 8005d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d42:	0713      	lsls	r3, r2, #28
 8005d44:	bf44      	itt	mi
 8005d46:	232b      	movmi	r3, #43	@ 0x2b
 8005d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d52:	d015      	beq.n	8005d80 <_vfiprintf_r+0x120>
 8005d54:	9a07      	ldr	r2, [sp, #28]
 8005d56:	4654      	mov	r4, sl
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f04f 0c0a 	mov.w	ip, #10
 8005d5e:	4621      	mov	r1, r4
 8005d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d64:	3b30      	subs	r3, #48	@ 0x30
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d94b      	bls.n	8005e02 <_vfiprintf_r+0x1a2>
 8005d6a:	b1b0      	cbz	r0, 8005d9a <_vfiprintf_r+0x13a>
 8005d6c:	9207      	str	r2, [sp, #28]
 8005d6e:	e014      	b.n	8005d9a <_vfiprintf_r+0x13a>
 8005d70:	eba0 0308 	sub.w	r3, r0, r8
 8005d74:	fa09 f303 	lsl.w	r3, r9, r3
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	46a2      	mov	sl, r4
 8005d7e:	e7d2      	b.n	8005d26 <_vfiprintf_r+0xc6>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1d19      	adds	r1, r3, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	9103      	str	r1, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bfbb      	ittet	lt
 8005d8c:	425b      	neglt	r3, r3
 8005d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d92:	9307      	strge	r3, [sp, #28]
 8005d94:	9307      	strlt	r3, [sp, #28]
 8005d96:	bfb8      	it	lt
 8005d98:	9204      	strlt	r2, [sp, #16]
 8005d9a:	7823      	ldrb	r3, [r4, #0]
 8005d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d9e:	d10a      	bne.n	8005db6 <_vfiprintf_r+0x156>
 8005da0:	7863      	ldrb	r3, [r4, #1]
 8005da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da4:	d132      	bne.n	8005e0c <_vfiprintf_r+0x1ac>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005db2:	3402      	adds	r4, #2
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e8c <_vfiprintf_r+0x22c>
 8005dba:	7821      	ldrb	r1, [r4, #0]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	f7fa fa06 	bl	80001d0 <memchr>
 8005dc4:	b138      	cbz	r0, 8005dd6 <_vfiprintf_r+0x176>
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	eba0 000a 	sub.w	r0, r0, sl
 8005dcc:	2240      	movs	r2, #64	@ 0x40
 8005dce:	4082      	lsls	r2, r0
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	3401      	adds	r4, #1
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dda:	4829      	ldr	r0, [pc, #164]	@ (8005e80 <_vfiprintf_r+0x220>)
 8005ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005de0:	2206      	movs	r2, #6
 8005de2:	f7fa f9f5 	bl	80001d0 <memchr>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d03f      	beq.n	8005e6a <_vfiprintf_r+0x20a>
 8005dea:	4b26      	ldr	r3, [pc, #152]	@ (8005e84 <_vfiprintf_r+0x224>)
 8005dec:	bb1b      	cbnz	r3, 8005e36 <_vfiprintf_r+0x1d6>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	3308      	adds	r3, #8
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfc:	443b      	add	r3, r7
 8005dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e00:	e76a      	b.n	8005cd8 <_vfiprintf_r+0x78>
 8005e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e06:	460c      	mov	r4, r1
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7a8      	b.n	8005d5e <_vfiprintf_r+0xfe>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	3401      	adds	r4, #1
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	4619      	mov	r1, r3
 8005e14:	f04f 0c0a 	mov.w	ip, #10
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1e:	3a30      	subs	r2, #48	@ 0x30
 8005e20:	2a09      	cmp	r2, #9
 8005e22:	d903      	bls.n	8005e2c <_vfiprintf_r+0x1cc>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0c6      	beq.n	8005db6 <_vfiprintf_r+0x156>
 8005e28:	9105      	str	r1, [sp, #20]
 8005e2a:	e7c4      	b.n	8005db6 <_vfiprintf_r+0x156>
 8005e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e30:	4604      	mov	r4, r0
 8005e32:	2301      	movs	r3, #1
 8005e34:	e7f0      	b.n	8005e18 <_vfiprintf_r+0x1b8>
 8005e36:	ab03      	add	r3, sp, #12
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	4b12      	ldr	r3, [pc, #72]	@ (8005e88 <_vfiprintf_r+0x228>)
 8005e3e:	a904      	add	r1, sp, #16
 8005e40:	4630      	mov	r0, r6
 8005e42:	f3af 8000 	nop.w
 8005e46:	4607      	mov	r7, r0
 8005e48:	1c78      	adds	r0, r7, #1
 8005e4a:	d1d6      	bne.n	8005dfa <_vfiprintf_r+0x19a>
 8005e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	d405      	bmi.n	8005e5e <_vfiprintf_r+0x1fe>
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	059a      	lsls	r2, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_vfiprintf_r+0x1fe>
 8005e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e5a:	f7ff fdcf 	bl	80059fc <__retarget_lock_release_recursive>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	065b      	lsls	r3, r3, #25
 8005e62:	f53f af1f 	bmi.w	8005ca4 <_vfiprintf_r+0x44>
 8005e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e68:	e71e      	b.n	8005ca8 <_vfiprintf_r+0x48>
 8005e6a:	ab03      	add	r3, sp, #12
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	462a      	mov	r2, r5
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <_vfiprintf_r+0x228>)
 8005e72:	a904      	add	r1, sp, #16
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 f879 	bl	8005f6c <_printf_i>
 8005e7a:	e7e4      	b.n	8005e46 <_vfiprintf_r+0x1e6>
 8005e7c:	08006624 	.word	0x08006624
 8005e80:	0800662e 	.word	0x0800662e
 8005e84:	00000000 	.word	0x00000000
 8005e88:	08005c3b 	.word	0x08005c3b
 8005e8c:	0800662a 	.word	0x0800662a

08005e90 <_printf_common>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	4616      	mov	r6, r2
 8005e96:	4698      	mov	r8, r3
 8005e98:	688a      	ldr	r2, [r1, #8]
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bfb8      	it	lt
 8005ea4:	4613      	movlt	r3, r2
 8005ea6:	6033      	str	r3, [r6, #0]
 8005ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eac:	4607      	mov	r7, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	b10a      	cbz	r2, 8005eb6 <_printf_common+0x26>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	0699      	lsls	r1, r3, #26
 8005eba:	bf42      	ittt	mi
 8005ebc:	6833      	ldrmi	r3, [r6, #0]
 8005ebe:	3302      	addmi	r3, #2
 8005ec0:	6033      	strmi	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	f015 0506 	ands.w	r5, r5, #6
 8005ec8:	d106      	bne.n	8005ed8 <_printf_common+0x48>
 8005eca:	f104 0a19 	add.w	sl, r4, #25
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc26      	bgt.n	8005f26 <_printf_common+0x96>
 8005ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	3b00      	subs	r3, #0
 8005ee0:	bf18      	it	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d42b      	bmi.n	8005f40 <_printf_common+0xb0>
 8005ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005eec:	4641      	mov	r1, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c8      	blx	r9
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d01e      	beq.n	8005f34 <_printf_common+0xa4>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	6922      	ldr	r2, [r4, #16]
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	bf02      	ittt	eq
 8005f02:	68e5      	ldreq	r5, [r4, #12]
 8005f04:	6833      	ldreq	r3, [r6, #0]
 8005f06:	1aed      	subeq	r5, r5, r3
 8005f08:	68a3      	ldr	r3, [r4, #8]
 8005f0a:	bf0c      	ite	eq
 8005f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f10:	2500      	movne	r5, #0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bfc4      	itt	gt
 8005f16:	1a9b      	subgt	r3, r3, r2
 8005f18:	18ed      	addgt	r5, r5, r3
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	341a      	adds	r4, #26
 8005f1e:	42b5      	cmp	r5, r6
 8005f20:	d11a      	bne.n	8005f58 <_printf_common+0xc8>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e008      	b.n	8005f38 <_printf_common+0xa8>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4652      	mov	r2, sl
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	47c8      	blx	r9
 8005f30:	3001      	adds	r0, #1
 8005f32:	d103      	bne.n	8005f3c <_printf_common+0xac>
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	e7c6      	b.n	8005ece <_printf_common+0x3e>
 8005f40:	18e1      	adds	r1, r4, r3
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	2030      	movs	r0, #48	@ 0x30
 8005f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f4a:	4422      	add	r2, r4
 8005f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f54:	3302      	adds	r3, #2
 8005f56:	e7c7      	b.n	8005ee8 <_printf_common+0x58>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c8      	blx	r9
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0e6      	beq.n	8005f34 <_printf_common+0xa4>
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7d9      	b.n	8005f1e <_printf_common+0x8e>
	...

08005f6c <_printf_i>:
 8005f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	7e0f      	ldrb	r7, [r1, #24]
 8005f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f74:	2f78      	cmp	r7, #120	@ 0x78
 8005f76:	4691      	mov	r9, r2
 8005f78:	4680      	mov	r8, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	469a      	mov	sl, r3
 8005f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f82:	d807      	bhi.n	8005f94 <_printf_i+0x28>
 8005f84:	2f62      	cmp	r7, #98	@ 0x62
 8005f86:	d80a      	bhi.n	8005f9e <_printf_i+0x32>
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	f000 80d2 	beq.w	8006132 <_printf_i+0x1c6>
 8005f8e:	2f58      	cmp	r7, #88	@ 0x58
 8005f90:	f000 80b9 	beq.w	8006106 <_printf_i+0x19a>
 8005f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f9c:	e03a      	b.n	8006014 <_printf_i+0xa8>
 8005f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fa2:	2b15      	cmp	r3, #21
 8005fa4:	d8f6      	bhi.n	8005f94 <_printf_i+0x28>
 8005fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fac <_printf_i+0x40>)
 8005fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08006019 	.word	0x08006019
 8005fb4:	08005f95 	.word	0x08005f95
 8005fb8:	08005f95 	.word	0x08005f95
 8005fbc:	08005f95 	.word	0x08005f95
 8005fc0:	08005f95 	.word	0x08005f95
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f95 	.word	0x08005f95
 8005fcc:	08005f95 	.word	0x08005f95
 8005fd0:	08005f95 	.word	0x08005f95
 8005fd4:	08005f95 	.word	0x08005f95
 8005fd8:	08006119 	.word	0x08006119
 8005fdc:	08006043 	.word	0x08006043
 8005fe0:	080060d3 	.word	0x080060d3
 8005fe4:	08005f95 	.word	0x08005f95
 8005fe8:	08005f95 	.word	0x08005f95
 8005fec:	0800613b 	.word	0x0800613b
 8005ff0:	08005f95 	.word	0x08005f95
 8005ff4:	08006043 	.word	0x08006043
 8005ff8:	08005f95 	.word	0x08005f95
 8005ffc:	08005f95 	.word	0x08005f95
 8006000:	080060db 	.word	0x080060db
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6032      	str	r2, [r6, #0]
 800600c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006014:	2301      	movs	r3, #1
 8006016:	e09d      	b.n	8006154 <_printf_i+0x1e8>
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	6031      	str	r1, [r6, #0]
 8006020:	0606      	lsls	r6, r0, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xbc>
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	e003      	b.n	8006030 <_printf_i+0xc4>
 8006028:	0645      	lsls	r5, r0, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xb8>
 800602c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006030:	2d00      	cmp	r5, #0
 8006032:	da03      	bge.n	800603c <_printf_i+0xd0>
 8006034:	232d      	movs	r3, #45	@ 0x2d
 8006036:	426d      	negs	r5, r5
 8006038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800603c:	4859      	ldr	r0, [pc, #356]	@ (80061a4 <_printf_i+0x238>)
 800603e:	230a      	movs	r3, #10
 8006040:	e011      	b.n	8006066 <_printf_i+0xfa>
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	6833      	ldr	r3, [r6, #0]
 8006046:	0608      	lsls	r0, r1, #24
 8006048:	f853 5b04 	ldr.w	r5, [r3], #4
 800604c:	d402      	bmi.n	8006054 <_printf_i+0xe8>
 800604e:	0649      	lsls	r1, r1, #25
 8006050:	bf48      	it	mi
 8006052:	b2ad      	uxthmi	r5, r5
 8006054:	2f6f      	cmp	r7, #111	@ 0x6f
 8006056:	4853      	ldr	r0, [pc, #332]	@ (80061a4 <_printf_i+0x238>)
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	bf14      	ite	ne
 800605c:	230a      	movne	r3, #10
 800605e:	2308      	moveq	r3, #8
 8006060:	2100      	movs	r1, #0
 8006062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006066:	6866      	ldr	r6, [r4, #4]
 8006068:	60a6      	str	r6, [r4, #8]
 800606a:	2e00      	cmp	r6, #0
 800606c:	bfa2      	ittt	ge
 800606e:	6821      	ldrge	r1, [r4, #0]
 8006070:	f021 0104 	bicge.w	r1, r1, #4
 8006074:	6021      	strge	r1, [r4, #0]
 8006076:	b90d      	cbnz	r5, 800607c <_printf_i+0x110>
 8006078:	2e00      	cmp	r6, #0
 800607a:	d04b      	beq.n	8006114 <_printf_i+0x1a8>
 800607c:	4616      	mov	r6, r2
 800607e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006082:	fb03 5711 	mls	r7, r3, r1, r5
 8006086:	5dc7      	ldrb	r7, [r0, r7]
 8006088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800608c:	462f      	mov	r7, r5
 800608e:	42bb      	cmp	r3, r7
 8006090:	460d      	mov	r5, r1
 8006092:	d9f4      	bls.n	800607e <_printf_i+0x112>
 8006094:	2b08      	cmp	r3, #8
 8006096:	d10b      	bne.n	80060b0 <_printf_i+0x144>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	07df      	lsls	r7, r3, #31
 800609c:	d508      	bpl.n	80060b0 <_printf_i+0x144>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	6861      	ldr	r1, [r4, #4]
 80060a2:	4299      	cmp	r1, r3
 80060a4:	bfde      	ittt	le
 80060a6:	2330      	movle	r3, #48	@ 0x30
 80060a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060b0:	1b92      	subs	r2, r2, r6
 80060b2:	6122      	str	r2, [r4, #16]
 80060b4:	f8cd a000 	str.w	sl, [sp]
 80060b8:	464b      	mov	r3, r9
 80060ba:	aa03      	add	r2, sp, #12
 80060bc:	4621      	mov	r1, r4
 80060be:	4640      	mov	r0, r8
 80060c0:	f7ff fee6 	bl	8005e90 <_printf_common>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d14a      	bne.n	800615e <_printf_i+0x1f2>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	b004      	add	sp, #16
 80060ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	f043 0320 	orr.w	r3, r3, #32
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	4833      	ldr	r0, [pc, #204]	@ (80061a8 <_printf_i+0x23c>)
 80060dc:	2778      	movs	r7, #120	@ 0x78
 80060de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	6831      	ldr	r1, [r6, #0]
 80060e6:	061f      	lsls	r7, r3, #24
 80060e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80060ec:	d402      	bmi.n	80060f4 <_printf_i+0x188>
 80060ee:	065f      	lsls	r7, r3, #25
 80060f0:	bf48      	it	mi
 80060f2:	b2ad      	uxthmi	r5, r5
 80060f4:	6031      	str	r1, [r6, #0]
 80060f6:	07d9      	lsls	r1, r3, #31
 80060f8:	bf44      	itt	mi
 80060fa:	f043 0320 	orrmi.w	r3, r3, #32
 80060fe:	6023      	strmi	r3, [r4, #0]
 8006100:	b11d      	cbz	r5, 800610a <_printf_i+0x19e>
 8006102:	2310      	movs	r3, #16
 8006104:	e7ac      	b.n	8006060 <_printf_i+0xf4>
 8006106:	4827      	ldr	r0, [pc, #156]	@ (80061a4 <_printf_i+0x238>)
 8006108:	e7e9      	b.n	80060de <_printf_i+0x172>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	f023 0320 	bic.w	r3, r3, #32
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	e7f6      	b.n	8006102 <_printf_i+0x196>
 8006114:	4616      	mov	r6, r2
 8006116:	e7bd      	b.n	8006094 <_printf_i+0x128>
 8006118:	6833      	ldr	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	6961      	ldr	r1, [r4, #20]
 800611e:	1d18      	adds	r0, r3, #4
 8006120:	6030      	str	r0, [r6, #0]
 8006122:	062e      	lsls	r6, r5, #24
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	d501      	bpl.n	800612c <_printf_i+0x1c0>
 8006128:	6019      	str	r1, [r3, #0]
 800612a:	e002      	b.n	8006132 <_printf_i+0x1c6>
 800612c:	0668      	lsls	r0, r5, #25
 800612e:	d5fb      	bpl.n	8006128 <_printf_i+0x1bc>
 8006130:	8019      	strh	r1, [r3, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	6123      	str	r3, [r4, #16]
 8006136:	4616      	mov	r6, r2
 8006138:	e7bc      	b.n	80060b4 <_printf_i+0x148>
 800613a:	6833      	ldr	r3, [r6, #0]
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	6032      	str	r2, [r6, #0]
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	6862      	ldr	r2, [r4, #4]
 8006144:	2100      	movs	r1, #0
 8006146:	4630      	mov	r0, r6
 8006148:	f7fa f842 	bl	80001d0 <memchr>
 800614c:	b108      	cbz	r0, 8006152 <_printf_i+0x1e6>
 800614e:	1b80      	subs	r0, r0, r6
 8006150:	6060      	str	r0, [r4, #4]
 8006152:	6863      	ldr	r3, [r4, #4]
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	2300      	movs	r3, #0
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615c:	e7aa      	b.n	80060b4 <_printf_i+0x148>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	4632      	mov	r2, r6
 8006162:	4649      	mov	r1, r9
 8006164:	4640      	mov	r0, r8
 8006166:	47d0      	blx	sl
 8006168:	3001      	adds	r0, #1
 800616a:	d0ad      	beq.n	80060c8 <_printf_i+0x15c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	079b      	lsls	r3, r3, #30
 8006170:	d413      	bmi.n	800619a <_printf_i+0x22e>
 8006172:	68e0      	ldr	r0, [r4, #12]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	4298      	cmp	r0, r3
 8006178:	bfb8      	it	lt
 800617a:	4618      	movlt	r0, r3
 800617c:	e7a6      	b.n	80060cc <_printf_i+0x160>
 800617e:	2301      	movs	r3, #1
 8006180:	4632      	mov	r2, r6
 8006182:	4649      	mov	r1, r9
 8006184:	4640      	mov	r0, r8
 8006186:	47d0      	blx	sl
 8006188:	3001      	adds	r0, #1
 800618a:	d09d      	beq.n	80060c8 <_printf_i+0x15c>
 800618c:	3501      	adds	r5, #1
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	9903      	ldr	r1, [sp, #12]
 8006192:	1a5b      	subs	r3, r3, r1
 8006194:	42ab      	cmp	r3, r5
 8006196:	dcf2      	bgt.n	800617e <_printf_i+0x212>
 8006198:	e7eb      	b.n	8006172 <_printf_i+0x206>
 800619a:	2500      	movs	r5, #0
 800619c:	f104 0619 	add.w	r6, r4, #25
 80061a0:	e7f5      	b.n	800618e <_printf_i+0x222>
 80061a2:	bf00      	nop
 80061a4:	08006635 	.word	0x08006635
 80061a8:	08006646 	.word	0x08006646

080061ac <__sflush_r>:
 80061ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	0716      	lsls	r6, r2, #28
 80061b6:	4605      	mov	r5, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	d454      	bmi.n	8006266 <__sflush_r+0xba>
 80061bc:	684b      	ldr	r3, [r1, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dc02      	bgt.n	80061c8 <__sflush_r+0x1c>
 80061c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd48      	ble.n	800625a <__sflush_r+0xae>
 80061c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	d045      	beq.n	800625a <__sflush_r+0xae>
 80061ce:	2300      	movs	r3, #0
 80061d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061d4:	682f      	ldr	r7, [r5, #0]
 80061d6:	6a21      	ldr	r1, [r4, #32]
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	d030      	beq.n	800623e <__sflush_r+0x92>
 80061dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	0759      	lsls	r1, r3, #29
 80061e2:	d505      	bpl.n	80061f0 <__sflush_r+0x44>
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061ea:	b10b      	cbz	r3, 80061f0 <__sflush_r+0x44>
 80061ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061f4:	6a21      	ldr	r1, [r4, #32]
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b0      	blx	r6
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	d106      	bne.n	800620e <__sflush_r+0x62>
 8006200:	6829      	ldr	r1, [r5, #0]
 8006202:	291d      	cmp	r1, #29
 8006204:	d82b      	bhi.n	800625e <__sflush_r+0xb2>
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <__sflush_r+0x104>)
 8006208:	410a      	asrs	r2, r1
 800620a:	07d6      	lsls	r6, r2, #31
 800620c:	d427      	bmi.n	800625e <__sflush_r+0xb2>
 800620e:	2200      	movs	r2, #0
 8006210:	6062      	str	r2, [r4, #4]
 8006212:	04d9      	lsls	r1, r3, #19
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	d504      	bpl.n	8006224 <__sflush_r+0x78>
 800621a:	1c42      	adds	r2, r0, #1
 800621c:	d101      	bne.n	8006222 <__sflush_r+0x76>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b903      	cbnz	r3, 8006224 <__sflush_r+0x78>
 8006222:	6560      	str	r0, [r4, #84]	@ 0x54
 8006224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006226:	602f      	str	r7, [r5, #0]
 8006228:	b1b9      	cbz	r1, 800625a <__sflush_r+0xae>
 800622a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622e:	4299      	cmp	r1, r3
 8006230:	d002      	beq.n	8006238 <__sflush_r+0x8c>
 8006232:	4628      	mov	r0, r5
 8006234:	f7ff fbf2 	bl	8005a1c <_free_r>
 8006238:	2300      	movs	r3, #0
 800623a:	6363      	str	r3, [r4, #52]	@ 0x34
 800623c:	e00d      	b.n	800625a <__sflush_r+0xae>
 800623e:	2301      	movs	r3, #1
 8006240:	4628      	mov	r0, r5
 8006242:	47b0      	blx	r6
 8006244:	4602      	mov	r2, r0
 8006246:	1c50      	adds	r0, r2, #1
 8006248:	d1c9      	bne.n	80061de <__sflush_r+0x32>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0c6      	beq.n	80061de <__sflush_r+0x32>
 8006250:	2b1d      	cmp	r3, #29
 8006252:	d001      	beq.n	8006258 <__sflush_r+0xac>
 8006254:	2b16      	cmp	r3, #22
 8006256:	d11e      	bne.n	8006296 <__sflush_r+0xea>
 8006258:	602f      	str	r7, [r5, #0]
 800625a:	2000      	movs	r0, #0
 800625c:	e022      	b.n	80062a4 <__sflush_r+0xf8>
 800625e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006262:	b21b      	sxth	r3, r3
 8006264:	e01b      	b.n	800629e <__sflush_r+0xf2>
 8006266:	690f      	ldr	r7, [r1, #16]
 8006268:	2f00      	cmp	r7, #0
 800626a:	d0f6      	beq.n	800625a <__sflush_r+0xae>
 800626c:	0793      	lsls	r3, r2, #30
 800626e:	680e      	ldr	r6, [r1, #0]
 8006270:	bf08      	it	eq
 8006272:	694b      	ldreq	r3, [r1, #20]
 8006274:	600f      	str	r7, [r1, #0]
 8006276:	bf18      	it	ne
 8006278:	2300      	movne	r3, #0
 800627a:	eba6 0807 	sub.w	r8, r6, r7
 800627e:	608b      	str	r3, [r1, #8]
 8006280:	f1b8 0f00 	cmp.w	r8, #0
 8006284:	dde9      	ble.n	800625a <__sflush_r+0xae>
 8006286:	6a21      	ldr	r1, [r4, #32]
 8006288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800628a:	4643      	mov	r3, r8
 800628c:	463a      	mov	r2, r7
 800628e:	4628      	mov	r0, r5
 8006290:	47b0      	blx	r6
 8006292:	2800      	cmp	r0, #0
 8006294:	dc08      	bgt.n	80062a8 <__sflush_r+0xfc>
 8006296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a8:	4407      	add	r7, r0
 80062aa:	eba8 0800 	sub.w	r8, r8, r0
 80062ae:	e7e7      	b.n	8006280 <__sflush_r+0xd4>
 80062b0:	dfbffffe 	.word	0xdfbffffe

080062b4 <_fflush_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	4605      	mov	r5, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	b913      	cbnz	r3, 80062c4 <_fflush_r+0x10>
 80062be:	2500      	movs	r5, #0
 80062c0:	4628      	mov	r0, r5
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	b118      	cbz	r0, 80062ce <_fflush_r+0x1a>
 80062c6:	6a03      	ldr	r3, [r0, #32]
 80062c8:	b90b      	cbnz	r3, 80062ce <_fflush_r+0x1a>
 80062ca:	f7ff fa91 	bl	80057f0 <__sinit>
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f3      	beq.n	80062be <_fflush_r+0xa>
 80062d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062d8:	07d0      	lsls	r0, r2, #31
 80062da:	d404      	bmi.n	80062e6 <_fflush_r+0x32>
 80062dc:	0599      	lsls	r1, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_fflush_r+0x32>
 80062e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e2:	f7ff fb8a 	bl	80059fa <__retarget_lock_acquire_recursive>
 80062e6:	4628      	mov	r0, r5
 80062e8:	4621      	mov	r1, r4
 80062ea:	f7ff ff5f 	bl	80061ac <__sflush_r>
 80062ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062f0:	07da      	lsls	r2, r3, #31
 80062f2:	4605      	mov	r5, r0
 80062f4:	d4e4      	bmi.n	80062c0 <_fflush_r+0xc>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	059b      	lsls	r3, r3, #22
 80062fa:	d4e1      	bmi.n	80062c0 <_fflush_r+0xc>
 80062fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062fe:	f7ff fb7d 	bl	80059fc <__retarget_lock_release_recursive>
 8006302:	e7dd      	b.n	80062c0 <_fflush_r+0xc>

08006304 <__swbuf_r>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	460e      	mov	r6, r1
 8006308:	4614      	mov	r4, r2
 800630a:	4605      	mov	r5, r0
 800630c:	b118      	cbz	r0, 8006316 <__swbuf_r+0x12>
 800630e:	6a03      	ldr	r3, [r0, #32]
 8006310:	b90b      	cbnz	r3, 8006316 <__swbuf_r+0x12>
 8006312:	f7ff fa6d 	bl	80057f0 <__sinit>
 8006316:	69a3      	ldr	r3, [r4, #24]
 8006318:	60a3      	str	r3, [r4, #8]
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	071a      	lsls	r2, r3, #28
 800631e:	d501      	bpl.n	8006324 <__swbuf_r+0x20>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b943      	cbnz	r3, 8006336 <__swbuf_r+0x32>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f82a 	bl	8006380 <__swsetup_r>
 800632c:	b118      	cbz	r0, 8006336 <__swbuf_r+0x32>
 800632e:	f04f 37ff 	mov.w	r7, #4294967295
 8006332:	4638      	mov	r0, r7
 8006334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	1a98      	subs	r0, r3, r2
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	b2f6      	uxtb	r6, r6
 8006340:	4283      	cmp	r3, r0
 8006342:	4637      	mov	r7, r6
 8006344:	dc05      	bgt.n	8006352 <__swbuf_r+0x4e>
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff ffb3 	bl	80062b4 <_fflush_r>
 800634e:	2800      	cmp	r0, #0
 8006350:	d1ed      	bne.n	800632e <__swbuf_r+0x2a>
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	3b01      	subs	r3, #1
 8006356:	60a3      	str	r3, [r4, #8]
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	701e      	strb	r6, [r3, #0]
 8006360:	6962      	ldr	r2, [r4, #20]
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	429a      	cmp	r2, r3
 8006366:	d004      	beq.n	8006372 <__swbuf_r+0x6e>
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	07db      	lsls	r3, r3, #31
 800636c:	d5e1      	bpl.n	8006332 <__swbuf_r+0x2e>
 800636e:	2e0a      	cmp	r6, #10
 8006370:	d1df      	bne.n	8006332 <__swbuf_r+0x2e>
 8006372:	4621      	mov	r1, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff ff9d 	bl	80062b4 <_fflush_r>
 800637a:	2800      	cmp	r0, #0
 800637c:	d0d9      	beq.n	8006332 <__swbuf_r+0x2e>
 800637e:	e7d6      	b.n	800632e <__swbuf_r+0x2a>

08006380 <__swsetup_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4b29      	ldr	r3, [pc, #164]	@ (8006428 <__swsetup_r+0xa8>)
 8006384:	4605      	mov	r5, r0
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	460c      	mov	r4, r1
 800638a:	b118      	cbz	r0, 8006394 <__swsetup_r+0x14>
 800638c:	6a03      	ldr	r3, [r0, #32]
 800638e:	b90b      	cbnz	r3, 8006394 <__swsetup_r+0x14>
 8006390:	f7ff fa2e 	bl	80057f0 <__sinit>
 8006394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006398:	0719      	lsls	r1, r3, #28
 800639a:	d422      	bmi.n	80063e2 <__swsetup_r+0x62>
 800639c:	06da      	lsls	r2, r3, #27
 800639e:	d407      	bmi.n	80063b0 <__swsetup_r+0x30>
 80063a0:	2209      	movs	r2, #9
 80063a2:	602a      	str	r2, [r5, #0]
 80063a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295
 80063ae:	e033      	b.n	8006418 <__swsetup_r+0x98>
 80063b0:	0758      	lsls	r0, r3, #29
 80063b2:	d512      	bpl.n	80063da <__swsetup_r+0x5a>
 80063b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063b6:	b141      	cbz	r1, 80063ca <__swsetup_r+0x4a>
 80063b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063bc:	4299      	cmp	r1, r3
 80063be:	d002      	beq.n	80063c6 <__swsetup_r+0x46>
 80063c0:	4628      	mov	r0, r5
 80063c2:	f7ff fb2b 	bl	8005a1c <_free_r>
 80063c6:	2300      	movs	r3, #0
 80063c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	2300      	movs	r3, #0
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	f043 0308 	orr.w	r3, r3, #8
 80063e0:	81a3      	strh	r3, [r4, #12]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	b94b      	cbnz	r3, 80063fa <__swsetup_r+0x7a>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f0:	d003      	beq.n	80063fa <__swsetup_r+0x7a>
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f84f 	bl	8006498 <__smakebuf_r>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	f013 0201 	ands.w	r2, r3, #1
 8006402:	d00a      	beq.n	800641a <__swsetup_r+0x9a>
 8006404:	2200      	movs	r2, #0
 8006406:	60a2      	str	r2, [r4, #8]
 8006408:	6962      	ldr	r2, [r4, #20]
 800640a:	4252      	negs	r2, r2
 800640c:	61a2      	str	r2, [r4, #24]
 800640e:	6922      	ldr	r2, [r4, #16]
 8006410:	b942      	cbnz	r2, 8006424 <__swsetup_r+0xa4>
 8006412:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006416:	d1c5      	bne.n	80063a4 <__swsetup_r+0x24>
 8006418:	bd38      	pop	{r3, r4, r5, pc}
 800641a:	0799      	lsls	r1, r3, #30
 800641c:	bf58      	it	pl
 800641e:	6962      	ldrpl	r2, [r4, #20]
 8006420:	60a2      	str	r2, [r4, #8]
 8006422:	e7f4      	b.n	800640e <__swsetup_r+0x8e>
 8006424:	2000      	movs	r0, #0
 8006426:	e7f7      	b.n	8006418 <__swsetup_r+0x98>
 8006428:	2000001c 	.word	0x2000001c

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	@ (8006448 <_sbrk_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fa fdea 	bl	8001010 <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	20005a1c 	.word	0x20005a1c

0800644c <__swhatbuf_r>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	460c      	mov	r4, r1
 8006450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006454:	2900      	cmp	r1, #0
 8006456:	b096      	sub	sp, #88	@ 0x58
 8006458:	4615      	mov	r5, r2
 800645a:	461e      	mov	r6, r3
 800645c:	da0d      	bge.n	800647a <__swhatbuf_r+0x2e>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	bf14      	ite	ne
 800646a:	2340      	movne	r3, #64	@ 0x40
 800646c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006470:	2000      	movs	r0, #0
 8006472:	6031      	str	r1, [r6, #0]
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	b016      	add	sp, #88	@ 0x58
 8006478:	bd70      	pop	{r4, r5, r6, pc}
 800647a:	466a      	mov	r2, sp
 800647c:	f000 f848 	bl	8006510 <_fstat_r>
 8006480:	2800      	cmp	r0, #0
 8006482:	dbec      	blt.n	800645e <__swhatbuf_r+0x12>
 8006484:	9901      	ldr	r1, [sp, #4]
 8006486:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800648a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800648e:	4259      	negs	r1, r3
 8006490:	4159      	adcs	r1, r3
 8006492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006496:	e7eb      	b.n	8006470 <__swhatbuf_r+0x24>

08006498 <__smakebuf_r>:
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649c:	079d      	lsls	r5, r3, #30
 800649e:	4606      	mov	r6, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	d507      	bpl.n	80064b4 <__smakebuf_r+0x1c>
 80064a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6163      	str	r3, [r4, #20]
 80064b0:	b003      	add	sp, #12
 80064b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b4:	ab01      	add	r3, sp, #4
 80064b6:	466a      	mov	r2, sp
 80064b8:	f7ff ffc8 	bl	800644c <__swhatbuf_r>
 80064bc:	9f00      	ldr	r7, [sp, #0]
 80064be:	4605      	mov	r5, r0
 80064c0:	4639      	mov	r1, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff fb16 	bl	8005af4 <_malloc_r>
 80064c8:	b948      	cbnz	r0, 80064de <__smakebuf_r+0x46>
 80064ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ce:	059a      	lsls	r2, r3, #22
 80064d0:	d4ee      	bmi.n	80064b0 <__smakebuf_r+0x18>
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	f043 0302 	orr.w	r3, r3, #2
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	e7e2      	b.n	80064a4 <__smakebuf_r+0xc>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	6020      	str	r0, [r4, #0]
 80064e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	9b01      	ldr	r3, [sp, #4]
 80064ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064ee:	b15b      	cbz	r3, 8006508 <__smakebuf_r+0x70>
 80064f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f81d 	bl	8006534 <_isatty_r>
 80064fa:	b128      	cbz	r0, 8006508 <__smakebuf_r+0x70>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	431d      	orrs	r5, r3
 800650c:	81a5      	strh	r5, [r4, #12]
 800650e:	e7cf      	b.n	80064b0 <__smakebuf_r+0x18>

08006510 <_fstat_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	@ (8006530 <_fstat_r+0x20>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	f7fa fd4e 	bl	8000fbe <_fstat>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d102      	bne.n	800652c <_fstat_r+0x1c>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b103      	cbz	r3, 800652c <_fstat_r+0x1c>
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	bd38      	pop	{r3, r4, r5, pc}
 800652e:	bf00      	nop
 8006530:	20005a1c 	.word	0x20005a1c

08006534 <_isatty_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_isatty_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa fd4d 	bl	8000fde <_isatty>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_isatty_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_isatty_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20005a1c 	.word	0x20005a1c

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr
